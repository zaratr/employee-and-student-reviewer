import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { CognitoIdentityProviderServiceException as __BaseException } from "./CognitoIdentityProviderServiceException";
export declare enum RecoveryOptionNameType {
    ADMIN_ONLY = "admin_only",
    VERIFIED_EMAIL = "verified_email",
    VERIFIED_PHONE_NUMBER = "verified_phone_number"
}

export interface RecoveryOptionType {
    
    Priority: number | undefined;
    
    Name: RecoveryOptionNameType | string | undefined;
}
export declare namespace RecoveryOptionType {
    
    const filterSensitiveLog: (obj: RecoveryOptionType) => any;
}

export interface AccountRecoverySettingType {
    
    RecoveryMechanisms?: RecoveryOptionType[];
}
export declare namespace AccountRecoverySettingType {
    
    const filterSensitiveLog: (obj: AccountRecoverySettingType) => any;
}
export declare enum AccountTakeoverEventActionType {
    BLOCK = "BLOCK",
    MFA_IF_CONFIGURED = "MFA_IF_CONFIGURED",
    MFA_REQUIRED = "MFA_REQUIRED",
    NO_ACTION = "NO_ACTION"
}

export interface AccountTakeoverActionType {
    
    Notify: boolean | undefined;
    
    EventAction: AccountTakeoverEventActionType | string | undefined;
}
export declare namespace AccountTakeoverActionType {
    
    const filterSensitiveLog: (obj: AccountTakeoverActionType) => any;
}

export interface AccountTakeoverActionsType {
    
    LowAction?: AccountTakeoverActionType;
    
    MediumAction?: AccountTakeoverActionType;
    
    HighAction?: AccountTakeoverActionType;
}
export declare namespace AccountTakeoverActionsType {
    
    const filterSensitiveLog: (obj: AccountTakeoverActionsType) => any;
}

export interface NotifyEmailType {
    
    Subject: string | undefined;
    
    HtmlBody?: string;
    
    TextBody?: string;
}
export declare namespace NotifyEmailType {
    
    const filterSensitiveLog: (obj: NotifyEmailType) => any;
}

export interface NotifyConfigurationType {
    
    From?: string;
    
    ReplyTo?: string;
    
    SourceArn: string | undefined;
    
    BlockEmail?: NotifyEmailType;
    
    NoActionEmail?: NotifyEmailType;
    
    MfaEmail?: NotifyEmailType;
}
export declare namespace NotifyConfigurationType {
    
    const filterSensitiveLog: (obj: NotifyConfigurationType) => any;
}

export interface AccountTakeoverRiskConfigurationType {
    
    NotifyConfiguration?: NotifyConfigurationType;
    
    Actions: AccountTakeoverActionsType | undefined;
}
export declare namespace AccountTakeoverRiskConfigurationType {
    
    const filterSensitiveLog: (obj: AccountTakeoverRiskConfigurationType) => any;
}
export declare enum AttributeDataType {
    BOOLEAN = "Boolean",
    DATETIME = "DateTime",
    NUMBER = "Number",
    STRING = "String"
}

export interface NumberAttributeConstraintsType {
    
    MinValue?: string;
    
    MaxValue?: string;
}
export declare namespace NumberAttributeConstraintsType {
    
    const filterSensitiveLog: (obj: NumberAttributeConstraintsType) => any;
}

export interface StringAttributeConstraintsType {
    
    MinLength?: string;
    
    MaxLength?: string;
}
export declare namespace StringAttributeConstraintsType {
    
    const filterSensitiveLog: (obj: StringAttributeConstraintsType) => any;
}

export interface SchemaAttributeType {
    
    Name?: string;
    
    AttributeDataType?: AttributeDataType | string;
    
    DeveloperOnlyAttribute?: boolean;
    
    Mutable?: boolean;
    
    Required?: boolean;
    
    NumberAttributeConstraints?: NumberAttributeConstraintsType;
    
    StringAttributeConstraints?: StringAttributeConstraintsType;
}
export declare namespace SchemaAttributeType {
    
    const filterSensitiveLog: (obj: SchemaAttributeType) => any;
}

export interface AddCustomAttributesRequest {
    
    UserPoolId: string | undefined;
    
    CustomAttributes: SchemaAttributeType[] | undefined;
}
export declare namespace AddCustomAttributesRequest {
    
    const filterSensitiveLog: (obj: AddCustomAttributesRequest) => any;
}

export interface AddCustomAttributesResponse {
}
export declare namespace AddCustomAttributesResponse {
    
    const filterSensitiveLog: (obj: AddCustomAttributesResponse) => any;
}

export declare class InternalErrorException extends __BaseException {
    readonly name: "InternalErrorException";
    readonly $fault: "server";
    
    constructor(opts: __ExceptionOptionType<InternalErrorException, __BaseException>);
}

export declare class InvalidParameterException extends __BaseException {
    readonly name: "InvalidParameterException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidParameterException, __BaseException>);
}

export declare class NotAuthorizedException extends __BaseException {
    readonly name: "NotAuthorizedException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<NotAuthorizedException, __BaseException>);
}

export declare class ResourceNotFoundException extends __BaseException {
    readonly name: "ResourceNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
}

export declare class TooManyRequestsException extends __BaseException {
    readonly name: "TooManyRequestsException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
}

export declare class UserImportInProgressException extends __BaseException {
    readonly name: "UserImportInProgressException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UserImportInProgressException, __BaseException>);
}
export interface AdminAddUserToGroupRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
    
    GroupName: string | undefined;
}
export declare namespace AdminAddUserToGroupRequest {
    
    const filterSensitiveLog: (obj: AdminAddUserToGroupRequest) => any;
}

export declare class UserNotFoundException extends __BaseException {
    readonly name: "UserNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UserNotFoundException, __BaseException>);
}

export interface AdminConfirmSignUpRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
    
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace AdminConfirmSignUpRequest {
    
    const filterSensitiveLog: (obj: AdminConfirmSignUpRequest) => any;
}

export interface AdminConfirmSignUpResponse {
}
export declare namespace AdminConfirmSignUpResponse {
    
    const filterSensitiveLog: (obj: AdminConfirmSignUpResponse) => any;
}

export declare class InvalidLambdaResponseException extends __BaseException {
    readonly name: "InvalidLambdaResponseException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidLambdaResponseException, __BaseException>);
}

export declare class LimitExceededException extends __BaseException {
    readonly name: "LimitExceededException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
}

export declare class TooManyFailedAttemptsException extends __BaseException {
    readonly name: "TooManyFailedAttemptsException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<TooManyFailedAttemptsException, __BaseException>);
}

export declare class UnexpectedLambdaException extends __BaseException {
    readonly name: "UnexpectedLambdaException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UnexpectedLambdaException, __BaseException>);
}

export declare class UserLambdaValidationException extends __BaseException {
    readonly name: "UserLambdaValidationException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UserLambdaValidationException, __BaseException>);
}
export declare enum DeliveryMediumType {
    EMAIL = "EMAIL",
    SMS = "SMS"
}
export declare enum MessageActionType {
    RESEND = "RESEND",
    SUPPRESS = "SUPPRESS"
}

export interface AttributeType {
    
    Name: string | undefined;
    
    Value?: string;
}
export declare namespace AttributeType {
    
    const filterSensitiveLog: (obj: AttributeType) => any;
}

export interface AdminCreateUserRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
    
    UserAttributes?: AttributeType[];
    
    ValidationData?: AttributeType[];
    
    TemporaryPassword?: string;
    
    ForceAliasCreation?: boolean;
    
    MessageAction?: MessageActionType | string;
    
    DesiredDeliveryMediums?: (DeliveryMediumType | string)[];
    
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace AdminCreateUserRequest {
    
    const filterSensitiveLog: (obj: AdminCreateUserRequest) => any;
}

export interface MFAOptionType {
    
    DeliveryMedium?: DeliveryMediumType | string;
    
    AttributeName?: string;
}
export declare namespace MFAOptionType {
    
    const filterSensitiveLog: (obj: MFAOptionType) => any;
}
export declare enum UserStatusType {
    ARCHIVED = "ARCHIVED",
    COMPROMISED = "COMPROMISED",
    CONFIRMED = "CONFIRMED",
    FORCE_CHANGE_PASSWORD = "FORCE_CHANGE_PASSWORD",
    RESET_REQUIRED = "RESET_REQUIRED",
    UNCONFIRMED = "UNCONFIRMED",
    UNKNOWN = "UNKNOWN"
}

export interface UserType {
    
    Username?: string;
    
    Attributes?: AttributeType[];
    
    UserCreateDate?: Date;
    
    UserLastModifiedDate?: Date;
    
    Enabled?: boolean;
    
    UserStatus?: UserStatusType | string;
    
    MFAOptions?: MFAOptionType[];
}
export declare namespace UserType {
    
    const filterSensitiveLog: (obj: UserType) => any;
}

export interface AdminCreateUserResponse {
    
    User?: UserType;
}
export declare namespace AdminCreateUserResponse {
    
    const filterSensitiveLog: (obj: AdminCreateUserResponse) => any;
}

export declare class CodeDeliveryFailureException extends __BaseException {
    readonly name: "CodeDeliveryFailureException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<CodeDeliveryFailureException, __BaseException>);
}

export declare class InvalidPasswordException extends __BaseException {
    readonly name: "InvalidPasswordException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidPasswordException, __BaseException>);
}

export declare class InvalidSmsRoleAccessPolicyException extends __BaseException {
    readonly name: "InvalidSmsRoleAccessPolicyException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidSmsRoleAccessPolicyException, __BaseException>);
}

export declare class InvalidSmsRoleTrustRelationshipException extends __BaseException {
    readonly name: "InvalidSmsRoleTrustRelationshipException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidSmsRoleTrustRelationshipException, __BaseException>);
}

export declare class PreconditionNotMetException extends __BaseException {
    readonly name: "PreconditionNotMetException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<PreconditionNotMetException, __BaseException>);
}

export declare class UnsupportedUserStateException extends __BaseException {
    readonly name: "UnsupportedUserStateException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UnsupportedUserStateException, __BaseException>);
}

export declare class UsernameExistsException extends __BaseException {
    readonly name: "UsernameExistsException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UsernameExistsException, __BaseException>);
}

export interface MessageTemplateType {
    
    SMSMessage?: string;
    
    EmailMessage?: string;
    
    EmailSubject?: string;
}
export declare namespace MessageTemplateType {
    
    const filterSensitiveLog: (obj: MessageTemplateType) => any;
}

export interface AdminCreateUserConfigType {
    
    AllowAdminCreateUserOnly?: boolean;
    
    UnusedAccountValidityDays?: number;
    
    InviteMessageTemplate?: MessageTemplateType;
}
export declare namespace AdminCreateUserConfigType {
    
    const filterSensitiveLog: (obj: AdminCreateUserConfigType) => any;
}

export interface AdminDeleteUserRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
}
export declare namespace AdminDeleteUserRequest {
    
    const filterSensitiveLog: (obj: AdminDeleteUserRequest) => any;
}

export interface AdminDeleteUserAttributesRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
    
    UserAttributeNames: string[] | undefined;
}
export declare namespace AdminDeleteUserAttributesRequest {
    
    const filterSensitiveLog: (obj: AdminDeleteUserAttributesRequest) => any;
}

export interface AdminDeleteUserAttributesResponse {
}
export declare namespace AdminDeleteUserAttributesResponse {
    
    const filterSensitiveLog: (obj: AdminDeleteUserAttributesResponse) => any;
}

export interface ProviderUserIdentifierType {
    
    ProviderName?: string;
    
    ProviderAttributeName?: string;
    
    ProviderAttributeValue?: string;
}
export declare namespace ProviderUserIdentifierType {
    
    const filterSensitiveLog: (obj: ProviderUserIdentifierType) => any;
}
export interface AdminDisableProviderForUserRequest {
    
    UserPoolId: string | undefined;
    
    User: ProviderUserIdentifierType | undefined;
}
export declare namespace AdminDisableProviderForUserRequest {
    
    const filterSensitiveLog: (obj: AdminDisableProviderForUserRequest) => any;
}
export interface AdminDisableProviderForUserResponse {
}
export declare namespace AdminDisableProviderForUserResponse {
    
    const filterSensitiveLog: (obj: AdminDisableProviderForUserResponse) => any;
}

export declare class AliasExistsException extends __BaseException {
    readonly name: "AliasExistsException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<AliasExistsException, __BaseException>);
}

export interface AdminDisableUserRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
}
export declare namespace AdminDisableUserRequest {
    
    const filterSensitiveLog: (obj: AdminDisableUserRequest) => any;
}

export interface AdminDisableUserResponse {
}
export declare namespace AdminDisableUserResponse {
    
    const filterSensitiveLog: (obj: AdminDisableUserResponse) => any;
}

export interface AdminEnableUserRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
}
export declare namespace AdminEnableUserRequest {
    
    const filterSensitiveLog: (obj: AdminEnableUserRequest) => any;
}

export interface AdminEnableUserResponse {
}
export declare namespace AdminEnableUserResponse {
    
    const filterSensitiveLog: (obj: AdminEnableUserResponse) => any;
}

export interface AdminForgetDeviceRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
    
    DeviceKey: string | undefined;
}
export declare namespace AdminForgetDeviceRequest {
    
    const filterSensitiveLog: (obj: AdminForgetDeviceRequest) => any;
}

export declare class InvalidUserPoolConfigurationException extends __BaseException {
    readonly name: "InvalidUserPoolConfigurationException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidUserPoolConfigurationException, __BaseException>);
}

export interface AdminGetDeviceRequest {
    
    DeviceKey: string | undefined;
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
}
export declare namespace AdminGetDeviceRequest {
    
    const filterSensitiveLog: (obj: AdminGetDeviceRequest) => any;
}

export interface DeviceType {
    
    DeviceKey?: string;
    
    DeviceAttributes?: AttributeType[];
    
    DeviceCreateDate?: Date;
    
    DeviceLastModifiedDate?: Date;
    
    DeviceLastAuthenticatedDate?: Date;
}
export declare namespace DeviceType {
    
    const filterSensitiveLog: (obj: DeviceType) => any;
}

export interface AdminGetDeviceResponse {
    
    Device: DeviceType | undefined;
}
export declare namespace AdminGetDeviceResponse {
    
    const filterSensitiveLog: (obj: AdminGetDeviceResponse) => any;
}

export interface AdminGetUserRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
}
export declare namespace AdminGetUserRequest {
    
    const filterSensitiveLog: (obj: AdminGetUserRequest) => any;
}

export interface AdminGetUserResponse {
    
    Username: string | undefined;
    
    UserAttributes?: AttributeType[];
    
    UserCreateDate?: Date;
    
    UserLastModifiedDate?: Date;
    
    Enabled?: boolean;
    
    UserStatus?: UserStatusType | string;
    
    MFAOptions?: MFAOptionType[];
    
    PreferredMfaSetting?: string;
    
    UserMFASettingList?: string[];
}
export declare namespace AdminGetUserResponse {
    
    const filterSensitiveLog: (obj: AdminGetUserResponse) => any;
}

export interface AnalyticsMetadataType {
    
    AnalyticsEndpointId?: string;
}
export declare namespace AnalyticsMetadataType {
    
    const filterSensitiveLog: (obj: AnalyticsMetadataType) => any;
}
export declare enum AuthFlowType {
    ADMIN_NO_SRP_AUTH = "ADMIN_NO_SRP_AUTH",
    ADMIN_USER_PASSWORD_AUTH = "ADMIN_USER_PASSWORD_AUTH",
    CUSTOM_AUTH = "CUSTOM_AUTH",
    REFRESH_TOKEN = "REFRESH_TOKEN",
    REFRESH_TOKEN_AUTH = "REFRESH_TOKEN_AUTH",
    USER_PASSWORD_AUTH = "USER_PASSWORD_AUTH",
    USER_SRP_AUTH = "USER_SRP_AUTH"
}

export interface HttpHeader {
    
    headerName?: string;
    
    headerValue?: string;
}
export declare namespace HttpHeader {
    
    const filterSensitiveLog: (obj: HttpHeader) => any;
}

export interface ContextDataType {
    
    IpAddress: string | undefined;
    
    ServerName: string | undefined;
    
    ServerPath: string | undefined;
    
    HttpHeaders: HttpHeader[] | undefined;
    
    EncodedData?: string;
}
export declare namespace ContextDataType {
    
    const filterSensitiveLog: (obj: ContextDataType) => any;
}

export interface AdminInitiateAuthRequest {
    
    UserPoolId: string | undefined;
    
    ClientId: string | undefined;
    
    AuthFlow: AuthFlowType | string | undefined;
    
    AuthParameters?: {
        [key: string]: string;
    };
    
    ClientMetadata?: {
        [key: string]: string;
    };
    
    AnalyticsMetadata?: AnalyticsMetadataType;
    
    ContextData?: ContextDataType;
}
export declare namespace AdminInitiateAuthRequest {
    
    const filterSensitiveLog: (obj: AdminInitiateAuthRequest) => any;
}

export interface NewDeviceMetadataType {
    
    DeviceKey?: string;
    
    DeviceGroupKey?: string;
}
export declare namespace NewDeviceMetadataType {
    
    const filterSensitiveLog: (obj: NewDeviceMetadataType) => any;
}

export interface AuthenticationResultType {
    
    AccessToken?: string;
    
    ExpiresIn?: number;
    
    TokenType?: string;
    
    RefreshToken?: string;
    
    IdToken?: string;
    
    NewDeviceMetadata?: NewDeviceMetadataType;
}
export declare namespace AuthenticationResultType {
    
    const filterSensitiveLog: (obj: AuthenticationResultType) => any;
}
export declare enum ChallengeNameType {
    ADMIN_NO_SRP_AUTH = "ADMIN_NO_SRP_AUTH",
    CUSTOM_CHALLENGE = "CUSTOM_CHALLENGE",
    DEVICE_PASSWORD_VERIFIER = "DEVICE_PASSWORD_VERIFIER",
    DEVICE_SRP_AUTH = "DEVICE_SRP_AUTH",
    MFA_SETUP = "MFA_SETUP",
    NEW_PASSWORD_REQUIRED = "NEW_PASSWORD_REQUIRED",
    PASSWORD_VERIFIER = "PASSWORD_VERIFIER",
    SELECT_MFA_TYPE = "SELECT_MFA_TYPE",
    SMS_MFA = "SMS_MFA",
    SOFTWARE_TOKEN_MFA = "SOFTWARE_TOKEN_MFA"
}

export interface AdminInitiateAuthResponse {
    
    ChallengeName?: ChallengeNameType | string;
    
    Session?: string;
    
    ChallengeParameters?: {
        [key: string]: string;
    };
    
    AuthenticationResult?: AuthenticationResultType;
}
export declare namespace AdminInitiateAuthResponse {
    
    const filterSensitiveLog: (obj: AdminInitiateAuthResponse) => any;
}

export declare class MFAMethodNotFoundException extends __BaseException {
    readonly name: "MFAMethodNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<MFAMethodNotFoundException, __BaseException>);
}

export declare class PasswordResetRequiredException extends __BaseException {
    readonly name: "PasswordResetRequiredException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<PasswordResetRequiredException, __BaseException>);
}

export declare class UserNotConfirmedException extends __BaseException {
    readonly name: "UserNotConfirmedException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UserNotConfirmedException, __BaseException>);
}
export interface AdminLinkProviderForUserRequest {
    
    UserPoolId: string | undefined;
    
    DestinationUser: ProviderUserIdentifierType | undefined;
    
    SourceUser: ProviderUserIdentifierType | undefined;
}
export declare namespace AdminLinkProviderForUserRequest {
    
    const filterSensitiveLog: (obj: AdminLinkProviderForUserRequest) => any;
}
export interface AdminLinkProviderForUserResponse {
}
export declare namespace AdminLinkProviderForUserResponse {
    
    const filterSensitiveLog: (obj: AdminLinkProviderForUserResponse) => any;
}

export interface AdminListDevicesRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
    
    Limit?: number;
    
    PaginationToken?: string;
}
export declare namespace AdminListDevicesRequest {
    
    const filterSensitiveLog: (obj: AdminListDevicesRequest) => any;
}

export interface AdminListDevicesResponse {
    
    Devices?: DeviceType[];
    
    PaginationToken?: string;
}
export declare namespace AdminListDevicesResponse {
    
    const filterSensitiveLog: (obj: AdminListDevicesResponse) => any;
}
export interface AdminListGroupsForUserRequest {
    
    Username: string | undefined;
    
    UserPoolId: string | undefined;
    
    Limit?: number;
    
    NextToken?: string;
}
export declare namespace AdminListGroupsForUserRequest {
    
    const filterSensitiveLog: (obj: AdminListGroupsForUserRequest) => any;
}

export interface GroupType {
    
    GroupName?: string;
    
    UserPoolId?: string;
    
    Description?: string;
    
    RoleArn?: string;
    
    Precedence?: number;
    
    LastModifiedDate?: Date;
    
    CreationDate?: Date;
}
export declare namespace GroupType {
    
    const filterSensitiveLog: (obj: GroupType) => any;
}
export interface AdminListGroupsForUserResponse {
    
    Groups?: GroupType[];
    
    NextToken?: string;
}
export declare namespace AdminListGroupsForUserResponse {
    
    const filterSensitiveLog: (obj: AdminListGroupsForUserResponse) => any;
}
export interface AdminListUserAuthEventsRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace AdminListUserAuthEventsRequest {
    
    const filterSensitiveLog: (obj: AdminListUserAuthEventsRequest) => any;
}
export declare enum ChallengeName {
    Mfa = "Mfa",
    Password = "Password"
}
export declare enum ChallengeResponse {
    Failure = "Failure",
    Success = "Success"
}

export interface ChallengeResponseType {
    
    ChallengeName?: ChallengeName | string;
    
    ChallengeResponse?: ChallengeResponse | string;
}
export declare namespace ChallengeResponseType {
    
    const filterSensitiveLog: (obj: ChallengeResponseType) => any;
}

export interface EventContextDataType {
    
    IpAddress?: string;
    
    DeviceName?: string;
    
    Timezone?: string;
    
    City?: string;
    
    Country?: string;
}
export declare namespace EventContextDataType {
    
    const filterSensitiveLog: (obj: EventContextDataType) => any;
}
export declare enum FeedbackValueType {
    INVALID = "Invalid",
    VALID = "Valid"
}

export interface EventFeedbackType {
    
    FeedbackValue: FeedbackValueType | string | undefined;
    
    Provider: string | undefined;
    
    FeedbackDate?: Date;
}
export declare namespace EventFeedbackType {
    
    const filterSensitiveLog: (obj: EventFeedbackType) => any;
}
export declare enum EventResponseType {
    Failure = "Failure",
    Success = "Success"
}
export declare enum RiskDecisionType {
    AccountTakeover = "AccountTakeover",
    Block = "Block",
    NoRisk = "NoRisk"
}
export declare enum RiskLevelType {
    High = "High",
    Low = "Low",
    Medium = "Medium"
}

export interface EventRiskType {
    
    RiskDecision?: RiskDecisionType | string;
    
    RiskLevel?: RiskLevelType | string;
    
    CompromisedCredentialsDetected?: boolean;
}
export declare namespace EventRiskType {
    
    const filterSensitiveLog: (obj: EventRiskType) => any;
}
export declare enum EventType {
    ForgotPassword = "ForgotPassword",
    SignIn = "SignIn",
    SignUp = "SignUp"
}

export interface AuthEventType {
    
    EventId?: string;
    
    EventType?: EventType | string;
    
    CreationDate?: Date;
    
    EventResponse?: EventResponseType | string;
    
    EventRisk?: EventRiskType;
    
    ChallengeResponses?: ChallengeResponseType[];
    
    EventContextData?: EventContextDataType;
    
    EventFeedback?: EventFeedbackType;
}
export declare namespace AuthEventType {
    
    const filterSensitiveLog: (obj: AuthEventType) => any;
}
export interface AdminListUserAuthEventsResponse {
    
    AuthEvents?: AuthEventType[];
    
    NextToken?: string;
}
export declare namespace AdminListUserAuthEventsResponse {
    
    const filterSensitiveLog: (obj: AdminListUserAuthEventsResponse) => any;
}

export declare class UserPoolAddOnNotEnabledException extends __BaseException {
    readonly name: "UserPoolAddOnNotEnabledException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UserPoolAddOnNotEnabledException, __BaseException>);
}
export interface AdminRemoveUserFromGroupRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
    
    GroupName: string | undefined;
}
export declare namespace AdminRemoveUserFromGroupRequest {
    
    const filterSensitiveLog: (obj: AdminRemoveUserFromGroupRequest) => any;
}

export interface AdminResetUserPasswordRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
    
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace AdminResetUserPasswordRequest {
    
    const filterSensitiveLog: (obj: AdminResetUserPasswordRequest) => any;
}

export interface AdminResetUserPasswordResponse {
}
export declare namespace AdminResetUserPasswordResponse {
    
    const filterSensitiveLog: (obj: AdminResetUserPasswordResponse) => any;
}

export declare class InvalidEmailRoleAccessPolicyException extends __BaseException {
    readonly name: "InvalidEmailRoleAccessPolicyException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidEmailRoleAccessPolicyException, __BaseException>);
}

export interface AdminRespondToAuthChallengeRequest {
    
    UserPoolId: string | undefined;
    
    ClientId: string | undefined;
    
    ChallengeName: ChallengeNameType | string | undefined;
    
    ChallengeResponses?: {
        [key: string]: string;
    };
    
    Session?: string;
    
    AnalyticsMetadata?: AnalyticsMetadataType;
    
    ContextData?: ContextDataType;
    
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace AdminRespondToAuthChallengeRequest {
    
    const filterSensitiveLog: (obj: AdminRespondToAuthChallengeRequest) => any;
}

export interface AdminRespondToAuthChallengeResponse {
    
    ChallengeName?: ChallengeNameType | string;
    
    Session?: string;
    
    ChallengeParameters?: {
        [key: string]: string;
    };
    
    AuthenticationResult?: AuthenticationResultType;
}
export declare namespace AdminRespondToAuthChallengeResponse {
    
    const filterSensitiveLog: (obj: AdminRespondToAuthChallengeResponse) => any;
}

export declare class CodeMismatchException extends __BaseException {
    readonly name: "CodeMismatchException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<CodeMismatchException, __BaseException>);
}

export declare class ExpiredCodeException extends __BaseException {
    readonly name: "ExpiredCodeException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ExpiredCodeException, __BaseException>);
}

export declare class SoftwareTokenMFANotFoundException extends __BaseException {
    readonly name: "SoftwareTokenMFANotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<SoftwareTokenMFANotFoundException, __BaseException>);
}

export interface SMSMfaSettingsType {
    
    Enabled?: boolean;
    
    PreferredMfa?: boolean;
}
export declare namespace SMSMfaSettingsType {
    
    const filterSensitiveLog: (obj: SMSMfaSettingsType) => any;
}

export interface SoftwareTokenMfaSettingsType {
    
    Enabled?: boolean;
    
    PreferredMfa?: boolean;
}
export declare namespace SoftwareTokenMfaSettingsType {
    
    const filterSensitiveLog: (obj: SoftwareTokenMfaSettingsType) => any;
}
export interface AdminSetUserMFAPreferenceRequest {
    
    SMSMfaSettings?: SMSMfaSettingsType;
    
    SoftwareTokenMfaSettings?: SoftwareTokenMfaSettingsType;
    
    Username: string | undefined;
    
    UserPoolId: string | undefined;
}
export declare namespace AdminSetUserMFAPreferenceRequest {
    
    const filterSensitiveLog: (obj: AdminSetUserMFAPreferenceRequest) => any;
}
export interface AdminSetUserMFAPreferenceResponse {
}
export declare namespace AdminSetUserMFAPreferenceResponse {
    
    const filterSensitiveLog: (obj: AdminSetUserMFAPreferenceResponse) => any;
}
export interface AdminSetUserPasswordRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
    
    Password: string | undefined;
    
    Permanent?: boolean;
}
export declare namespace AdminSetUserPasswordRequest {
    
    const filterSensitiveLog: (obj: AdminSetUserPasswordRequest) => any;
}
export interface AdminSetUserPasswordResponse {
}
export declare namespace AdminSetUserPasswordResponse {
    
    const filterSensitiveLog: (obj: AdminSetUserPasswordResponse) => any;
}

export interface AdminSetUserSettingsRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
    
    MFAOptions: MFAOptionType[] | undefined;
}
export declare namespace AdminSetUserSettingsRequest {
    
    const filterSensitiveLog: (obj: AdminSetUserSettingsRequest) => any;
}

export interface AdminSetUserSettingsResponse {
}
export declare namespace AdminSetUserSettingsResponse {
    
    const filterSensitiveLog: (obj: AdminSetUserSettingsResponse) => any;
}
export interface AdminUpdateAuthEventFeedbackRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
    
    EventId: string | undefined;
    
    FeedbackValue: FeedbackValueType | string | undefined;
}
export declare namespace AdminUpdateAuthEventFeedbackRequest {
    
    const filterSensitiveLog: (obj: AdminUpdateAuthEventFeedbackRequest) => any;
}
export interface AdminUpdateAuthEventFeedbackResponse {
}
export declare namespace AdminUpdateAuthEventFeedbackResponse {
    
    const filterSensitiveLog: (obj: AdminUpdateAuthEventFeedbackResponse) => any;
}
export declare enum DeviceRememberedStatusType {
    NOT_REMEMBERED = "not_remembered",
    REMEMBERED = "remembered"
}

export interface AdminUpdateDeviceStatusRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
    
    DeviceKey: string | undefined;
    
    DeviceRememberedStatus?: DeviceRememberedStatusType | string;
}
export declare namespace AdminUpdateDeviceStatusRequest {
    
    const filterSensitiveLog: (obj: AdminUpdateDeviceStatusRequest) => any;
}

export interface AdminUpdateDeviceStatusResponse {
}
export declare namespace AdminUpdateDeviceStatusResponse {
    
    const filterSensitiveLog: (obj: AdminUpdateDeviceStatusResponse) => any;
}

export interface AdminUpdateUserAttributesRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
    
    UserAttributes: AttributeType[] | undefined;
    
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace AdminUpdateUserAttributesRequest {
    
    const filterSensitiveLog: (obj: AdminUpdateUserAttributesRequest) => any;
}

export interface AdminUpdateUserAttributesResponse {
}
export declare namespace AdminUpdateUserAttributesResponse {
    
    const filterSensitiveLog: (obj: AdminUpdateUserAttributesResponse) => any;
}

export interface AdminUserGlobalSignOutRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
}
export declare namespace AdminUserGlobalSignOutRequest {
    
    const filterSensitiveLog: (obj: AdminUserGlobalSignOutRequest) => any;
}

export interface AdminUserGlobalSignOutResponse {
}
export declare namespace AdminUserGlobalSignOutResponse {
    
    const filterSensitiveLog: (obj: AdminUserGlobalSignOutResponse) => any;
}
export declare enum AdvancedSecurityModeType {
    AUDIT = "AUDIT",
    ENFORCED = "ENFORCED",
    OFF = "OFF"
}
export declare enum AliasAttributeType {
    EMAIL = "email",
    PHONE_NUMBER = "phone_number",
    PREFERRED_USERNAME = "preferred_username"
}

export interface AnalyticsConfigurationType {
    
    ApplicationId?: string;
    
    ApplicationArn?: string;
    
    RoleArn?: string;
    
    ExternalId?: string;
    
    UserDataShared?: boolean;
}
export declare namespace AnalyticsConfigurationType {
    
    const filterSensitiveLog: (obj: AnalyticsConfigurationType) => any;
}
export interface AssociateSoftwareTokenRequest {
    
    AccessToken?: string;
    
    Session?: string;
}
export declare namespace AssociateSoftwareTokenRequest {
    
    const filterSensitiveLog: (obj: AssociateSoftwareTokenRequest) => any;
}
export interface AssociateSoftwareTokenResponse {
    
    SecretCode?: string;
    
    Session?: string;
}
export declare namespace AssociateSoftwareTokenResponse {
    
    const filterSensitiveLog: (obj: AssociateSoftwareTokenResponse) => any;
}

export declare class ConcurrentModificationException extends __BaseException {
    readonly name: "ConcurrentModificationException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
}

export interface ChangePasswordRequest {
    
    PreviousPassword: string | undefined;
    
    ProposedPassword: string | undefined;
    
    AccessToken: string | undefined;
}
export declare namespace ChangePasswordRequest {
    
    const filterSensitiveLog: (obj: ChangePasswordRequest) => any;
}

export interface ChangePasswordResponse {
}
export declare namespace ChangePasswordResponse {
    
    const filterSensitiveLog: (obj: ChangePasswordResponse) => any;
}

export interface DeviceSecretVerifierConfigType {
    
    PasswordVerifier?: string;
    
    Salt?: string;
}
export declare namespace DeviceSecretVerifierConfigType {
    
    const filterSensitiveLog: (obj: DeviceSecretVerifierConfigType) => any;
}

export interface ConfirmDeviceRequest {
    
    AccessToken: string | undefined;
    
    DeviceKey: string | undefined;
    
    DeviceSecretVerifierConfig?: DeviceSecretVerifierConfigType;
    
    DeviceName?: string;
}
export declare namespace ConfirmDeviceRequest {
    
    const filterSensitiveLog: (obj: ConfirmDeviceRequest) => any;
}

export interface ConfirmDeviceResponse {
    
    UserConfirmationNecessary?: boolean;
}
export declare namespace ConfirmDeviceResponse {
    
    const filterSensitiveLog: (obj: ConfirmDeviceResponse) => any;
}

export interface UserContextDataType {
    
    EncodedData?: string;
}
export declare namespace UserContextDataType {
    
    const filterSensitiveLog: (obj: UserContextDataType) => any;
}

export interface ConfirmForgotPasswordRequest {
    
    ClientId: string | undefined;
    
    SecretHash?: string;
    
    Username: string | undefined;
    
    ConfirmationCode: string | undefined;
    
    Password: string | undefined;
    
    AnalyticsMetadata?: AnalyticsMetadataType;
    
    UserContextData?: UserContextDataType;
    
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace ConfirmForgotPasswordRequest {
    
    const filterSensitiveLog: (obj: ConfirmForgotPasswordRequest) => any;
}

export interface ConfirmForgotPasswordResponse {
}
export declare namespace ConfirmForgotPasswordResponse {
    
    const filterSensitiveLog: (obj: ConfirmForgotPasswordResponse) => any;
}

export interface ConfirmSignUpRequest {
    
    ClientId: string | undefined;
    
    SecretHash?: string;
    
    Username: string | undefined;
    
    ConfirmationCode: string | undefined;
    
    ForceAliasCreation?: boolean;
    
    AnalyticsMetadata?: AnalyticsMetadataType;
    
    UserContextData?: UserContextDataType;
    
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace ConfirmSignUpRequest {
    
    const filterSensitiveLog: (obj: ConfirmSignUpRequest) => any;
}

export interface ConfirmSignUpResponse {
}
export declare namespace ConfirmSignUpResponse {
    
    const filterSensitiveLog: (obj: ConfirmSignUpResponse) => any;
}
export interface CreateGroupRequest {
    
    GroupName: string | undefined;
    
    UserPoolId: string | undefined;
    
    Description?: string;
    
    RoleArn?: string;
    
    Precedence?: number;
}
export declare namespace CreateGroupRequest {
    
    const filterSensitiveLog: (obj: CreateGroupRequest) => any;
}
export interface CreateGroupResponse {
    
    Group?: GroupType;
}
export declare namespace CreateGroupResponse {
    
    const filterSensitiveLog: (obj: CreateGroupResponse) => any;
}

export declare class GroupExistsException extends __BaseException {
    readonly name: "GroupExistsException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<GroupExistsException, __BaseException>);
}
export declare enum IdentityProviderTypeType {
    Facebook = "Facebook",
    Google = "Google",
    LoginWithAmazon = "LoginWithAmazon",
    OIDC = "OIDC",
    SAML = "SAML",
    SignInWithApple = "SignInWithApple"
}
export interface CreateIdentityProviderRequest {
    
    UserPoolId: string | undefined;
    
    ProviderName: string | undefined;
    
    ProviderType: IdentityProviderTypeType | string | undefined;
    
    ProviderDetails: {
        [key: string]: string;
    } | undefined;
    
    AttributeMapping?: {
        [key: string]: string;
    };
    
    IdpIdentifiers?: string[];
}
export declare namespace CreateIdentityProviderRequest {
    
    const filterSensitiveLog: (obj: CreateIdentityProviderRequest) => any;
}

export interface IdentityProviderType {
    
    UserPoolId?: string;
    
    ProviderName?: string;
    
    ProviderType?: IdentityProviderTypeType | string;
    
    ProviderDetails?: {
        [key: string]: string;
    };
    
    AttributeMapping?: {
        [key: string]: string;
    };
    
    IdpIdentifiers?: string[];
    
    LastModifiedDate?: Date;
    
    CreationDate?: Date;
}
export declare namespace IdentityProviderType {
    
    const filterSensitiveLog: (obj: IdentityProviderType) => any;
}
export interface CreateIdentityProviderResponse {
    
    IdentityProvider: IdentityProviderType | undefined;
}
export declare namespace CreateIdentityProviderResponse {
    
    const filterSensitiveLog: (obj: CreateIdentityProviderResponse) => any;
}

export declare class DuplicateProviderException extends __BaseException {
    readonly name: "DuplicateProviderException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DuplicateProviderException, __BaseException>);
}

export interface ResourceServerScopeType {
    
    ScopeName: string | undefined;
    
    ScopeDescription: string | undefined;
}
export declare namespace ResourceServerScopeType {
    
    const filterSensitiveLog: (obj: ResourceServerScopeType) => any;
}
export interface CreateResourceServerRequest {
    
    UserPoolId: string | undefined;
    
    Identifier: string | undefined;
    
    Name: string | undefined;
    
    Scopes?: ResourceServerScopeType[];
}
export declare namespace CreateResourceServerRequest {
    
    const filterSensitiveLog: (obj: CreateResourceServerRequest) => any;
}

export interface ResourceServerType {
    
    UserPoolId?: string;
    
    Identifier?: string;
    
    Name?: string;
    
    Scopes?: ResourceServerScopeType[];
}
export declare namespace ResourceServerType {
    
    const filterSensitiveLog: (obj: ResourceServerType) => any;
}
export interface CreateResourceServerResponse {
    
    ResourceServer: ResourceServerType | undefined;
}
export declare namespace CreateResourceServerResponse {
    
    const filterSensitiveLog: (obj: CreateResourceServerResponse) => any;
}

export interface CreateUserImportJobRequest {
    
    JobName: string | undefined;
    
    UserPoolId: string | undefined;
    
    CloudWatchLogsRoleArn: string | undefined;
}
export declare namespace CreateUserImportJobRequest {
    
    const filterSensitiveLog: (obj: CreateUserImportJobRequest) => any;
}
export declare enum UserImportJobStatusType {
    Created = "Created",
    Expired = "Expired",
    Failed = "Failed",
    InProgress = "InProgress",
    Pending = "Pending",
    Stopped = "Stopped",
    Stopping = "Stopping",
    Succeeded = "Succeeded"
}

export interface UserImportJobType {
    
    JobName?: string;
    
    JobId?: string;
    
    UserPoolId?: string;
    
    PreSignedUrl?: string;
    
    CreationDate?: Date;
    
    StartDate?: Date;
    
    CompletionDate?: Date;
    
    Status?: UserImportJobStatusType | string;
    
    CloudWatchLogsRoleArn?: string;
    
    ImportedUsers?: number;
    
    SkippedUsers?: number;
    
    FailedUsers?: number;
    
    CompletionMessage?: string;
}
export declare namespace UserImportJobType {
    
    const filterSensitiveLog: (obj: UserImportJobType) => any;
}

export interface CreateUserImportJobResponse {
    
    UserImportJob?: UserImportJobType;
}
export declare namespace CreateUserImportJobResponse {
    
    const filterSensitiveLog: (obj: CreateUserImportJobResponse) => any;
}
export declare enum VerifiedAttributeType {
    EMAIL = "email",
    PHONE_NUMBER = "phone_number"
}

export interface DeviceConfigurationType {
    
    ChallengeRequiredOnNewDevice?: boolean;
    
    DeviceOnlyRememberedOnUserPrompt?: boolean;
}
export declare namespace DeviceConfigurationType {
    
    const filterSensitiveLog: (obj: DeviceConfigurationType) => any;
}
export declare enum EmailSendingAccountType {
    COGNITO_DEFAULT = "COGNITO_DEFAULT",
    DEVELOPER = "DEVELOPER"
}

export interface EmailConfigurationType {
    
    SourceArn?: string;
    
    ReplyToEmailAddress?: string;
    
    EmailSendingAccount?: EmailSendingAccountType | string;
    
    From?: string;
    
    ConfigurationSet?: string;
}
export declare namespace EmailConfigurationType {
    
    const filterSensitiveLog: (obj: EmailConfigurationType) => any;
}
export declare enum CustomEmailSenderLambdaVersionType {
    V1_0 = "V1_0"
}

export interface CustomEmailLambdaVersionConfigType {
    
    LambdaVersion: CustomEmailSenderLambdaVersionType | string | undefined;
    
    LambdaArn: string | undefined;
}
export declare namespace CustomEmailLambdaVersionConfigType {
    
    const filterSensitiveLog: (obj: CustomEmailLambdaVersionConfigType) => any;
}
export declare enum CustomSMSSenderLambdaVersionType {
    V1_0 = "V1_0"
}

export interface CustomSMSLambdaVersionConfigType {
    
    LambdaVersion: CustomSMSSenderLambdaVersionType | string | undefined;
    
    LambdaArn: string | undefined;
}
export declare namespace CustomSMSLambdaVersionConfigType {
    
    const filterSensitiveLog: (obj: CustomSMSLambdaVersionConfigType) => any;
}

export interface LambdaConfigType {
    
    PreSignUp?: string;
    
    CustomMessage?: string;
    
    PostConfirmation?: string;
    
    PreAuthentication?: string;
    
    PostAuthentication?: string;
    
    DefineAuthChallenge?: string;
    
    CreateAuthChallenge?: string;
    
    VerifyAuthChallengeResponse?: string;
    
    PreTokenGeneration?: string;
    
    UserMigration?: string;
    
    CustomSMSSender?: CustomSMSLambdaVersionConfigType;
    
    CustomEmailSender?: CustomEmailLambdaVersionConfigType;
    
    KMSKeyID?: string;
}
export declare namespace LambdaConfigType {
    
    const filterSensitiveLog: (obj: LambdaConfigType) => any;
}
export declare enum UserPoolMfaType {
    OFF = "OFF",
    ON = "ON",
    OPTIONAL = "OPTIONAL"
}

export interface PasswordPolicyType {
    
    MinimumLength?: number;
    
    RequireUppercase?: boolean;
    
    RequireLowercase?: boolean;
    
    RequireNumbers?: boolean;
    
    RequireSymbols?: boolean;
    
    TemporaryPasswordValidityDays?: number;
}
export declare namespace PasswordPolicyType {
    
    const filterSensitiveLog: (obj: PasswordPolicyType) => any;
}

export interface UserPoolPolicyType {
    
    PasswordPolicy?: PasswordPolicyType;
}
export declare namespace UserPoolPolicyType {
    
    const filterSensitiveLog: (obj: UserPoolPolicyType) => any;
}

export interface SmsConfigurationType {
    
    SnsCallerArn: string | undefined;
    
    ExternalId?: string;
    
    SnsRegion?: string;
}
export declare namespace SmsConfigurationType {
    
    const filterSensitiveLog: (obj: SmsConfigurationType) => any;
}
export declare enum UsernameAttributeType {
    EMAIL = "email",
    PHONE_NUMBER = "phone_number"
}

export interface UsernameConfigurationType {
    
    CaseSensitive: boolean | undefined;
}
export declare namespace UsernameConfigurationType {
    
    const filterSensitiveLog: (obj: UsernameConfigurationType) => any;
}

export interface UserPoolAddOnsType {
    
    AdvancedSecurityMode: AdvancedSecurityModeType | string | undefined;
}
export declare namespace UserPoolAddOnsType {
    
    const filterSensitiveLog: (obj: UserPoolAddOnsType) => any;
}
export declare enum DefaultEmailOptionType {
    CONFIRM_WITH_CODE = "CONFIRM_WITH_CODE",
    CONFIRM_WITH_LINK = "CONFIRM_WITH_LINK"
}

export interface VerificationMessageTemplateType {
    
    SmsMessage?: string;
    
    EmailMessage?: string;
    
    EmailSubject?: string;
    
    EmailMessageByLink?: string;
    
    EmailSubjectByLink?: string;
    
    DefaultEmailOption?: DefaultEmailOptionType | string;
}
export declare namespace VerificationMessageTemplateType {
    
    const filterSensitiveLog: (obj: VerificationMessageTemplateType) => any;
}

export interface CreateUserPoolRequest {
    
    PoolName: string | undefined;
    
    Policies?: UserPoolPolicyType;
    
    LambdaConfig?: LambdaConfigType;
    
    AutoVerifiedAttributes?: (VerifiedAttributeType | string)[];
    
    AliasAttributes?: (AliasAttributeType | string)[];
    
    UsernameAttributes?: (UsernameAttributeType | string)[];
    
    SmsVerificationMessage?: string;
    
    EmailVerificationMessage?: string;
    
    EmailVerificationSubject?: string;
    
    VerificationMessageTemplate?: VerificationMessageTemplateType;
    
    SmsAuthenticationMessage?: string;
    
    MfaConfiguration?: UserPoolMfaType | string;
    
    DeviceConfiguration?: DeviceConfigurationType;
    
    EmailConfiguration?: EmailConfigurationType;
    
    SmsConfiguration?: SmsConfigurationType;
    
    UserPoolTags?: {
        [key: string]: string;
    };
    
    AdminCreateUserConfig?: AdminCreateUserConfigType;
    
    Schema?: SchemaAttributeType[];
    
    UserPoolAddOns?: UserPoolAddOnsType;
    
    UsernameConfiguration?: UsernameConfigurationType;
    
    AccountRecoverySetting?: AccountRecoverySettingType;
}
export declare namespace CreateUserPoolRequest {
    
    const filterSensitiveLog: (obj: CreateUserPoolRequest) => any;
}
export declare enum StatusType {
    Disabled = "Disabled",
    Enabled = "Enabled"
}

export interface UserPoolType {
    
    Id?: string;
    
    Name?: string;
    
    Policies?: UserPoolPolicyType;
    
    LambdaConfig?: LambdaConfigType;
    
    Status?: StatusType | string;
    
    LastModifiedDate?: Date;
    
    CreationDate?: Date;
    
    SchemaAttributes?: SchemaAttributeType[];
    
    AutoVerifiedAttributes?: (VerifiedAttributeType | string)[];
    
    AliasAttributes?: (AliasAttributeType | string)[];
    
    UsernameAttributes?: (UsernameAttributeType | string)[];
    
    SmsVerificationMessage?: string;
    
    EmailVerificationMessage?: string;
    
    EmailVerificationSubject?: string;
    
    VerificationMessageTemplate?: VerificationMessageTemplateType;
    
    SmsAuthenticationMessage?: string;
    
    MfaConfiguration?: UserPoolMfaType | string;
    
    DeviceConfiguration?: DeviceConfigurationType;
    
    EstimatedNumberOfUsers?: number;
    
    EmailConfiguration?: EmailConfigurationType;
    
    SmsConfiguration?: SmsConfigurationType;
    
    UserPoolTags?: {
        [key: string]: string;
    };
    
    SmsConfigurationFailure?: string;
    
    EmailConfigurationFailure?: string;
    
    Domain?: string;
    
    CustomDomain?: string;
    
    AdminCreateUserConfig?: AdminCreateUserConfigType;
    
    UserPoolAddOns?: UserPoolAddOnsType;
    
    UsernameConfiguration?: UsernameConfigurationType;
    
    Arn?: string;
    
    AccountRecoverySetting?: AccountRecoverySettingType;
}
export declare namespace UserPoolType {
    
    const filterSensitiveLog: (obj: UserPoolType) => any;
}

export interface CreateUserPoolResponse {
    
    UserPool?: UserPoolType;
}
export declare namespace CreateUserPoolResponse {
    
    const filterSensitiveLog: (obj: CreateUserPoolResponse) => any;
}

export declare class UserPoolTaggingException extends __BaseException {
    readonly name: "UserPoolTaggingException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UserPoolTaggingException, __BaseException>);
}
export declare enum OAuthFlowType {
    client_credentials = "client_credentials",
    code = "code",
    implicit = "implicit"
}
export declare enum ExplicitAuthFlowsType {
    ADMIN_NO_SRP_AUTH = "ADMIN_NO_SRP_AUTH",
    ALLOW_ADMIN_USER_PASSWORD_AUTH = "ALLOW_ADMIN_USER_PASSWORD_AUTH",
    ALLOW_CUSTOM_AUTH = "ALLOW_CUSTOM_AUTH",
    ALLOW_REFRESH_TOKEN_AUTH = "ALLOW_REFRESH_TOKEN_AUTH",
    ALLOW_USER_PASSWORD_AUTH = "ALLOW_USER_PASSWORD_AUTH",
    ALLOW_USER_SRP_AUTH = "ALLOW_USER_SRP_AUTH",
    CUSTOM_AUTH_FLOW_ONLY = "CUSTOM_AUTH_FLOW_ONLY",
    USER_PASSWORD_AUTH = "USER_PASSWORD_AUTH"
}
export declare enum PreventUserExistenceErrorTypes {
    ENABLED = "ENABLED",
    LEGACY = "LEGACY"
}
export declare enum TimeUnitsType {
    DAYS = "days",
    HOURS = "hours",
    MINUTES = "minutes",
    SECONDS = "seconds"
}

export interface TokenValidityUnitsType {
    
    AccessToken?: TimeUnitsType | string;
    
    IdToken?: TimeUnitsType | string;
    
    RefreshToken?: TimeUnitsType | string;
}
export declare namespace TokenValidityUnitsType {
    
    const filterSensitiveLog: (obj: TokenValidityUnitsType) => any;
}

export interface CreateUserPoolClientRequest {
    
    UserPoolId: string | undefined;
    
    ClientName: string | undefined;
    
    GenerateSecret?: boolean;
    
    RefreshTokenValidity?: number;
    
    AccessTokenValidity?: number;
    
    IdTokenValidity?: number;
    
    TokenValidityUnits?: TokenValidityUnitsType;
    
    ReadAttributes?: string[];
    
    WriteAttributes?: string[];
    
    ExplicitAuthFlows?: (ExplicitAuthFlowsType | string)[];
    
    SupportedIdentityProviders?: string[];
    
    CallbackURLs?: string[];
    
    LogoutURLs?: string[];
    
    DefaultRedirectURI?: string;
    
    AllowedOAuthFlows?: (OAuthFlowType | string)[];
    
    AllowedOAuthScopes?: string[];
    
    AllowedOAuthFlowsUserPoolClient?: boolean;
    
    AnalyticsConfiguration?: AnalyticsConfigurationType;
    
    PreventUserExistenceErrors?: PreventUserExistenceErrorTypes | string;
    
    EnableTokenRevocation?: boolean;
}
export declare namespace CreateUserPoolClientRequest {
    
    const filterSensitiveLog: (obj: CreateUserPoolClientRequest) => any;
}

export interface UserPoolClientType {
    
    UserPoolId?: string;
    
    ClientName?: string;
    
    ClientId?: string;
    
    ClientSecret?: string;
    
    LastModifiedDate?: Date;
    
    CreationDate?: Date;
    
    RefreshTokenValidity?: number;
    
    AccessTokenValidity?: number;
    
    IdTokenValidity?: number;
    
    TokenValidityUnits?: TokenValidityUnitsType;
    
    ReadAttributes?: string[];
    
    WriteAttributes?: string[];
    
    ExplicitAuthFlows?: (ExplicitAuthFlowsType | string)[];
    
    SupportedIdentityProviders?: string[];
    
    CallbackURLs?: string[];
    
    LogoutURLs?: string[];
    
    DefaultRedirectURI?: string;
    
    AllowedOAuthFlows?: (OAuthFlowType | string)[];
    
    AllowedOAuthScopes?: string[];
    
    AllowedOAuthFlowsUserPoolClient?: boolean;
    
    AnalyticsConfiguration?: AnalyticsConfigurationType;
    
    PreventUserExistenceErrors?: PreventUserExistenceErrorTypes | string;
    
    EnableTokenRevocation?: boolean;
}
export declare namespace UserPoolClientType {
    
    const filterSensitiveLog: (obj: UserPoolClientType) => any;
}

export interface CreateUserPoolClientResponse {
    
    UserPoolClient?: UserPoolClientType;
}
export declare namespace CreateUserPoolClientResponse {
    
    const filterSensitiveLog: (obj: CreateUserPoolClientResponse) => any;
}

export declare class InvalidOAuthFlowException extends __BaseException {
    readonly name: "InvalidOAuthFlowException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidOAuthFlowException, __BaseException>);
}

export declare class ScopeDoesNotExistException extends __BaseException {
    readonly name: "ScopeDoesNotExistException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ScopeDoesNotExistException, __BaseException>);
}

export interface CustomDomainConfigType {
    
    CertificateArn: string | undefined;
}
export declare namespace CustomDomainConfigType {
    
    const filterSensitiveLog: (obj: CustomDomainConfigType) => any;
}
export interface CreateUserPoolDomainRequest {
    
    Domain: string | undefined;
    
    UserPoolId: string | undefined;
    
    CustomDomainConfig?: CustomDomainConfigType;
}
export declare namespace CreateUserPoolDomainRequest {
    
    const filterSensitiveLog: (obj: CreateUserPoolDomainRequest) => any;
}
export interface CreateUserPoolDomainResponse {
    
    CloudFrontDomain?: string;
}
export declare namespace CreateUserPoolDomainResponse {
    
    const filterSensitiveLog: (obj: CreateUserPoolDomainResponse) => any;
}
export interface DeleteGroupRequest {
    
    GroupName: string | undefined;
    
    UserPoolId: string | undefined;
}
export declare namespace DeleteGroupRequest {
    
    const filterSensitiveLog: (obj: DeleteGroupRequest) => any;
}
export interface DeleteIdentityProviderRequest {
    
    UserPoolId: string | undefined;
    
    ProviderName: string | undefined;
}
export declare namespace DeleteIdentityProviderRequest {
    
    const filterSensitiveLog: (obj: DeleteIdentityProviderRequest) => any;
}

export declare class UnsupportedIdentityProviderException extends __BaseException {
    readonly name: "UnsupportedIdentityProviderException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UnsupportedIdentityProviderException, __BaseException>);
}
export interface DeleteResourceServerRequest {
    
    UserPoolId: string | undefined;
    
    Identifier: string | undefined;
}
export declare namespace DeleteResourceServerRequest {
    
    const filterSensitiveLog: (obj: DeleteResourceServerRequest) => any;
}

export interface DeleteUserRequest {
    
    AccessToken: string | undefined;
}
export declare namespace DeleteUserRequest {
    
    const filterSensitiveLog: (obj: DeleteUserRequest) => any;
}

export interface DeleteUserAttributesRequest {
    
    UserAttributeNames: string[] | undefined;
    
    AccessToken: string | undefined;
}
export declare namespace DeleteUserAttributesRequest {
    
    const filterSensitiveLog: (obj: DeleteUserAttributesRequest) => any;
}

export interface DeleteUserAttributesResponse {
}
export declare namespace DeleteUserAttributesResponse {
    
    const filterSensitiveLog: (obj: DeleteUserAttributesResponse) => any;
}

export interface DeleteUserPoolRequest {
    
    UserPoolId: string | undefined;
}
export declare namespace DeleteUserPoolRequest {
    
    const filterSensitiveLog: (obj: DeleteUserPoolRequest) => any;
}

export interface DeleteUserPoolClientRequest {
    
    UserPoolId: string | undefined;
    
    ClientId: string | undefined;
}
export declare namespace DeleteUserPoolClientRequest {
    
    const filterSensitiveLog: (obj: DeleteUserPoolClientRequest) => any;
}
export interface DeleteUserPoolDomainRequest {
    
    Domain: string | undefined;
    
    UserPoolId: string | undefined;
}
export declare namespace DeleteUserPoolDomainRequest {
    
    const filterSensitiveLog: (obj: DeleteUserPoolDomainRequest) => any;
}
export interface DeleteUserPoolDomainResponse {
}
export declare namespace DeleteUserPoolDomainResponse {
    
    const filterSensitiveLog: (obj: DeleteUserPoolDomainResponse) => any;
}
export interface DescribeIdentityProviderRequest {
    
    UserPoolId: string | undefined;
    
    ProviderName: string | undefined;
}
export declare namespace DescribeIdentityProviderRequest {
    
    const filterSensitiveLog: (obj: DescribeIdentityProviderRequest) => any;
}
export interface DescribeIdentityProviderResponse {
    
    IdentityProvider: IdentityProviderType | undefined;
}
export declare namespace DescribeIdentityProviderResponse {
    
    const filterSensitiveLog: (obj: DescribeIdentityProviderResponse) => any;
}
export interface DescribeResourceServerRequest {
    
    UserPoolId: string | undefined;
    
    Identifier: string | undefined;
}
export declare namespace DescribeResourceServerRequest {
    
    const filterSensitiveLog: (obj: DescribeResourceServerRequest) => any;
}
export interface DescribeResourceServerResponse {
    
    ResourceServer: ResourceServerType | undefined;
}
export declare namespace DescribeResourceServerResponse {
    
    const filterSensitiveLog: (obj: DescribeResourceServerResponse) => any;
}
export interface DescribeRiskConfigurationRequest {
    
    UserPoolId: string | undefined;
    
    ClientId?: string;
}
export declare namespace DescribeRiskConfigurationRequest {
    
    const filterSensitiveLog: (obj: DescribeRiskConfigurationRequest) => any;
}
export declare enum CompromisedCredentialsEventActionType {
    BLOCK = "BLOCK",
    NO_ACTION = "NO_ACTION"
}

export interface CompromisedCredentialsActionsType {
    
    EventAction: CompromisedCredentialsEventActionType | string | undefined;
}
export declare namespace CompromisedCredentialsActionsType {
    
    const filterSensitiveLog: (obj: CompromisedCredentialsActionsType) => any;
}
export declare enum EventFilterType {
    PASSWORD_CHANGE = "PASSWORD_CHANGE",
    SIGN_IN = "SIGN_IN",
    SIGN_UP = "SIGN_UP"
}

export interface CompromisedCredentialsRiskConfigurationType {
    
    EventFilter?: (EventFilterType | string)[];
    
    Actions: CompromisedCredentialsActionsType | undefined;
}
export declare namespace CompromisedCredentialsRiskConfigurationType {
    
    const filterSensitiveLog: (obj: CompromisedCredentialsRiskConfigurationType) => any;
}

export interface RiskExceptionConfigurationType {
    
    BlockedIPRangeList?: string[];
    
    SkippedIPRangeList?: string[];
}
export declare namespace RiskExceptionConfigurationType {
    
    const filterSensitiveLog: (obj: RiskExceptionConfigurationType) => any;
}

export interface RiskConfigurationType {
    
    UserPoolId?: string;
    
    ClientId?: string;
    
    CompromisedCredentialsRiskConfiguration?: CompromisedCredentialsRiskConfigurationType;
    
    AccountTakeoverRiskConfiguration?: AccountTakeoverRiskConfigurationType;
    
    RiskExceptionConfiguration?: RiskExceptionConfigurationType;
    
    LastModifiedDate?: Date;
}
export declare namespace RiskConfigurationType {
    
    const filterSensitiveLog: (obj: RiskConfigurationType) => any;
}
export interface DescribeRiskConfigurationResponse {
    
    RiskConfiguration: RiskConfigurationType | undefined;
}
export declare namespace DescribeRiskConfigurationResponse {
    
    const filterSensitiveLog: (obj: DescribeRiskConfigurationResponse) => any;
}

export interface DescribeUserImportJobRequest {
    
    UserPoolId: string | undefined;
    
    JobId: string | undefined;
}
export declare namespace DescribeUserImportJobRequest {
    
    const filterSensitiveLog: (obj: DescribeUserImportJobRequest) => any;
}

export interface DescribeUserImportJobResponse {
    
    UserImportJob?: UserImportJobType;
}
export declare namespace DescribeUserImportJobResponse {
    
    const filterSensitiveLog: (obj: DescribeUserImportJobResponse) => any;
}

export interface DescribeUserPoolRequest {
    
    UserPoolId: string | undefined;
}
export declare namespace DescribeUserPoolRequest {
    
    const filterSensitiveLog: (obj: DescribeUserPoolRequest) => any;
}

export interface DescribeUserPoolResponse {
    
    UserPool?: UserPoolType;
}
export declare namespace DescribeUserPoolResponse {
    
    const filterSensitiveLog: (obj: DescribeUserPoolResponse) => any;
}

export interface DescribeUserPoolClientRequest {
    
    UserPoolId: string | undefined;
    
    ClientId: string | undefined;
}
export declare namespace DescribeUserPoolClientRequest {
    
    const filterSensitiveLog: (obj: DescribeUserPoolClientRequest) => any;
}

export interface DescribeUserPoolClientResponse {
    
    UserPoolClient?: UserPoolClientType;
}
export declare namespace DescribeUserPoolClientResponse {
    
    const filterSensitiveLog: (obj: DescribeUserPoolClientResponse) => any;
}
export interface DescribeUserPoolDomainRequest {
    
    Domain: string | undefined;
}
export declare namespace DescribeUserPoolDomainRequest {
    
    const filterSensitiveLog: (obj: DescribeUserPoolDomainRequest) => any;
}
export declare enum DomainStatusType {
    ACTIVE = "ACTIVE",
    CREATING = "CREATING",
    DELETING = "DELETING",
    FAILED = "FAILED",
    UPDATING = "UPDATING"
}

export interface DomainDescriptionType {
    
    UserPoolId?: string;
    
    AWSAccountId?: string;
    
    Domain?: string;
    
    S3Bucket?: string;
    
    CloudFrontDistribution?: string;
    
    Version?: string;
    
    Status?: DomainStatusType | string;
    
    CustomDomainConfig?: CustomDomainConfigType;
}
export declare namespace DomainDescriptionType {
    
    const filterSensitiveLog: (obj: DomainDescriptionType) => any;
}
export interface DescribeUserPoolDomainResponse {
    
    DomainDescription?: DomainDescriptionType;
}
export declare namespace DescribeUserPoolDomainResponse {
    
    const filterSensitiveLog: (obj: DescribeUserPoolDomainResponse) => any;
}

export interface ForgetDeviceRequest {
    
    AccessToken?: string;
    
    DeviceKey: string | undefined;
}
export declare namespace ForgetDeviceRequest {
    
    const filterSensitiveLog: (obj: ForgetDeviceRequest) => any;
}

export interface ForgotPasswordRequest {
    
    ClientId: string | undefined;
    
    SecretHash?: string;
    
    UserContextData?: UserContextDataType;
    
    Username: string | undefined;
    
    AnalyticsMetadata?: AnalyticsMetadataType;
    
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace ForgotPasswordRequest {
    
    const filterSensitiveLog: (obj: ForgotPasswordRequest) => any;
}

export interface CodeDeliveryDetailsType {
    
    Destination?: string;
    
    DeliveryMedium?: DeliveryMediumType | string;
    
    AttributeName?: string;
}
export declare namespace CodeDeliveryDetailsType {
    
    const filterSensitiveLog: (obj: CodeDeliveryDetailsType) => any;
}

export interface ForgotPasswordResponse {
    
    CodeDeliveryDetails?: CodeDeliveryDetailsType;
}
export declare namespace ForgotPasswordResponse {
    
    const filterSensitiveLog: (obj: ForgotPasswordResponse) => any;
}

export interface GetCSVHeaderRequest {
    
    UserPoolId: string | undefined;
}
export declare namespace GetCSVHeaderRequest {
    
    const filterSensitiveLog: (obj: GetCSVHeaderRequest) => any;
}

export interface GetCSVHeaderResponse {
    
    UserPoolId?: string;
    
    CSVHeader?: string[];
}
export declare namespace GetCSVHeaderResponse {
    
    const filterSensitiveLog: (obj: GetCSVHeaderResponse) => any;
}

export interface GetDeviceRequest {
    
    DeviceKey: string | undefined;
    
    AccessToken?: string;
}
export declare namespace GetDeviceRequest {
    
    const filterSensitiveLog: (obj: GetDeviceRequest) => any;
}

export interface GetDeviceResponse {
    
    Device: DeviceType | undefined;
}
export declare namespace GetDeviceResponse {
    
    const filterSensitiveLog: (obj: GetDeviceResponse) => any;
}
export interface GetGroupRequest {
    
    GroupName: string | undefined;
    
    UserPoolId: string | undefined;
}
export declare namespace GetGroupRequest {
    
    const filterSensitiveLog: (obj: GetGroupRequest) => any;
}
export interface GetGroupResponse {
    
    Group?: GroupType;
}
export declare namespace GetGroupResponse {
    
    const filterSensitiveLog: (obj: GetGroupResponse) => any;
}
export interface GetIdentityProviderByIdentifierRequest {
    
    UserPoolId: string | undefined;
    
    IdpIdentifier: string | undefined;
}
export declare namespace GetIdentityProviderByIdentifierRequest {
    
    const filterSensitiveLog: (obj: GetIdentityProviderByIdentifierRequest) => any;
}
export interface GetIdentityProviderByIdentifierResponse {
    
    IdentityProvider: IdentityProviderType | undefined;
}
export declare namespace GetIdentityProviderByIdentifierResponse {
    
    const filterSensitiveLog: (obj: GetIdentityProviderByIdentifierResponse) => any;
}

export interface GetSigningCertificateRequest {
    
    UserPoolId: string | undefined;
}
export declare namespace GetSigningCertificateRequest {
    
    const filterSensitiveLog: (obj: GetSigningCertificateRequest) => any;
}

export interface GetSigningCertificateResponse {
    
    Certificate?: string;
}
export declare namespace GetSigningCertificateResponse {
    
    const filterSensitiveLog: (obj: GetSigningCertificateResponse) => any;
}
export interface GetUICustomizationRequest {
    
    UserPoolId: string | undefined;
    
    ClientId?: string;
}
export declare namespace GetUICustomizationRequest {
    
    const filterSensitiveLog: (obj: GetUICustomizationRequest) => any;
}

export interface UICustomizationType {
    
    UserPoolId?: string;
    
    ClientId?: string;
    
    ImageUrl?: string;
    
    CSS?: string;
    
    CSSVersion?: string;
    
    LastModifiedDate?: Date;
    
    CreationDate?: Date;
}
export declare namespace UICustomizationType {
    
    const filterSensitiveLog: (obj: UICustomizationType) => any;
}
export interface GetUICustomizationResponse {
    
    UICustomization: UICustomizationType | undefined;
}
export declare namespace GetUICustomizationResponse {
    
    const filterSensitiveLog: (obj: GetUICustomizationResponse) => any;
}

export interface GetUserRequest {
    
    AccessToken: string | undefined;
}
export declare namespace GetUserRequest {
    
    const filterSensitiveLog: (obj: GetUserRequest) => any;
}

export interface GetUserResponse {
    
    Username: string | undefined;
    
    UserAttributes: AttributeType[] | undefined;
    
    MFAOptions?: MFAOptionType[];
    
    PreferredMfaSetting?: string;
    
    UserMFASettingList?: string[];
}
export declare namespace GetUserResponse {
    
    const filterSensitiveLog: (obj: GetUserResponse) => any;
}

export interface GetUserAttributeVerificationCodeRequest {
    
    AccessToken: string | undefined;
    
    AttributeName: string | undefined;
    
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace GetUserAttributeVerificationCodeRequest {
    
    const filterSensitiveLog: (obj: GetUserAttributeVerificationCodeRequest) => any;
}

export interface GetUserAttributeVerificationCodeResponse {
    
    CodeDeliveryDetails?: CodeDeliveryDetailsType;
}
export declare namespace GetUserAttributeVerificationCodeResponse {
    
    const filterSensitiveLog: (obj: GetUserAttributeVerificationCodeResponse) => any;
}
export interface GetUserPoolMfaConfigRequest {
    
    UserPoolId: string | undefined;
}
export declare namespace GetUserPoolMfaConfigRequest {
    
    const filterSensitiveLog: (obj: GetUserPoolMfaConfigRequest) => any;
}

export interface SmsMfaConfigType {
    
    SmsAuthenticationMessage?: string;
    
    SmsConfiguration?: SmsConfigurationType;
}
export declare namespace SmsMfaConfigType {
    
    const filterSensitiveLog: (obj: SmsMfaConfigType) => any;
}

export interface SoftwareTokenMfaConfigType {
    
    Enabled?: boolean;
}
export declare namespace SoftwareTokenMfaConfigType {
    
    const filterSensitiveLog: (obj: SoftwareTokenMfaConfigType) => any;
}
export interface GetUserPoolMfaConfigResponse {
    
    SmsMfaConfiguration?: SmsMfaConfigType;
    
    SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType;
    
    MfaConfiguration?: UserPoolMfaType | string;
}
export declare namespace GetUserPoolMfaConfigResponse {
    
    const filterSensitiveLog: (obj: GetUserPoolMfaConfigResponse) => any;
}

export interface GlobalSignOutRequest {
    
    AccessToken: string | undefined;
}
export declare namespace GlobalSignOutRequest {
    
    const filterSensitiveLog: (obj: GlobalSignOutRequest) => any;
}

export interface GlobalSignOutResponse {
}
export declare namespace GlobalSignOutResponse {
    
    const filterSensitiveLog: (obj: GlobalSignOutResponse) => any;
}

export interface InitiateAuthRequest {
    
    AuthFlow: AuthFlowType | string | undefined;
    
    AuthParameters?: {
        [key: string]: string;
    };
    
    ClientMetadata?: {
        [key: string]: string;
    };
    
    ClientId: string | undefined;
    
    AnalyticsMetadata?: AnalyticsMetadataType;
    
    UserContextData?: UserContextDataType;
}
export declare namespace InitiateAuthRequest {
    
    const filterSensitiveLog: (obj: InitiateAuthRequest) => any;
}

export interface InitiateAuthResponse {
    
    ChallengeName?: ChallengeNameType | string;
    
    Session?: string;
    
    ChallengeParameters?: {
        [key: string]: string;
    };
    
    AuthenticationResult?: AuthenticationResultType;
}
export declare namespace InitiateAuthResponse {
    
    const filterSensitiveLog: (obj: InitiateAuthResponse) => any;
}

export interface ListDevicesRequest {
    
    AccessToken: string | undefined;
    
    Limit?: number;
    
    PaginationToken?: string;
}
export declare namespace ListDevicesRequest {
    
    const filterSensitiveLog: (obj: ListDevicesRequest) => any;
}

export interface ListDevicesResponse {
    
    Devices?: DeviceType[];
    
    PaginationToken?: string;
}
export declare namespace ListDevicesResponse {
    
    const filterSensitiveLog: (obj: ListDevicesResponse) => any;
}
export interface ListGroupsRequest {
    
    UserPoolId: string | undefined;
    
    Limit?: number;
    
    NextToken?: string;
}
export declare namespace ListGroupsRequest {
    
    const filterSensitiveLog: (obj: ListGroupsRequest) => any;
}
export interface ListGroupsResponse {
    
    Groups?: GroupType[];
    
    NextToken?: string;
}
export declare namespace ListGroupsResponse {
    
    const filterSensitiveLog: (obj: ListGroupsResponse) => any;
}
export interface ListIdentityProvidersRequest {
    
    UserPoolId: string | undefined;
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace ListIdentityProvidersRequest {
    
    const filterSensitiveLog: (obj: ListIdentityProvidersRequest) => any;
}

export interface ProviderDescription {
    
    ProviderName?: string;
    
    ProviderType?: IdentityProviderTypeType | string;
    
    LastModifiedDate?: Date;
    
    CreationDate?: Date;
}
export declare namespace ProviderDescription {
    
    const filterSensitiveLog: (obj: ProviderDescription) => any;
}
export interface ListIdentityProvidersResponse {
    
    Providers: ProviderDescription[] | undefined;
    
    NextToken?: string;
}
export declare namespace ListIdentityProvidersResponse {
    
    const filterSensitiveLog: (obj: ListIdentityProvidersResponse) => any;
}
export interface ListResourceServersRequest {
    
    UserPoolId: string | undefined;
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace ListResourceServersRequest {
    
    const filterSensitiveLog: (obj: ListResourceServersRequest) => any;
}
export interface ListResourceServersResponse {
    
    ResourceServers: ResourceServerType[] | undefined;
    
    NextToken?: string;
}
export declare namespace ListResourceServersResponse {
    
    const filterSensitiveLog: (obj: ListResourceServersResponse) => any;
}
export interface ListTagsForResourceRequest {
    
    ResourceArn: string | undefined;
}
export declare namespace ListTagsForResourceRequest {
    
    const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
}
export interface ListTagsForResourceResponse {
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace ListTagsForResourceResponse {
    
    const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
}

export interface ListUserImportJobsRequest {
    
    UserPoolId: string | undefined;
    
    MaxResults: number | undefined;
    
    PaginationToken?: string;
}
export declare namespace ListUserImportJobsRequest {
    
    const filterSensitiveLog: (obj: ListUserImportJobsRequest) => any;
}

export interface ListUserImportJobsResponse {
    
    UserImportJobs?: UserImportJobType[];
    
    PaginationToken?: string;
}
export declare namespace ListUserImportJobsResponse {
    
    const filterSensitiveLog: (obj: ListUserImportJobsResponse) => any;
}

export interface ListUserPoolClientsRequest {
    
    UserPoolId: string | undefined;
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace ListUserPoolClientsRequest {
    
    const filterSensitiveLog: (obj: ListUserPoolClientsRequest) => any;
}

export interface UserPoolClientDescription {
    
    ClientId?: string;
    
    UserPoolId?: string;
    
    ClientName?: string;
}
export declare namespace UserPoolClientDescription {
    
    const filterSensitiveLog: (obj: UserPoolClientDescription) => any;
}

export interface ListUserPoolClientsResponse {
    
    UserPoolClients?: UserPoolClientDescription[];
    
    NextToken?: string;
}
export declare namespace ListUserPoolClientsResponse {
    
    const filterSensitiveLog: (obj: ListUserPoolClientsResponse) => any;
}

export interface ListUserPoolsRequest {
    
    NextToken?: string;
    
    MaxResults: number | undefined;
}
export declare namespace ListUserPoolsRequest {
    
    const filterSensitiveLog: (obj: ListUserPoolsRequest) => any;
}

export interface UserPoolDescriptionType {
    
    Id?: string;
    
    Name?: string;
    
    LambdaConfig?: LambdaConfigType;
    
    Status?: StatusType | string;
    
    LastModifiedDate?: Date;
    
    CreationDate?: Date;
}
export declare namespace UserPoolDescriptionType {
    
    const filterSensitiveLog: (obj: UserPoolDescriptionType) => any;
}

export interface ListUserPoolsResponse {
    
    UserPools?: UserPoolDescriptionType[];
    
    NextToken?: string;
}
export declare namespace ListUserPoolsResponse {
    
    const filterSensitiveLog: (obj: ListUserPoolsResponse) => any;
}

export interface ListUsersRequest {
    
    UserPoolId: string | undefined;
    
    AttributesToGet?: string[];
    
    Limit?: number;
    
    PaginationToken?: string;
    
    Filter?: string;
}
export declare namespace ListUsersRequest {
    
    const filterSensitiveLog: (obj: ListUsersRequest) => any;
}

export interface ListUsersResponse {
    
    Users?: UserType[];
    
    PaginationToken?: string;
}
export declare namespace ListUsersResponse {
    
    const filterSensitiveLog: (obj: ListUsersResponse) => any;
}
export interface ListUsersInGroupRequest {
    
    UserPoolId: string | undefined;
    
    GroupName: string | undefined;
    
    Limit?: number;
    
    NextToken?: string;
}
export declare namespace ListUsersInGroupRequest {
    
    const filterSensitiveLog: (obj: ListUsersInGroupRequest) => any;
}
export interface ListUsersInGroupResponse {
    
    Users?: UserType[];
    
    NextToken?: string;
}
export declare namespace ListUsersInGroupResponse {
    
    const filterSensitiveLog: (obj: ListUsersInGroupResponse) => any;
}

export interface ResendConfirmationCodeRequest {
    
    ClientId: string | undefined;
    
    SecretHash?: string;
    
    UserContextData?: UserContextDataType;
    
    Username: string | undefined;
    
    AnalyticsMetadata?: AnalyticsMetadataType;
    
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace ResendConfirmationCodeRequest {
    
    const filterSensitiveLog: (obj: ResendConfirmationCodeRequest) => any;
}

export interface ResendConfirmationCodeResponse {
    
    CodeDeliveryDetails?: CodeDeliveryDetailsType;
}
export declare namespace ResendConfirmationCodeResponse {
    
    const filterSensitiveLog: (obj: ResendConfirmationCodeResponse) => any;
}

export interface RespondToAuthChallengeRequest {
    
    ClientId: string | undefined;
    
    ChallengeName: ChallengeNameType | string | undefined;
    
    Session?: string;
    
    ChallengeResponses?: {
        [key: string]: string;
    };
    
    AnalyticsMetadata?: AnalyticsMetadataType;
    
    UserContextData?: UserContextDataType;
    
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace RespondToAuthChallengeRequest {
    
    const filterSensitiveLog: (obj: RespondToAuthChallengeRequest) => any;
}

export interface RespondToAuthChallengeResponse {
    
    ChallengeName?: ChallengeNameType | string;
    
    Session?: string;
    
    ChallengeParameters?: {
        [key: string]: string;
    };
    
    AuthenticationResult?: AuthenticationResultType;
}
export declare namespace RespondToAuthChallengeResponse {
    
    const filterSensitiveLog: (obj: RespondToAuthChallengeResponse) => any;
}
export interface RevokeTokenRequest {
    
    Token: string | undefined;
    
    ClientId: string | undefined;
    
    ClientSecret?: string;
}
export declare namespace RevokeTokenRequest {
    
    const filterSensitiveLog: (obj: RevokeTokenRequest) => any;
}
export interface RevokeTokenResponse {
}
export declare namespace RevokeTokenResponse {
    
    const filterSensitiveLog: (obj: RevokeTokenResponse) => any;
}

export declare class UnauthorizedException extends __BaseException {
    readonly name: "UnauthorizedException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UnauthorizedException, __BaseException>);
}

export declare class UnsupportedOperationException extends __BaseException {
    readonly name: "UnsupportedOperationException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UnsupportedOperationException, __BaseException>);
}

export declare class UnsupportedTokenTypeException extends __BaseException {
    readonly name: "UnsupportedTokenTypeException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UnsupportedTokenTypeException, __BaseException>);
}
export interface SetRiskConfigurationRequest {
    
    UserPoolId: string | undefined;
    
    ClientId?: string;
    
    CompromisedCredentialsRiskConfiguration?: CompromisedCredentialsRiskConfigurationType;
    
    AccountTakeoverRiskConfiguration?: AccountTakeoverRiskConfigurationType;
    
    RiskExceptionConfiguration?: RiskExceptionConfigurationType;
}
export declare namespace SetRiskConfigurationRequest {
    
    const filterSensitiveLog: (obj: SetRiskConfigurationRequest) => any;
}
export interface SetRiskConfigurationResponse {
    
    RiskConfiguration: RiskConfigurationType | undefined;
}
export declare namespace SetRiskConfigurationResponse {
    
    const filterSensitiveLog: (obj: SetRiskConfigurationResponse) => any;
}
export interface SetUICustomizationRequest {
    
    UserPoolId: string | undefined;
    
    ClientId?: string;
    
    CSS?: string;
    
    ImageFile?: Uint8Array;
}
export declare namespace SetUICustomizationRequest {
    
    const filterSensitiveLog: (obj: SetUICustomizationRequest) => any;
}
export interface SetUICustomizationResponse {
    
    UICustomization: UICustomizationType | undefined;
}
export declare namespace SetUICustomizationResponse {
    
    const filterSensitiveLog: (obj: SetUICustomizationResponse) => any;
}
export interface SetUserMFAPreferenceRequest {
    
    SMSMfaSettings?: SMSMfaSettingsType;
    
    SoftwareTokenMfaSettings?: SoftwareTokenMfaSettingsType;
    
    AccessToken: string | undefined;
}
export declare namespace SetUserMFAPreferenceRequest {
    
    const filterSensitiveLog: (obj: SetUserMFAPreferenceRequest) => any;
}
export interface SetUserMFAPreferenceResponse {
}
export declare namespace SetUserMFAPreferenceResponse {
    
    const filterSensitiveLog: (obj: SetUserMFAPreferenceResponse) => any;
}
export interface SetUserPoolMfaConfigRequest {
    
    UserPoolId: string | undefined;
    
    SmsMfaConfiguration?: SmsMfaConfigType;
    
    SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType;
    
    MfaConfiguration?: UserPoolMfaType | string;
}
export declare namespace SetUserPoolMfaConfigRequest {
    
    const filterSensitiveLog: (obj: SetUserPoolMfaConfigRequest) => any;
}
export interface SetUserPoolMfaConfigResponse {
    
    SmsMfaConfiguration?: SmsMfaConfigType;
    
    SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType;
    
    MfaConfiguration?: UserPoolMfaType | string;
}
export declare namespace SetUserPoolMfaConfigResponse {
    
    const filterSensitiveLog: (obj: SetUserPoolMfaConfigResponse) => any;
}

export interface SetUserSettingsRequest {
    
    AccessToken: string | undefined;
    
    MFAOptions: MFAOptionType[] | undefined;
}
export declare namespace SetUserSettingsRequest {
    
    const filterSensitiveLog: (obj: SetUserSettingsRequest) => any;
}

export interface SetUserSettingsResponse {
}
export declare namespace SetUserSettingsResponse {
    
    const filterSensitiveLog: (obj: SetUserSettingsResponse) => any;
}

export interface SignUpRequest {
    
    ClientId: string | undefined;
    
    SecretHash?: string;
    
    Username: string | undefined;
    
    Password: string | undefined;
    
    UserAttributes?: AttributeType[];
    
    ValidationData?: AttributeType[];
    
    AnalyticsMetadata?: AnalyticsMetadataType;
    
    UserContextData?: UserContextDataType;
    
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace SignUpRequest {
    
    const filterSensitiveLog: (obj: SignUpRequest) => any;
}

export interface SignUpResponse {
    
    UserConfirmed: boolean | undefined;
    
    CodeDeliveryDetails?: CodeDeliveryDetailsType;
    
    UserSub: string | undefined;
}
export declare namespace SignUpResponse {
    
    const filterSensitiveLog: (obj: SignUpResponse) => any;
}

export interface StartUserImportJobRequest {
    
    UserPoolId: string | undefined;
    
    JobId: string | undefined;
}
export declare namespace StartUserImportJobRequest {
    
    const filterSensitiveLog: (obj: StartUserImportJobRequest) => any;
}
