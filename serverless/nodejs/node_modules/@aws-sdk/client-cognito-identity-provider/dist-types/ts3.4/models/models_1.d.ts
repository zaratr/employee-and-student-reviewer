import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { CognitoIdentityProviderServiceException as __BaseException } from "./CognitoIdentityProviderServiceException";
import { AccountRecoverySettingType, AdminCreateUserConfigType, AnalyticsConfigurationType, AttributeType, CodeDeliveryDetailsType, CustomDomainConfigType, DeviceConfigurationType, DeviceRememberedStatusType, EmailConfigurationType, ExplicitAuthFlowsType, FeedbackValueType, GroupType, IdentityProviderType, LambdaConfigType, OAuthFlowType, PreventUserExistenceErrorTypes, ResourceServerScopeType, ResourceServerType, SmsConfigurationType, TokenValidityUnitsType, UserImportJobType, UserPoolAddOnsType, UserPoolClientType, UserPoolMfaType, UserPoolPolicyType, VerificationMessageTemplateType, VerifiedAttributeType } from "./models_0";

export interface StartUserImportJobResponse {
    
    UserImportJob?: UserImportJobType;
}
export declare namespace StartUserImportJobResponse {
    
    const filterSensitiveLog: (obj: StartUserImportJobResponse) => any;
}

export interface StopUserImportJobRequest {
    
    UserPoolId: string | undefined;
    
    JobId: string | undefined;
}
export declare namespace StopUserImportJobRequest {
    
    const filterSensitiveLog: (obj: StopUserImportJobRequest) => any;
}

export interface StopUserImportJobResponse {
    
    UserImportJob?: UserImportJobType;
}
export declare namespace StopUserImportJobResponse {
    
    const filterSensitiveLog: (obj: StopUserImportJobResponse) => any;
}
export interface TagResourceRequest {
    
    ResourceArn: string | undefined;
    
    Tags: {
        [key: string]: string;
    } | undefined;
}
export declare namespace TagResourceRequest {
    
    const filterSensitiveLog: (obj: TagResourceRequest) => any;
}
export interface TagResourceResponse {
}
export declare namespace TagResourceResponse {
    
    const filterSensitiveLog: (obj: TagResourceResponse) => any;
}
export interface UntagResourceRequest {
    
    ResourceArn: string | undefined;
    
    TagKeys: string[] | undefined;
}
export declare namespace UntagResourceRequest {
    
    const filterSensitiveLog: (obj: UntagResourceRequest) => any;
}
export interface UntagResourceResponse {
}
export declare namespace UntagResourceResponse {
    
    const filterSensitiveLog: (obj: UntagResourceResponse) => any;
}
export interface UpdateAuthEventFeedbackRequest {
    
    UserPoolId: string | undefined;
    
    Username: string | undefined;
    
    EventId: string | undefined;
    
    FeedbackToken: string | undefined;
    
    FeedbackValue: FeedbackValueType | string | undefined;
}
export declare namespace UpdateAuthEventFeedbackRequest {
    
    const filterSensitiveLog: (obj: UpdateAuthEventFeedbackRequest) => any;
}
export interface UpdateAuthEventFeedbackResponse {
}
export declare namespace UpdateAuthEventFeedbackResponse {
    
    const filterSensitiveLog: (obj: UpdateAuthEventFeedbackResponse) => any;
}

export interface UpdateDeviceStatusRequest {
    
    AccessToken: string | undefined;
    
    DeviceKey: string | undefined;
    
    DeviceRememberedStatus?: DeviceRememberedStatusType | string;
}
export declare namespace UpdateDeviceStatusRequest {
    
    const filterSensitiveLog: (obj: UpdateDeviceStatusRequest) => any;
}

export interface UpdateDeviceStatusResponse {
}
export declare namespace UpdateDeviceStatusResponse {
    
    const filterSensitiveLog: (obj: UpdateDeviceStatusResponse) => any;
}
export interface UpdateGroupRequest {
    
    GroupName: string | undefined;
    
    UserPoolId: string | undefined;
    
    Description?: string;
    
    RoleArn?: string;
    
    Precedence?: number;
}
export declare namespace UpdateGroupRequest {
    
    const filterSensitiveLog: (obj: UpdateGroupRequest) => any;
}
export interface UpdateGroupResponse {
    
    Group?: GroupType;
}
export declare namespace UpdateGroupResponse {
    
    const filterSensitiveLog: (obj: UpdateGroupResponse) => any;
}
export interface UpdateIdentityProviderRequest {
    
    UserPoolId: string | undefined;
    
    ProviderName: string | undefined;
    
    ProviderDetails?: {
        [key: string]: string;
    };
    
    AttributeMapping?: {
        [key: string]: string;
    };
    
    IdpIdentifiers?: string[];
}
export declare namespace UpdateIdentityProviderRequest {
    
    const filterSensitiveLog: (obj: UpdateIdentityProviderRequest) => any;
}
export interface UpdateIdentityProviderResponse {
    
    IdentityProvider: IdentityProviderType | undefined;
}
export declare namespace UpdateIdentityProviderResponse {
    
    const filterSensitiveLog: (obj: UpdateIdentityProviderResponse) => any;
}
export interface UpdateResourceServerRequest {
    
    UserPoolId: string | undefined;
    
    Identifier: string | undefined;
    
    Name: string | undefined;
    
    Scopes?: ResourceServerScopeType[];
}
export declare namespace UpdateResourceServerRequest {
    
    const filterSensitiveLog: (obj: UpdateResourceServerRequest) => any;
}
export interface UpdateResourceServerResponse {
    
    ResourceServer: ResourceServerType | undefined;
}
export declare namespace UpdateResourceServerResponse {
    
    const filterSensitiveLog: (obj: UpdateResourceServerResponse) => any;
}

export interface UpdateUserAttributesRequest {
    
    UserAttributes: AttributeType[] | undefined;
    
    AccessToken: string | undefined;
    
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace UpdateUserAttributesRequest {
    
    const filterSensitiveLog: (obj: UpdateUserAttributesRequest) => any;
}

export interface UpdateUserAttributesResponse {
    
    CodeDeliveryDetailsList?: CodeDeliveryDetailsType[];
}
export declare namespace UpdateUserAttributesResponse {
    
    const filterSensitiveLog: (obj: UpdateUserAttributesResponse) => any;
}

export interface UpdateUserPoolRequest {
    
    UserPoolId: string | undefined;
    
    Policies?: UserPoolPolicyType;
    
    LambdaConfig?: LambdaConfigType;
    
    AutoVerifiedAttributes?: (VerifiedAttributeType | string)[];
    
    SmsVerificationMessage?: string;
    
    EmailVerificationMessage?: string;
    
    EmailVerificationSubject?: string;
    
    VerificationMessageTemplate?: VerificationMessageTemplateType;
    
    SmsAuthenticationMessage?: string;
    
    MfaConfiguration?: UserPoolMfaType | string;
    
    DeviceConfiguration?: DeviceConfigurationType;
    
    EmailConfiguration?: EmailConfigurationType;
    
    SmsConfiguration?: SmsConfigurationType;
    
    UserPoolTags?: {
        [key: string]: string;
    };
    
    AdminCreateUserConfig?: AdminCreateUserConfigType;
    
    UserPoolAddOns?: UserPoolAddOnsType;
    
    AccountRecoverySetting?: AccountRecoverySettingType;
}
export declare namespace UpdateUserPoolRequest {
    
    const filterSensitiveLog: (obj: UpdateUserPoolRequest) => any;
}

export interface UpdateUserPoolResponse {
}
export declare namespace UpdateUserPoolResponse {
    
    const filterSensitiveLog: (obj: UpdateUserPoolResponse) => any;
}

export interface UpdateUserPoolClientRequest {
    
    UserPoolId: string | undefined;
    
    ClientId: string | undefined;
    
    ClientName?: string;
    
    RefreshTokenValidity?: number;
    
    AccessTokenValidity?: number;
    
    IdTokenValidity?: number;
    
    TokenValidityUnits?: TokenValidityUnitsType;
    
    ReadAttributes?: string[];
    
    WriteAttributes?: string[];
    
    ExplicitAuthFlows?: (ExplicitAuthFlowsType | string)[];
    
    SupportedIdentityProviders?: string[];
    
    CallbackURLs?: string[];
    
    LogoutURLs?: string[];
    
    DefaultRedirectURI?: string;
    
    AllowedOAuthFlows?: (OAuthFlowType | string)[];
    
    AllowedOAuthScopes?: string[];
    
    AllowedOAuthFlowsUserPoolClient?: boolean;
    
    AnalyticsConfiguration?: AnalyticsConfigurationType;
    
    PreventUserExistenceErrors?: PreventUserExistenceErrorTypes | string;
    
    EnableTokenRevocation?: boolean;
}
export declare namespace UpdateUserPoolClientRequest {
    
    const filterSensitiveLog: (obj: UpdateUserPoolClientRequest) => any;
}

export interface UpdateUserPoolClientResponse {
    
    UserPoolClient?: UserPoolClientType;
}
export declare namespace UpdateUserPoolClientResponse {
    
    const filterSensitiveLog: (obj: UpdateUserPoolClientResponse) => any;
}

export interface UpdateUserPoolDomainRequest {
    
    Domain: string | undefined;
    
    UserPoolId: string | undefined;
    
    CustomDomainConfig: CustomDomainConfigType | undefined;
}
export declare namespace UpdateUserPoolDomainRequest {
    
    const filterSensitiveLog: (obj: UpdateUserPoolDomainRequest) => any;
}

export interface UpdateUserPoolDomainResponse {
    
    CloudFrontDomain?: string;
}
export declare namespace UpdateUserPoolDomainResponse {
    
    const filterSensitiveLog: (obj: UpdateUserPoolDomainResponse) => any;
}

export declare class EnableSoftwareTokenMFAException extends __BaseException {
    readonly name: "EnableSoftwareTokenMFAException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<EnableSoftwareTokenMFAException, __BaseException>);
}
export interface VerifySoftwareTokenRequest {
    
    AccessToken?: string;
    
    Session?: string;
    
    UserCode: string | undefined;
    
    FriendlyDeviceName?: string;
}
export declare namespace VerifySoftwareTokenRequest {
    
    const filterSensitiveLog: (obj: VerifySoftwareTokenRequest) => any;
}
export declare enum VerifySoftwareTokenResponseType {
    ERROR = "ERROR",
    SUCCESS = "SUCCESS"
}
export interface VerifySoftwareTokenResponse {
    
    Status?: VerifySoftwareTokenResponseType | string;
    
    Session?: string;
}
export declare namespace VerifySoftwareTokenResponse {
    
    const filterSensitiveLog: (obj: VerifySoftwareTokenResponse) => any;
}

export interface VerifyUserAttributeRequest {
    
    AccessToken: string | undefined;
    
    AttributeName: string | undefined;
    
    Code: string | undefined;
}
export declare namespace VerifyUserAttributeRequest {
    
    const filterSensitiveLog: (obj: VerifyUserAttributeRequest) => any;
}

export interface VerifyUserAttributeResponse {
}
export declare namespace VerifyUserAttributeResponse {
    
    const filterSensitiveLog: (obj: VerifyUserAttributeResponse) => any;
}
