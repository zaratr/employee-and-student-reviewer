import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../CognitoIdentityProviderClient";
import { AdminLinkProviderForUserRequest, AdminLinkProviderForUserResponse } from "../models/models_0";
export interface AdminLinkProviderForUserCommandInput extends AdminLinkProviderForUserRequest {
}
export interface AdminLinkProviderForUserCommandOutput extends AdminLinkProviderForUserResponse, __MetadataBearer {
}
/**
 * <p>Links an existing user account in a user pool (<code>DestinationUser</code>) to an identity from an external identity provider (<code>SourceUser</code>) based on a specified
 *             attribute name and value from the external identity provider. This allows you to create a link from the existing user account to an external federated user identity that has not
 *             yet been used to sign in. You can then use the federated user identity to sign in as the existing user account. </p>
 *         <p> For example, if there is an existing user with a username and password, this API links that user to a federated user identity.  When the user signs in with a federated user
 *             identity, they sign in as the existing user account.</p>
 *          <note>
 *             <p>The maximum number of federated identities linked to a user is 5.</p>
 *          </note>
 *          <important>
 *             <p>Because this API allows a user with an external federated identity to sign in as an existing user in the user pool, it is critical that it only be used with external
 *         identity providers and provider attributes that have been trusted by the application owner.</p>
 *          </important>
 *
 *         <p>This action is administrative and requires developer credentials.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { CognitoIdentityProviderClient, AdminLinkProviderForUserCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
 * // const { CognitoIdentityProviderClient, AdminLinkProviderForUserCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
 * const client = new CognitoIdentityProviderClient(config);
 * const command = new AdminLinkProviderForUserCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link AdminLinkProviderForUserCommandInput} for command's `input` shape.
 * @see {@link AdminLinkProviderForUserCommandOutput} for command's `response` shape.
 * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
 *
 */
export declare class AdminLinkProviderForUserCommand extends $Command<AdminLinkProviderForUserCommandInput, AdminLinkProviderForUserCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
    readonly input: AdminLinkProviderForUserCommandInput;
    constructor(input: AdminLinkProviderForUserCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminLinkProviderForUserCommandInput, AdminLinkProviderForUserCommandOutput>;
    private serialize;
    private deserialize;
}
