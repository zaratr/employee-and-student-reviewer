import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { CognitoIdentityProviderServiceException as __BaseException } from "./CognitoIdentityProviderServiceException";
export declare enum RecoveryOptionNameType {
    ADMIN_ONLY = "admin_only",
    VERIFIED_EMAIL = "verified_email",
    VERIFIED_PHONE_NUMBER = "verified_phone_number"
}
/**
 * <p>A map containing a priority as a key, and recovery method name as a value.</p>
 */
export interface RecoveryOptionType {
    /**
     * <p>A positive integer specifying priority of a method with 1 being the highest priority.</p>
     */
    Priority: number | undefined;
    /**
     * <p>The recovery method for a user.</p>
     */
    Name: RecoveryOptionNameType | string | undefined;
}
export declare namespace RecoveryOptionType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: RecoveryOptionType) => any;
}
/**
 * <p>The data type for <code>AccountRecoverySetting</code>.</p>
 */
export interface AccountRecoverySettingType {
    /**
     * <p>The list of <code>RecoveryOptionTypes</code>.</p>
     */
    RecoveryMechanisms?: RecoveryOptionType[];
}
export declare namespace AccountRecoverySettingType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AccountRecoverySettingType) => any;
}
export declare enum AccountTakeoverEventActionType {
    BLOCK = "BLOCK",
    MFA_IF_CONFIGURED = "MFA_IF_CONFIGURED",
    MFA_REQUIRED = "MFA_REQUIRED",
    NO_ACTION = "NO_ACTION"
}
/**
 * <p>Account takeover action type.</p>
 */
export interface AccountTakeoverActionType {
    /**
     * <p>Flag specifying whether to send a notification.</p>
     */
    Notify: boolean | undefined;
    /**
     * <p>The action to take in response to the account takeover action. Valid values
     *             are:</p>
     *
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>BLOCK</code> Choosing this action will block the request.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>MFA_IF_CONFIGURED</code> Present an MFA challenge if user has configured it, else allow the request.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>MFA_REQUIRED</code> Present an MFA challenge if user has configured it, else block the request.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>NO_ACTION</code> Allow the user to sign in.</p>
     *             </li>
     *          </ul>
     */
    EventAction: AccountTakeoverEventActionType | string | undefined;
}
export declare namespace AccountTakeoverActionType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AccountTakeoverActionType) => any;
}
/**
 * <p>Account takeover actions type.</p>
 */
export interface AccountTakeoverActionsType {
    /**
     * <p>Action to take for a low risk.</p>
     */
    LowAction?: AccountTakeoverActionType;
    /**
     * <p>Action to take for a medium risk.</p>
     */
    MediumAction?: AccountTakeoverActionType;
    /**
     * <p>Action to take for a high risk.</p>
     */
    HighAction?: AccountTakeoverActionType;
}
export declare namespace AccountTakeoverActionsType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AccountTakeoverActionsType) => any;
}
/**
 * <p>The notify email type.</p>
 */
export interface NotifyEmailType {
    /**
     * <p>The email subject.</p>
     */
    Subject: string | undefined;
    /**
     * <p>The email HTML body.</p>
     */
    HtmlBody?: string;
    /**
     * <p>The email text body.</p>
     */
    TextBody?: string;
}
export declare namespace NotifyEmailType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: NotifyEmailType) => any;
}
/**
 * <p>The notify configuration type.</p>
 */
export interface NotifyConfigurationType {
    /**
     * <p>The email address that is sending the email. The address must be either individually verified with Amazon Simple Email Service, or from a domain that has been verified with Amazon SES.</p>
     */
    From?: string;
    /**
     * <p>The destination to which the receiver of an email should reply to.</p>
     */
    ReplyTo?: string;
    /**
     * <p>The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. This identity permits Amazon Cognito to send for the email address specified in the
     *             <code>From</code> parameter.</p>
     */
    SourceArn: string | undefined;
    /**
     * <p>Email template used when a detected risk event is blocked.</p>
     */
    BlockEmail?: NotifyEmailType;
    /**
     * <p>The email template used when a detected risk event is allowed.</p>
     */
    NoActionEmail?: NotifyEmailType;
    /**
     * <p>The multi-factor authentication (MFA) email template used when MFA is challenged as part of a detected risk.</p>
     */
    MfaEmail?: NotifyEmailType;
}
export declare namespace NotifyConfigurationType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: NotifyConfigurationType) => any;
}
/**
 * <p>Configuration for mitigation actions and notification for different levels of risk detected for a potential account takeover.</p>
 */
export interface AccountTakeoverRiskConfigurationType {
    /**
     * <p>The notify configuration used to construct email notifications.</p>
     */
    NotifyConfiguration?: NotifyConfigurationType;
    /**
     * <p>Account takeover risk configuration actions.</p>
     */
    Actions: AccountTakeoverActionsType | undefined;
}
export declare namespace AccountTakeoverRiskConfigurationType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AccountTakeoverRiskConfigurationType) => any;
}
export declare enum AttributeDataType {
    BOOLEAN = "Boolean",
    DATETIME = "DateTime",
    NUMBER = "Number",
    STRING = "String"
}
/**
 * <p>The minimum and maximum values of an attribute that is of the number data type.</p>
 */
export interface NumberAttributeConstraintsType {
    /**
     * <p>The minimum value of an attribute that is of the number data type.</p>
     */
    MinValue?: string;
    /**
     * <p>The maximum value of an attribute that is of the number data type.</p>
     */
    MaxValue?: string;
}
export declare namespace NumberAttributeConstraintsType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: NumberAttributeConstraintsType) => any;
}
/**
 * <p>The constraints associated with a string attribute.</p>
 */
export interface StringAttributeConstraintsType {
    /**
     * <p>The minimum length.</p>
     */
    MinLength?: string;
    /**
     * <p>The maximum length.</p>
     */
    MaxLength?: string;
}
export declare namespace StringAttributeConstraintsType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: StringAttributeConstraintsType) => any;
}
/**
 * <p>Contains information about the schema attribute.</p>
 */
export interface SchemaAttributeType {
    /**
     * <p>A schema attribute of the name type.</p>
     */
    Name?: string;
    /**
     * <p>The attribute data type.</p>
     */
    AttributeDataType?: AttributeDataType | string;
    /**
     * <note>
     *             <p>You should use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserPoolClientType.html#CognitoUserPools-Type-UserPoolClientType-WriteAttributes">WriteAttributes</a>
     *         in the user pool client to control how attributes can be mutated for new use cases instead of using <code>DeveloperOnlyAttribute</code>.</p>
     *          </note>
     *         <p>Specifies whether the attribute type is developer only. This attribute can only be modified by an administrator. Users won't be able to modify this attribute using their access
     *             token. For example, <code>DeveloperOnlyAttribute</code> can be modified using AdminUpdateUserAttributes but can't be updated using UpdateUserAttributes.</p>
     */
    DeveloperOnlyAttribute?: boolean;
    /**
     * <p>Specifies whether the value of the attribute can be changed.</p>
     *         <p>For any user pool attribute that is  mapped to an identity provider attribute, you must set this parameter to <code>true</code>. Amazon Cognito updates mapped attributes when users
     *             sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information,
     *             see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html">Specifying Identity Provider Attribute Mappings for
     *             Your User Pool</a>.</p>
     */
    Mutable?: boolean;
    /**
     * <p>Specifies whether a user pool attribute is required. If the attribute is required and the user doesn't provide a value, registration or sign-in will fail.</p>
     */
    Required?: boolean;
    /**
     * <p>Specifies the constraints for an attribute of the number type.</p>
     */
    NumberAttributeConstraints?: NumberAttributeConstraintsType;
    /**
     * <p>Specifies the constraints for an attribute of the string type.</p>
     */
    StringAttributeConstraints?: StringAttributeConstraintsType;
}
export declare namespace SchemaAttributeType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SchemaAttributeType) => any;
}
/**
 * <p>Represents the request to add custom attributes.</p>
 */
export interface AddCustomAttributesRequest {
    /**
     * <p>The user pool ID for the user pool where you want to add custom attributes.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>An array of custom attributes, such as Mutable and Name.</p>
     */
    CustomAttributes: SchemaAttributeType[] | undefined;
}
export declare namespace AddCustomAttributesRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AddCustomAttributesRequest) => any;
}
/**
 * <p>Represents the response from the server for the request to add custom attributes.</p>
 */
export interface AddCustomAttributesResponse {
}
export declare namespace AddCustomAttributesResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AddCustomAttributesResponse) => any;
}
/**
 * <p>This exception is thrown when Amazon Cognito encounters an internal error.</p>
 */
export declare class InternalErrorException extends __BaseException {
    readonly name: "InternalErrorException";
    readonly $fault: "server";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InternalErrorException, __BaseException>);
}
/**
 * <p>This exception is thrown when the Amazon Cognito service encounters an invalid parameter.</p>
 */
export declare class InvalidParameterException extends __BaseException {
    readonly name: "InvalidParameterException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InvalidParameterException, __BaseException>);
}
/**
 * <p>This exception is thrown when a user isn't authorized.</p>
 */
export declare class NotAuthorizedException extends __BaseException {
    readonly name: "NotAuthorizedException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<NotAuthorizedException, __BaseException>);
}
/**
 * <p>This exception is thrown when the Amazon Cognito service can't find the requested resource.</p>
 */
export declare class ResourceNotFoundException extends __BaseException {
    readonly name: "ResourceNotFoundException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
}
/**
 * <p>This exception is thrown when the user has made too many requests for a given operation.</p>
 */
export declare class TooManyRequestsException extends __BaseException {
    readonly name: "TooManyRequestsException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
}
/**
 * <p>This exception is thrown when you're trying to modify a user pool while a user import job is in progress for that pool.</p>
 */
export declare class UserImportInProgressException extends __BaseException {
    readonly name: "UserImportInProgressException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<UserImportInProgressException, __BaseException>);
}
export interface AdminAddUserToGroupRequest {
    /**
     * <p>The user pool ID for the user pool.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The username for the user.</p>
     */
    Username: string | undefined;
    /**
     * <p>The group name.</p>
     */
    GroupName: string | undefined;
}
export declare namespace AdminAddUserToGroupRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminAddUserToGroupRequest) => any;
}
/**
 * <p>This exception is thrown when a user isn't found.</p>
 */
export declare class UserNotFoundException extends __BaseException {
    readonly name: "UserNotFoundException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<UserNotFoundException, __BaseException>);
}
/**
 * <p>Represents the request to confirm user registration.</p>
 */
export interface AdminConfirmSignUpRequest {
    /**
     * <p>The user pool ID for which you want to confirm user registration.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user name for which you want to confirm user registration.</p>
     */
    Username: string | undefined;
    /**
     * <p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers.</p>
     *         <p>If your user pool configuration includes triggers, the AdminConfirmSignUp API action
     *             invokes the Lambda function that is specified for the <i>post
     *                 confirmation</i> trigger. When Amazon Cognito invokes this function, it passes a JSON
     *             payload, which the function receives as input. In this payload, the
     *                 <code>clientMetadata</code> attribute provides the data that you assigned to the
     *             ClientMetadata parameter in your AdminConfirmSignUp request. In your function code in
     *             Lambda, you can process the ClientMetadata value to enhance your workflow for your
     *             specific needs.</p>
     *
     *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
     * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
     *
     *          <note>
     *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
     *             <ul>
     *                <li>
     *                   <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration
     *                 doesn't include triggers, the ClientMetadata parameter serves no purpose.</p>
     *                </li>
     *                <li>
     *                   <p>Validate the ClientMetadata value.</p>
     *                </li>
     *                <li>
     *                   <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p>
     *                </li>
     *             </ul>
     *          </note>
     */
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace AdminConfirmSignUpRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminConfirmSignUpRequest) => any;
}
/**
 * <p>Represents the response from the server for the request to confirm registration.</p>
 */
export interface AdminConfirmSignUpResponse {
}
export declare namespace AdminConfirmSignUpResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminConfirmSignUpResponse) => any;
}
/**
 * <p>This exception is thrown when Amazon Cognito encounters an invalid Lambda response.</p>
 */
export declare class InvalidLambdaResponseException extends __BaseException {
    readonly name: "InvalidLambdaResponseException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InvalidLambdaResponseException, __BaseException>);
}
/**
 * <p>This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.</p>
 */
export declare class LimitExceededException extends __BaseException {
    readonly name: "LimitExceededException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
}
/**
 * <p>This exception is thrown when the user has made too many failed attempts for a given action, such as sign-in.</p>
 */
export declare class TooManyFailedAttemptsException extends __BaseException {
    readonly name: "TooManyFailedAttemptsException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<TooManyFailedAttemptsException, __BaseException>);
}
/**
 * <p>This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.</p>
 */
export declare class UnexpectedLambdaException extends __BaseException {
    readonly name: "UnexpectedLambdaException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<UnexpectedLambdaException, __BaseException>);
}
/**
 * <p>This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.</p>
 */
export declare class UserLambdaValidationException extends __BaseException {
    readonly name: "UserLambdaValidationException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<UserLambdaValidationException, __BaseException>);
}
export declare enum DeliveryMediumType {
    EMAIL = "EMAIL",
    SMS = "SMS"
}
export declare enum MessageActionType {
    RESEND = "RESEND",
    SUPPRESS = "SUPPRESS"
}
/**
 * <p>Specifies whether the attribute is standard or custom.</p>
 */
export interface AttributeType {
    /**
     * <p>The name of the attribute.</p>
     */
    Name: string | undefined;
    /**
     * <p>The value of the attribute.</p>
     */
    Value?: string;
}
export declare namespace AttributeType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AttributeType) => any;
}
/**
 * <p>Represents the request to create a user in the specified user pool.</p>
 */
export interface AdminCreateUserRequest {
    /**
     * <p>The user pool ID for the user pool where the user will be created.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username can't be changed.</p>
     */
    Username: string | undefined;
    /**
     * <p>An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes
     *             other than <code>Username</code>. However, any attributes that you specify as required (when creating a user pool or in the <b>Attributes</b> tab
     *             of the console) either you should supply  (in your call to <code>AdminCreateUser</code>) or the user should supply (when they sign up in response to your welcome message).</p>
     *         <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>
     *         <p>To send a message inviting the user to sign up, you must specify the user's email address or phone number. You can do this in your call to AdminCreateUser or
     *             in the <b>Users</b> tab of the Amazon Cognito console for managing your user pools.</p>
     *         <p>In your call to <code>AdminCreateUser</code>, you can set the <code>email_verified</code> attribute to <code>True</code>, and you can set the <code>phone_number_verified</code>
     *             attribute to <code>True</code>. You can also do this by calling
     *             <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminUpdateUserAttributes.html">AdminUpdateUserAttributes</a>.</p>
     *
     *          <ul>
     *             <li>
     *                <p>
     *                   <b>email</b>: The email address of the user to whom the message that contains the code and username will be sent. Required if the
     *             <code>email_verified</code> attribute is set to <code>True</code>, or if <code>"EMAIL"</code> is specified in the <code>DesiredDeliveryMediums</code> parameter.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <b>phone_number</b>: The phone number of the user to whom the message that contains the code and username will be sent. Required if the
     *             <code>phone_number_verified</code> attribute is set to <code>True</code>, or if <code>"SMS"</code> is specified in the <code>DesiredDeliveryMediums</code> parameter.</p>
     *             </li>
     *          </ul>
     */
    UserAttributes?: AttributeType[];
    /**
     * <p>The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the
     *             types of user accounts that can be registered. For example, you might choose to allow or disallow user sign-up based on the user's domain.</p>
     *         <p>To configure custom validation, you must create a Pre Sign-up Lambda trigger for the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger receives the validation
     *             data and uses it in the validation process.</p>
     *         <p>The user's validation data isn't persisted.</p>
     */
    ValidationData?: AttributeType[];
    /**
     * <p>The user's temporary password. This password must conform to the password policy that you specified when you created the user pool.</p>
     *         <p>The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page, along with a new password to be used
     *             in all future sign-ins.</p>
     *         <p>This parameter isn't required. If you don't specify a value, Amazon Cognito generates one for you.</p>
     *         <p>The temporary password can only be used until the user account expiration limit that you specified when you created the user pool. To reset the account after that time limit, you must
     *             call <code>AdminCreateUser</code> again, specifying <code>"RESEND"</code> for the <code>MessageAction</code> parameter.</p>
     */
    TemporaryPassword?: string;
    /**
     * <p>This parameter is used only if the <code>phone_number_verified</code> or <code>email_verified</code> attribute is set to <code>True</code>. Otherwise, it is ignored.</p>
     *         <p>If this parameter is set to <code>True</code> and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API
     *             call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias.</p>
     *         <p>If this parameter is set to <code>False</code>, the API throws an <code>AliasExistsException</code> error if the alias already exists. The default value is <code>False</code>.</p>
     */
    ForceAliasCreation?: boolean;
    /**
     * <p>Set to <code>RESEND</code> to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to <code>SUPPRESS</code> to suppress
     *             sending the message. You can specify only one value.</p>
     */
    MessageAction?: MessageActionType | string;
    /**
     * <p>Specify <code>"EMAIL"</code> if email will be used to send the welcome message. Specify <code>"SMS"</code> if the phone number will be used. The default value is <code>"SMS"</code>. You
     *             can specify more than one value.</p>
     */
    DesiredDeliveryMediums?: (DeliveryMediumType | string)[];
    /**
     * <p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers.</p>
     *         <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminCreateUser API action,
     *             Amazon Cognito invokes the function that is assigned to the <i>pre sign-up</i> trigger. When Amazon Cognito invokes this function,
     *             it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute,
     *             which provides the data that you assigned to the ClientMetadata parameter in your AdminCreateUser request. In your function code
     *             in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p>
     *
     *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
     * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
     *
     *         <note>
     *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
     *             <ul>
     *                <li>
     *                   <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool
     *                     configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.</p>
     *                </li>
     *                <li>
     *                   <p>Validate the ClientMetadata value.</p>
     *                </li>
     *                <li>
     *                   <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p>
     *                </li>
     *             </ul>
     *         </note>
     */
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace AdminCreateUserRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminCreateUserRequest) => any;
}
/**
 * <p>
 *             <i>This data type is no longer supported.</i> Applies only to SMS
 *             multi-factor authentication (MFA) configurations. Does not apply to time-based one-time
 *             password (TOTP) software token MFA configurations.</p>
 */
export interface MFAOptionType {
    /**
     * <p>The delivery medium to send the MFA code. You can use this parameter to set only the <code>SMS</code> delivery medium value.</p>
     */
    DeliveryMedium?: DeliveryMediumType | string;
    /**
     * <p>The attribute name of the MFA option type. The only valid value is <code>phone_number</code>.</p>
     */
    AttributeName?: string;
}
export declare namespace MFAOptionType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: MFAOptionType) => any;
}
export declare enum UserStatusType {
    ARCHIVED = "ARCHIVED",
    COMPROMISED = "COMPROMISED",
    CONFIRMED = "CONFIRMED",
    FORCE_CHANGE_PASSWORD = "FORCE_CHANGE_PASSWORD",
    RESET_REQUIRED = "RESET_REQUIRED",
    UNCONFIRMED = "UNCONFIRMED",
    UNKNOWN = "UNKNOWN"
}
/**
 * <p>The user type.</p>
 */
export interface UserType {
    /**
     * <p>The user name of the user you want to describe.</p>
     */
    Username?: string;
    /**
     * <p>A container with information about the user type attributes.</p>
     */
    Attributes?: AttributeType[];
    /**
     * <p>The creation date of the user.</p>
     */
    UserCreateDate?: Date;
    /**
     * <p>The last modified date of the user.</p>
     */
    UserLastModifiedDate?: Date;
    /**
     * <p>Specifies whether the user is enabled.</p>
     */
    Enabled?: boolean;
    /**
     * <p>The user status. This can be one of the following:</p>
     *
     *          <ul>
     *             <li>
     *                <p>UNCONFIRMED - User has been created but not confirmed.</p>
     *             </li>
     *             <li>
     *                <p>CONFIRMED - User has been confirmed.</p>
     *             </li>
     *             <li>
     *                <p>ARCHIVED - User is no longer active.</p>
     *             </li>
     *             <li>
     *                <p>UNKNOWN - User status isn't known.</p>
     *             </li>
     *             <li>
     *                <p>RESET_REQUIRED - User is confirmed, but the user must request a code and reset their password before they can sign in.</p>
     *             </li>
     *             <li>
     *                <p>FORCE_CHANGE_PASSWORD - The user is confirmed and the user can sign in using a temporary password, but on first sign-in, the user must change their password to a
     *             new value before doing anything else. </p>
     *             </li>
     *          </ul>
     */
    UserStatus?: UserStatusType | string;
    /**
     * <p>The MFA options for the user.</p>
     */
    MFAOptions?: MFAOptionType[];
}
export declare namespace UserType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: UserType) => any;
}
/**
 * <p>Represents the response from the server to the request to create the user.</p>
 */
export interface AdminCreateUserResponse {
    /**
     * <p>The newly created user.</p>
     */
    User?: UserType;
}
export declare namespace AdminCreateUserResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminCreateUserResponse) => any;
}
/**
 * <p>This exception is thrown when a verification code fails to deliver successfully.</p>
 */
export declare class CodeDeliveryFailureException extends __BaseException {
    readonly name: "CodeDeliveryFailureException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<CodeDeliveryFailureException, __BaseException>);
}
/**
 * <p>This exception is thrown when Amazon Cognito encounters an invalid password.</p>
 */
export declare class InvalidPasswordException extends __BaseException {
    readonly name: "InvalidPasswordException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InvalidPasswordException, __BaseException>);
}
/**
 * <p>This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.</p>
 */
export declare class InvalidSmsRoleAccessPolicyException extends __BaseException {
    readonly name: "InvalidSmsRoleAccessPolicyException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InvalidSmsRoleAccessPolicyException, __BaseException>);
}
/**
 * <p>This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust <code>cognito-idp.amazonaws.com</code> or the
 *             external ID provided in the role does not match what is provided in the SMS configuration for the user pool.</p>
 */
export declare class InvalidSmsRoleTrustRelationshipException extends __BaseException {
    readonly name: "InvalidSmsRoleTrustRelationshipException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InvalidSmsRoleTrustRelationshipException, __BaseException>);
}
/**
 * <p>This exception is thrown when a precondition is not met.</p>
 */
export declare class PreconditionNotMetException extends __BaseException {
    readonly name: "PreconditionNotMetException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<PreconditionNotMetException, __BaseException>);
}
/**
 * <p>The request failed because the user is in an unsupported state.</p>
 */
export declare class UnsupportedUserStateException extends __BaseException {
    readonly name: "UnsupportedUserStateException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<UnsupportedUserStateException, __BaseException>);
}
/**
 * <p>This exception is thrown when Amazon Cognito encounters a user name that already exists in the user pool.</p>
 */
export declare class UsernameExistsException extends __BaseException {
    readonly name: "UsernameExistsException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<UsernameExistsException, __BaseException>);
}
/**
 * <p>The message template structure.</p>
 */
export interface MessageTemplateType {
    /**
     * <p>The message template for SMS messages.</p>
     */
    SMSMessage?: string;
    /**
     * <p>The message template for email messages. EmailMessage is allowed only if
     *             <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. </p>
     */
    EmailMessage?: string;
    /**
     * <p>The subject line for email messages. EmailSubject is allowed only if
     *             <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. </p>
     */
    EmailSubject?: string;
}
export declare namespace MessageTemplateType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: MessageTemplateType) => any;
}
/**
 * <p>The configuration for creating a new user profile.</p>
 */
export interface AdminCreateUserConfigType {
    /**
     * <p>Set to <code>True</code> if only the administrator is allowed to create user profiles. Set to <code>False</code> if users can sign themselves up via an app.</p>
     */
    AllowAdminCreateUserOnly?: boolean;
    /**
     * <p>The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again,
     *             specifying <code>"RESEND"</code> for the <code>MessageAction</code> parameter. The default value for this parameter is 7. </p>
     *          <note>
     *             <p>If you set a value for <code>TemporaryPasswordValidityDays</code> in <code>PasswordPolicy</code>, that value will be used, and <code>UnusedAccountValidityDays</code> will be no longer
     *         be an available parameter for that user pool.</p>
     *          </note>
     */
    UnusedAccountValidityDays?: number;
    /**
     * <p>The message template to be used for the welcome message to new users.</p>
     *         <p>See also <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization">Customizing User Invitation Messages</a>.</p>
     */
    InviteMessageTemplate?: MessageTemplateType;
}
export declare namespace AdminCreateUserConfigType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminCreateUserConfigType) => any;
}
/**
 * <p>Represents the request to delete a user as an administrator.</p>
 */
export interface AdminDeleteUserRequest {
    /**
     * <p>The user pool ID for the user pool where you want to delete the user.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user name of the user you want to delete.</p>
     */
    Username: string | undefined;
}
export declare namespace AdminDeleteUserRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminDeleteUserRequest) => any;
}
/**
 * <p>Represents the request to delete user attributes as an administrator.</p>
 */
export interface AdminDeleteUserAttributesRequest {
    /**
     * <p>The user pool ID for the user pool where you want to delete user attributes.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user name of the user from which you would like to delete attributes.</p>
     */
    Username: string | undefined;
    /**
     * <p>An array of strings representing the user attribute names you want to delete.</p>
     *         <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>
     */
    UserAttributeNames: string[] | undefined;
}
export declare namespace AdminDeleteUserAttributesRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminDeleteUserAttributesRequest) => any;
}
/**
 * <p>Represents the response received from the server for a request to delete user attributes.</p>
 */
export interface AdminDeleteUserAttributesResponse {
}
export declare namespace AdminDeleteUserAttributesResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminDeleteUserAttributesResponse) => any;
}
/**
 * <p>A container for information about an identity provider for a user pool.</p>
 */
export interface ProviderUserIdentifierType {
    /**
     * <p>The name of the provider, such as Facebook, Google, or Login with Amazon.</p>
     */
    ProviderName?: string;
    /**
     * <p>The name of the provider attribute to link to, such as <code>NameID</code>.</p>
     */
    ProviderAttributeName?: string;
    /**
     * <p>The value of the provider attribute to link to, such as <code>xxxxx_account</code>.</p>
     */
    ProviderAttributeValue?: string;
}
export declare namespace ProviderUserIdentifierType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ProviderUserIdentifierType) => any;
}
export interface AdminDisableProviderForUserRequest {
    /**
     * <p>The user pool ID for the user pool.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user to be disabled.</p>
     */
    User: ProviderUserIdentifierType | undefined;
}
export declare namespace AdminDisableProviderForUserRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminDisableProviderForUserRequest) => any;
}
export interface AdminDisableProviderForUserResponse {
}
export declare namespace AdminDisableProviderForUserResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminDisableProviderForUserResponse) => any;
}
/**
 * <p>This exception is thrown when a user tries to confirm the account with an email or phone number that has already been supplied as an alias from a different account. This exception
 *             tells user that an account with this email or phone already exists.</p>
 */
export declare class AliasExistsException extends __BaseException {
    readonly name: "AliasExistsException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<AliasExistsException, __BaseException>);
}
/**
 * <p>Represents the request to disable the user as an administrator.</p>
 */
export interface AdminDisableUserRequest {
    /**
     * <p>The user pool ID for the user pool where you want to disable the user.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user name of the user you want to disable.</p>
     */
    Username: string | undefined;
}
export declare namespace AdminDisableUserRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminDisableUserRequest) => any;
}
/**
 * <p>Represents the response received from the server to disable the user as an administrator.</p>
 */
export interface AdminDisableUserResponse {
}
export declare namespace AdminDisableUserResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminDisableUserResponse) => any;
}
/**
 * <p>Represents the request that enables the user as an administrator.</p>
 */
export interface AdminEnableUserRequest {
    /**
     * <p>The user pool ID for the user pool where you want to enable the user.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user name of the user you want to enable.</p>
     */
    Username: string | undefined;
}
export declare namespace AdminEnableUserRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminEnableUserRequest) => any;
}
/**
 * <p>Represents the response from the server for the request to enable a user as an administrator.</p>
 */
export interface AdminEnableUserResponse {
}
export declare namespace AdminEnableUserResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminEnableUserResponse) => any;
}
/**
 * <p>Sends the forgot device request, as an administrator.</p>
 */
export interface AdminForgetDeviceRequest {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user name.</p>
     */
    Username: string | undefined;
    /**
     * <p>The device key.</p>
     */
    DeviceKey: string | undefined;
}
export declare namespace AdminForgetDeviceRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminForgetDeviceRequest) => any;
}
/**
 * <p>This exception is thrown when the user pool configuration is not valid.</p>
 */
export declare class InvalidUserPoolConfigurationException extends __BaseException {
    readonly name: "InvalidUserPoolConfigurationException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InvalidUserPoolConfigurationException, __BaseException>);
}
/**
 * <p>Represents the request to get the device, as an administrator.</p>
 */
export interface AdminGetDeviceRequest {
    /**
     * <p>The device key.</p>
     */
    DeviceKey: string | undefined;
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user name.</p>
     */
    Username: string | undefined;
}
export declare namespace AdminGetDeviceRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminGetDeviceRequest) => any;
}
/**
 * <p>The device type.</p>
 */
export interface DeviceType {
    /**
     * <p>The device key.</p>
     */
    DeviceKey?: string;
    /**
     * <p>The device attributes.</p>
     */
    DeviceAttributes?: AttributeType[];
    /**
     * <p>The creation date of the device.</p>
     */
    DeviceCreateDate?: Date;
    /**
     * <p>The last modified date of the device.</p>
     */
    DeviceLastModifiedDate?: Date;
    /**
     * <p>The date when the device was last authenticated.</p>
     */
    DeviceLastAuthenticatedDate?: Date;
}
export declare namespace DeviceType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DeviceType) => any;
}
/**
 * <p>Gets the device response, as an administrator.</p>
 */
export interface AdminGetDeviceResponse {
    /**
     * <p>The device.</p>
     */
    Device: DeviceType | undefined;
}
export declare namespace AdminGetDeviceResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminGetDeviceResponse) => any;
}
/**
 * <p>Represents the request to get the specified user as an administrator.</p>
 */
export interface AdminGetUserRequest {
    /**
     * <p>The user pool ID for the user pool where you want to get information about the user.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user name of the user you want to retrieve.</p>
     */
    Username: string | undefined;
}
export declare namespace AdminGetUserRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminGetUserRequest) => any;
}
/**
 * <p>Represents the response from the server from the request to get the specified user as an administrator.</p>
 */
export interface AdminGetUserResponse {
    /**
     * <p>The user name of the user about whom you're receiving information.</p>
     */
    Username: string | undefined;
    /**
     * <p>An array of name-value pairs representing user attributes.</p>
     */
    UserAttributes?: AttributeType[];
    /**
     * <p>The date the user was created.</p>
     */
    UserCreateDate?: Date;
    /**
     * <p>The date the user was last modified.</p>
     */
    UserLastModifiedDate?: Date;
    /**
     * <p>Indicates that the status is <code>enabled</code>.</p>
     */
    Enabled?: boolean;
    /**
     * <p>The user status. Can be one of the following:</p>
     *          <ul>
     *             <li>
     *                <p>UNCONFIRMED - User has been created but not confirmed.</p>
     *             </li>
     *             <li>
     *                <p>CONFIRMED - User has been confirmed.</p>
     *             </li>
     *             <li>
     *                <p>ARCHIVED - User is no longer active.</p>
     *             </li>
     *             <li>
     *                <p>UNKNOWN - User status isn't known.</p>
     *             </li>
     *             <li>
     *                <p>RESET_REQUIRED - User is confirmed, but the user must request a code and reset their password before they can sign in.</p>
     *             </li>
     *             <li>
     *                <p>FORCE_CHANGE_PASSWORD - The user is confirmed and the user can sign in using a temporary password, but on first sign-in, the user must change their password to a new value
     *             before doing anything else. </p>
     *             </li>
     *          </ul>
     */
    UserStatus?: UserStatusType | string;
    /**
     * <p>
     *             <i>This response parameter is no longer supported.</i> It provides information only about SMS MFA configurations. It doesn't provide information about time-based one-time
     *             password (TOTP) software token MFA configurations. To look up information about either type of MFA configuration, use UserMFASettingList instead.</p>
     */
    MFAOptions?: MFAOptionType[];
    /**
     * <p>The user's preferred MFA setting.</p>
     */
    PreferredMfaSetting?: string;
    /**
     * <p>The MFA options that are activated for the user. The possible values in this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.</p>
     */
    UserMFASettingList?: string[];
}
export declare namespace AdminGetUserResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminGetUserResponse) => any;
}
/**
 * <p>An Amazon Pinpoint analytics endpoint.</p>
 *         <p>An endpoint uniquely identifies a mobile device, email address, or phone number that can receive messages from Amazon Pinpoint analytics.</p>
 *          <note>
 *             <p>Amazon Cognito user pools only support sending events to Amazon Pinpoint projects in the US East (N.
 *                 Virginia) us-east-1 Region, regardless of the Region where the user pool
 *                 resides.</p>
 *          </note>
 */
export interface AnalyticsMetadataType {
    /**
     * <p>The endpoint ID.</p>
     */
    AnalyticsEndpointId?: string;
}
export declare namespace AnalyticsMetadataType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AnalyticsMetadataType) => any;
}
export declare enum AuthFlowType {
    ADMIN_NO_SRP_AUTH = "ADMIN_NO_SRP_AUTH",
    ADMIN_USER_PASSWORD_AUTH = "ADMIN_USER_PASSWORD_AUTH",
    CUSTOM_AUTH = "CUSTOM_AUTH",
    REFRESH_TOKEN = "REFRESH_TOKEN",
    REFRESH_TOKEN_AUTH = "REFRESH_TOKEN_AUTH",
    USER_PASSWORD_AUTH = "USER_PASSWORD_AUTH",
    USER_SRP_AUTH = "USER_SRP_AUTH"
}
/**
 * <p>The HTTP header.</p>
 */
export interface HttpHeader {
    /**
     * <p>The header name.</p>
     */
    headerName?: string;
    /**
     * <p>The header value.</p>
     */
    headerValue?: string;
}
export declare namespace HttpHeader {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: HttpHeader) => any;
}
/**
 * <p>Contextual user data type used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.</p>
 */
export interface ContextDataType {
    /**
     * <p>Source IP address of your user.</p>
     */
    IpAddress: string | undefined;
    /**
     * <p>Your server endpoint where this API is invoked.</p>
     */
    ServerName: string | undefined;
    /**
     * <p>Your server path where this API is invoked.</p>
     */
    ServerPath: string | undefined;
    /**
     * <p>HttpHeaders received on your server in same order.</p>
     */
    HttpHeaders: HttpHeader[] | undefined;
    /**
     * <p>Encoded data containing device fingerprinting details collected using the Amazon Cognito context data collection library.</p>
     */
    EncodedData?: string;
}
export declare namespace ContextDataType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ContextDataType) => any;
}
/**
 * <p>Initiates the authorization request, as an administrator.</p>
 */
export interface AdminInitiateAuthRequest {
    /**
     * <p>The ID of the Amazon Cognito user pool.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The app client ID.</p>
     */
    ClientId: string | undefined;
    /**
     * <p>The authentication flow for this call to run. The API action will depend on this value. For example:</p>
     *
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and return new tokens.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and <code>SRP_A</code> and return the Secure Remote Password (SRP) protocol variables to be used for next
     *             challenge execution.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>ADMIN_USER_PASSWORD_AUTH</code> will take in <code>USERNAME</code> and <code>PASSWORD</code> and return the next challenge or tokens.</p>
     *             </li>
     *          </ul>
     *         <p>Valid values include:</p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote Password (SRP) protocol.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>CUSTOM_AUTH</code>: Custom authentication flow.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>ADMIN_NO_SRP_AUTH</code>: Non-SRP authentication flow; you can pass in the USERNAME and PASSWORD directly if the flow is enabled for calling the app client.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>ADMIN_USER_PASSWORD_AUTH</code>: Admin-based user password authentication. This replaces the <code>ADMIN_NO_SRP_AUTH</code> authentication flow. In this flow, Amazon Cognito
     *             receives the password in the request instead of using the SRP process to verify passwords.</p>
     *             </li>
     *          </ul>
     */
    AuthFlow: AuthFlowType | string | undefined;
    /**
     * <p>The authentication parameters. These are inputs corresponding to the <code>AuthFlow</code> that you're invoking. The required values depend on the value of <code>AuthFlow</code>:</p>
     *
     *          <ul>
     *             <li>
     *                <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client
     *             secret), <code>DEVICE_KEY</code>.</p>
     *             </li>
     *             <li>
     *                <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>: <code>REFRESH_TOKEN</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret),
     *             <code>DEVICE_KEY</code>.</p>
     *             </li>
     *             <li>
     *                <p>For <code>ADMIN_NO_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>PASSWORD</code> (required),
     *             <code>DEVICE_KEY</code>.</p>
     *             </li>
     *             <li>
     *                <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>DEVICE_KEY</code>. To start the
     *             authentication flow with password verification, include <code>ChallengeName: SRP_A</code> and <code>SRP_A: (The SRP_A Value)</code>.</p>
     *             </li>
     *          </ul>
     */
    AuthParameters?: {
        [key: string]: string;
    };
    /**
     * <p>A map of custom key-value pairs that you can provide as input for certain custom workflows that this action triggers.</p>
     *         <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminInitiateAuth API action, Amazon Cognito invokes the Lambda functions that are specified for
     *             various triggers. The ClientMetadata value is passed as input to the functions for only the following triggers:</p>
     *          <ul>
     *             <li>
     *                <p>Pre signup</p>
     *             </li>
     *             <li>
     *                <p>Pre authentication</p>
     *             </li>
     *             <li>
     *                <p>User migration</p>
     *             </li>
     *          </ul>
     *         <p>When Amazon Cognito invokes the functions for these triggers, it passes a JSON payload, which
     *             the function receives as input. This payload contains a <code>validationData</code>
     *             attribute, which provides the data that you assigned to the ClientMetadata parameter in
     *             your AdminInitiateAuth request. In your function code in Lambda, you can process the
     *                 <code>validationData</code> value to enhance your workflow for your specific
     *             needs.</p>
     *         <p>When you use the AdminInitiateAuth API action, Amazon Cognito also invokes the functions for the following triggers, but it doesn't provide the ClientMetadata value as input:</p>
     *          <ul>
     *             <li>
     *                <p>Post authentication</p>
     *             </li>
     *             <li>
     *                <p>Custom message</p>
     *             </li>
     *             <li>
     *                <p>Pre token generation</p>
     *             </li>
     *             <li>
     *                <p>Create auth challenge</p>
     *             </li>
     *             <li>
     *                <p>Define auth challenge</p>
     *             </li>
     *             <li>
     *                <p>Verify auth challenge</p>
     *             </li>
     *          </ul>
     *
     *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
     * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
     *
     *         <note>
     *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
     *             <ul>
     *                <li>
     *                   <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration
     *                     doesn't include triggers, the ClientMetadata parameter serves no purpose.</p>
     *                </li>
     *                <li>
     *                   <p>Validate the ClientMetadata value.</p>
     *                </li>
     *                <li>
     *                   <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p>
     *                </li>
     *             </ul>
     *         </note>
     */
    ClientMetadata?: {
        [key: string]: string;
    };
    /**
     * <p>The analytics metadata for collecting Amazon Pinpoint metrics for <code>AdminInitiateAuth</code> calls.</p>
     */
    AnalyticsMetadata?: AnalyticsMetadataType;
    /**
     * <p>Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.</p>
     */
    ContextData?: ContextDataType;
}
export declare namespace AdminInitiateAuthRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminInitiateAuthRequest) => any;
}
/**
 * <p>The new device metadata type.</p>
 */
export interface NewDeviceMetadataType {
    /**
     * <p>The device key.</p>
     */
    DeviceKey?: string;
    /**
     * <p>The device group key.</p>
     */
    DeviceGroupKey?: string;
}
export declare namespace NewDeviceMetadataType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: NewDeviceMetadataType) => any;
}
/**
 * <p>The authentication result.</p>
 */
export interface AuthenticationResultType {
    /**
     * <p>The access token.</p>
     */
    AccessToken?: string;
    /**
     * <p>The expiration period of the authentication result in seconds.</p>
     */
    ExpiresIn?: number;
    /**
     * <p>The token type.</p>
     */
    TokenType?: string;
    /**
     * <p>The refresh token.</p>
     */
    RefreshToken?: string;
    /**
     * <p>The ID token.</p>
     */
    IdToken?: string;
    /**
     * <p>The new device metadata from an authentication result.</p>
     */
    NewDeviceMetadata?: NewDeviceMetadataType;
}
export declare namespace AuthenticationResultType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AuthenticationResultType) => any;
}
export declare enum ChallengeNameType {
    ADMIN_NO_SRP_AUTH = "ADMIN_NO_SRP_AUTH",
    CUSTOM_CHALLENGE = "CUSTOM_CHALLENGE",
    DEVICE_PASSWORD_VERIFIER = "DEVICE_PASSWORD_VERIFIER",
    DEVICE_SRP_AUTH = "DEVICE_SRP_AUTH",
    MFA_SETUP = "MFA_SETUP",
    NEW_PASSWORD_REQUIRED = "NEW_PASSWORD_REQUIRED",
    PASSWORD_VERIFIER = "PASSWORD_VERIFIER",
    SELECT_MFA_TYPE = "SELECT_MFA_TYPE",
    SMS_MFA = "SMS_MFA",
    SOFTWARE_TOKEN_MFA = "SOFTWARE_TOKEN_MFA"
}
/**
 * <p>Initiates the authentication response, as an administrator.</p>
 */
export interface AdminInitiateAuthResponse {
    /**
     * <p>The name of the challenge that you're responding to with this call. This is returned in the <code>AdminInitiateAuth</code> response if you must pass another challenge.</p>
     *
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>MFA_SETUP</code>: If MFA is required, users who don't have at least one of the MFA methods set up are presented with an <code>MFA_SETUP</code> challenge. The user must set up at
     *             least one MFA type to continue to authenticate.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>SELECT_MFA_TYPE</code>: Selects the MFA type. Valid MFA options are <code>SMS_MFA</code> for text SMS MFA, and <code>SOFTWARE_TOKEN_MFA</code> for time-based one-time password (TOTP)
     *             software token MFA.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>SMS_MFA</code>: Next challenge is to supply an <code>SMS_MFA_CODE</code>, delivered via SMS.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>PASSWORD_VERIFIER</code>: Next challenge is to supply <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after the
     *             client-side SRP calculations.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>CUSTOM_CHALLENGE</code>: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>DEVICE_SRP_AUTH</code>: If device tracking was activated in your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking
     *             this device.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to <code>PASSWORD_VERIFIER</code>, but for devices only.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>ADMIN_NO_SRP_AUTH</code>: This is returned if you must authenticate with <code>USERNAME</code> and <code>PASSWORD</code> directly. An app client must be enabled to use this flow.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>NEW_PASSWORD_REQUIRED</code>: For users who are required to change their passwords after successful first login. This challenge should be passed with <code>NEW_PASSWORD</code>
     *             and any other required attributes.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>MFA_SETUP</code>: For users who are required to set up an MFA factor before they can sign in. The MFA types activated for the user pool will be listed in the challenge
     *             parameters <code>MFA_CAN_SETUP</code> value. </p>
     *                    <p> To set up software token MFA, use the session returned here from <code>InitiateAuth</code> as an input to <code>AssociateSoftwareToken</code>, and use the session returned by
     *                        <code>VerifySoftwareToken</code> as an input to <code>RespondToAuthChallenge</code> with challenge name <code>MFA_SETUP</code> to complete sign-in. To set up SMS MFA, users will
     *                        need help from an administrator to add a phone number to their account and then call <code>InitiateAuth</code> again to restart sign-in.</p>
     *             </li>
     *          </ul>
     */
    ChallengeName?: ChallengeNameType | string;
    /**
     * <p>The session that should be passed both ways in challenge-response calls to the service. If <code>AdminInitiateAuth</code> or <code>AdminRespondToAuthChallenge</code> API call determines
     *             that the caller must pass another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>AdminRespondToAuthChallenge</code>
     *             API call.</p>
     */
    Session?: string;
    /**
     * <p>The challenge parameters. These are returned to you in the <code>AdminInitiateAuth</code> response if you must pass another challenge. The responses in this parameter should be used to
     *             compute inputs to the next call (<code>AdminRespondToAuthChallenge</code>).</p>
     *         <p>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable).</p>
     *         <p>The value of the <code>USER_ID_FOR_SRP</code> attribute is the user's actual username, not an alias (such as email address or phone number), even if you specified an alias in your call
     *             to <code>AdminInitiateAuth</code>. This happens because, in the <code>AdminRespondToAuthChallenge</code> API <code>ChallengeResponses</code>, the <code>USERNAME</code> attribute can't be
     *             an alias.</p>
     */
    ChallengeParameters?: {
        [key: string]: string;
    };
    /**
     * <p>The result of the authentication response. This is only returned if the caller doesn't need to pass another challenge. If the caller does need to pass another challenge before it gets tokens,
     *             <code>ChallengeName</code>, <code>ChallengeParameters</code>, and <code>Session</code> are returned.</p>
     */
    AuthenticationResult?: AuthenticationResultType;
}
export declare namespace AdminInitiateAuthResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminInitiateAuthResponse) => any;
}
/**
 * <p>This exception is thrown when Amazon Cognito can't find a multi-factor authentication (MFA) method.</p>
 */
export declare class MFAMethodNotFoundException extends __BaseException {
    readonly name: "MFAMethodNotFoundException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<MFAMethodNotFoundException, __BaseException>);
}
/**
 * <p>This exception is thrown when a password reset is required.</p>
 */
export declare class PasswordResetRequiredException extends __BaseException {
    readonly name: "PasswordResetRequiredException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<PasswordResetRequiredException, __BaseException>);
}
/**
 * <p>This exception is thrown when a user isn't confirmed successfully.</p>
 */
export declare class UserNotConfirmedException extends __BaseException {
    readonly name: "UserNotConfirmedException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<UserNotConfirmedException, __BaseException>);
}
export interface AdminLinkProviderForUserRequest {
    /**
     * <p>The user pool ID for the user pool.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The existing user in the user pool that you want to assign to the external identity
     *             provider user account. This user can be a native (Username + Password) Amazon Cognito user pools
     *             user or a federated user (for example, a SAML or Facebook user). If the user doesn't
     *             exist, Amazon Cognito generates an exception. Amazon Cognito returns this user when the new user (with the
     *             linked identity provider attribute) signs in.</p>
     *         <p>For a native username + password user, the <code>ProviderAttributeValue</code> for the <code>DestinationUser</code> should be the username in the user pool. For a federated user,
     *             it should be the provider-specific <code>user_id</code>.</p>
     *         <p>The <code>ProviderAttributeName</code> of the <code>DestinationUser</code> is ignored.</p>
     *         <p>The <code>ProviderName</code> should be set to <code>Cognito</code> for users in Cognito user pools.</p>
     *          <important>
     *             <p>All attributes in the DestinationUser profile must be mutable. If you have assigned the user any immutable custom attributes, the operation won't succeed.</p>
     *          </important>
     */
    DestinationUser: ProviderUserIdentifierType | undefined;
    /**
     * <p>An external identity provider account for a user who doesn't exist yet in the user pool. This user must be a federated user (for example, a SAML or Facebook user), not another native user.</p>
     *         <p>If the <code>SourceUser</code> is using a federated social identity provider, such as Facebook, Google, or Login with Amazon, you must set the <code>ProviderAttributeName</code>
     *             to <code>Cognito_Subject</code>. For social identity providers, the <code>ProviderName</code> will be <code>Facebook</code>, <code>Google</code>, or <code>LoginWithAmazon</code>,
     *             and Amazon Cognito will automatically parse the Facebook, Google, and Login with Amazon tokens for <code>id</code>, <code>sub</code>, and <code>user_id</code>, respectively. The
     *             <code>ProviderAttributeValue</code> for the user must be the same value as the <code>id</code>, <code>sub</code>, or <code>user_id</code> value found in the social identity provider token.</p>
     *          <p></p>
     *         <p>For SAML, the <code>ProviderAttributeName</code> can be any value that matches a claim in the SAML assertion. If you want to link SAML users based on the subject of the SAML
     *             assertion, you should map the subject to a claim through the SAML identity provider and submit that claim name as the <code>ProviderAttributeName</code>. If you set
     *             <code>ProviderAttributeName</code> to <code>Cognito_Subject</code>, Amazon Cognito will automatically parse the default unique identifier found in the subject from the SAML token.</p>
     */
    SourceUser: ProviderUserIdentifierType | undefined;
}
export declare namespace AdminLinkProviderForUserRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminLinkProviderForUserRequest) => any;
}
export interface AdminLinkProviderForUserResponse {
}
export declare namespace AdminLinkProviderForUserResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminLinkProviderForUserResponse) => any;
}
/**
 * <p>Represents the request to list devices, as an administrator.</p>
 */
export interface AdminListDevicesRequest {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user name.</p>
     */
    Username: string | undefined;
    /**
     * <p>The limit of the devices request.</p>
     */
    Limit?: number;
    /**
     * <p>The pagination token.</p>
     */
    PaginationToken?: string;
}
export declare namespace AdminListDevicesRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminListDevicesRequest) => any;
}
/**
 * <p>Lists the device's response, as an administrator.</p>
 */
export interface AdminListDevicesResponse {
    /**
     * <p>The devices in the list of devices response.</p>
     */
    Devices?: DeviceType[];
    /**
     * <p>The pagination token.</p>
     */
    PaginationToken?: string;
}
export declare namespace AdminListDevicesResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminListDevicesResponse) => any;
}
export interface AdminListGroupsForUserRequest {
    /**
     * <p>The username for the user.</p>
     */
    Username: string | undefined;
    /**
     * <p>The user pool ID for the user pool.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The limit of the request to list groups.</p>
     */
    Limit?: number;
    /**
     * <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
     */
    NextToken?: string;
}
export declare namespace AdminListGroupsForUserRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminListGroupsForUserRequest) => any;
}
/**
 * <p>The group type.</p>
 */
export interface GroupType {
    /**
     * <p>The name of the group.</p>
     */
    GroupName?: string;
    /**
     * <p>The user pool ID for the user pool.</p>
     */
    UserPoolId?: string;
    /**
     * <p>A string containing the description of the group.</p>
     */
    Description?: string;
    /**
     * <p>The role Amazon Resource Name (ARN) for the group.</p>
     */
    RoleArn?: string;
    /**
     * <p>A non-negative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in
     *             the user pool. Zero is the highest precedence value. Groups with lower <code>Precedence</code> values take precedence over groups with
     *             higher ornull <code>Precedence</code> values. If a user belongs to two or more groups, it is the group with the lowest precedence
     *             value whose role ARN is given in the user's tokens for the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims.</p>
     *         <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two
     *             groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim
     *             in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim isn't set in
     *             users' tokens.</p>
     *         <p>The default <code>Precedence</code> value is null.</p>
     */
    Precedence?: number;
    /**
     * <p>The date the group was last modified.</p>
     */
    LastModifiedDate?: Date;
    /**
     * <p>The date the group was created.</p>
     */
    CreationDate?: Date;
}
export declare namespace GroupType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GroupType) => any;
}
export interface AdminListGroupsForUserResponse {
    /**
     * <p>The groups that the user belongs to.</p>
     */
    Groups?: GroupType[];
    /**
     * <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
     */
    NextToken?: string;
}
export declare namespace AdminListGroupsForUserResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminListGroupsForUserResponse) => any;
}
export interface AdminListUserAuthEventsRequest {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user pool username or an alias.</p>
     */
    Username: string | undefined;
    /**
     * <p>The maximum number of authentication events to return.</p>
     */
    MaxResults?: number;
    /**
     * <p>A pagination token.</p>
     */
    NextToken?: string;
}
export declare namespace AdminListUserAuthEventsRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminListUserAuthEventsRequest) => any;
}
export declare enum ChallengeName {
    Mfa = "Mfa",
    Password = "Password"
}
export declare enum ChallengeResponse {
    Failure = "Failure",
    Success = "Success"
}
/**
 * <p>The challenge response type.</p>
 */
export interface ChallengeResponseType {
    /**
     * <p>The challenge name.</p>
     */
    ChallengeName?: ChallengeName | string;
    /**
     * <p>The challenge response.</p>
     */
    ChallengeResponse?: ChallengeResponse | string;
}
export declare namespace ChallengeResponseType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ChallengeResponseType) => any;
}
/**
 * <p>Specifies the user context data captured at the time of an event request.</p>
 */
export interface EventContextDataType {
    /**
     * <p>The user's IP address.</p>
     */
    IpAddress?: string;
    /**
     * <p>The user's device name.</p>
     */
    DeviceName?: string;
    /**
     * <p>The user's time zone.</p>
     */
    Timezone?: string;
    /**
     * <p>The user's city.</p>
     */
    City?: string;
    /**
     * <p>The user's country.</p>
     */
    Country?: string;
}
export declare namespace EventContextDataType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: EventContextDataType) => any;
}
export declare enum FeedbackValueType {
    INVALID = "Invalid",
    VALID = "Valid"
}
/**
 * <p>Specifies the event feedback type.</p>
 */
export interface EventFeedbackType {
    /**
     * <p>The event feedback value.</p>
     */
    FeedbackValue: FeedbackValueType | string | undefined;
    /**
     * <p>The provider.</p>
     */
    Provider: string | undefined;
    /**
     * <p>The event feedback date.</p>
     */
    FeedbackDate?: Date;
}
export declare namespace EventFeedbackType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: EventFeedbackType) => any;
}
export declare enum EventResponseType {
    Failure = "Failure",
    Success = "Success"
}
export declare enum RiskDecisionType {
    AccountTakeover = "AccountTakeover",
    Block = "Block",
    NoRisk = "NoRisk"
}
export declare enum RiskLevelType {
    High = "High",
    Low = "Low",
    Medium = "Medium"
}
/**
 * <p>The event risk type.</p>
 */
export interface EventRiskType {
    /**
     * <p>The risk decision.</p>
     */
    RiskDecision?: RiskDecisionType | string;
    /**
     * <p>The risk level.</p>
     */
    RiskLevel?: RiskLevelType | string;
    /**
     * <p>Indicates whether compromised credentials were detected during an authentication event.</p>
     */
    CompromisedCredentialsDetected?: boolean;
}
export declare namespace EventRiskType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: EventRiskType) => any;
}
export declare enum EventType {
    ForgotPassword = "ForgotPassword",
    SignIn = "SignIn",
    SignUp = "SignUp"
}
/**
 * <p>The authentication event type.</p>
 */
export interface AuthEventType {
    /**
     * <p>The event ID.</p>
     */
    EventId?: string;
    /**
     * <p>The event type.</p>
     */
    EventType?: EventType | string;
    /**
     * <p>The creation date</p>
     */
    CreationDate?: Date;
    /**
     * <p>The event response.</p>
     */
    EventResponse?: EventResponseType | string;
    /**
     * <p>The event risk.</p>
     */
    EventRisk?: EventRiskType;
    /**
     * <p>The challenge responses.</p>
     */
    ChallengeResponses?: ChallengeResponseType[];
    /**
     * <p>The user context data captured at the time of an event request. This value provides additional information about the client from which event the request is received.</p>
     */
    EventContextData?: EventContextDataType;
    /**
     * <p>A flag specifying the user feedback captured at the time of an event request is good or bad. </p>
     */
    EventFeedback?: EventFeedbackType;
}
export declare namespace AuthEventType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AuthEventType) => any;
}
export interface AdminListUserAuthEventsResponse {
    /**
     * <p>The response object. It includes the <code>EventID</code>, <code>EventType</code>, <code>CreationDate</code>, <code>EventRisk</code>, and <code>EventResponse</code>.</p>
     */
    AuthEvents?: AuthEventType[];
    /**
     * <p>A pagination token.</p>
     */
    NextToken?: string;
}
export declare namespace AdminListUserAuthEventsResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminListUserAuthEventsResponse) => any;
}
/**
 * <p>This exception is thrown when user pool add-ons aren't enabled.</p>
 */
export declare class UserPoolAddOnNotEnabledException extends __BaseException {
    readonly name: "UserPoolAddOnNotEnabledException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<UserPoolAddOnNotEnabledException, __BaseException>);
}
export interface AdminRemoveUserFromGroupRequest {
    /**
     * <p>The user pool ID for the user pool.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The username for the user.</p>
     */
    Username: string | undefined;
    /**
     * <p>The group name.</p>
     */
    GroupName: string | undefined;
}
export declare namespace AdminRemoveUserFromGroupRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminRemoveUserFromGroupRequest) => any;
}
/**
 * <p>Represents the request to reset a user's password as an administrator.</p>
 */
export interface AdminResetUserPasswordRequest {
    /**
     * <p>The user pool ID for the user pool where you want to reset the user's password.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user name of the user whose password you want to reset.</p>
     */
    Username: string | undefined;
    /**
     * <p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers.</p>
     *
     *         <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminResetUserPassword API action,
     *             Amazon Cognito invokes the function that is assigned to the <i>custom message</i> trigger. When Amazon Cognito invokes this function, it passes a JSON payload,
     *             which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the
     *             ClientMetadata parameter in your AdminResetUserPassword request. In your function code in Lambda, you can process the <code>clientMetadata</code>
     *             value to enhance your workflow for your specific needs.
     *         </p>
     *
     *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
     * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
     *
     *          <note>
     *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
     *             <ul>
     *                <li>
     *                   <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool
     *                 configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.</p>
     *                </li>
     *                <li>
     *                   <p>Validate the ClientMetadata value.</p>
     *                </li>
     *                <li>
     *                   <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p>
     *                </li>
     *             </ul>
     *          </note>
     */
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace AdminResetUserPasswordRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminResetUserPasswordRequest) => any;
}
/**
 * <p>Represents the response from the server to reset a user password as an administrator.</p>
 */
export interface AdminResetUserPasswordResponse {
}
export declare namespace AdminResetUserPasswordResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminResetUserPasswordResponse) => any;
}
/**
 * <p>This exception is thrown when Amazon Cognito isn't allowed to use your email identity. HTTP status code: 400.</p>
 */
export declare class InvalidEmailRoleAccessPolicyException extends __BaseException {
    readonly name: "InvalidEmailRoleAccessPolicyException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InvalidEmailRoleAccessPolicyException, __BaseException>);
}
/**
 * <p>The request to respond to the authentication challenge, as an administrator.</p>
 */
export interface AdminRespondToAuthChallengeRequest {
    /**
     * <p>The ID of the Amazon Cognito user pool.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The app client ID.</p>
     */
    ClientId: string | undefined;
    /**
     * <p>The challenge name. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html">AdminInitiateAuth</a>.</p>
     */
    ChallengeName: ChallengeNameType | string | undefined;
    /**
     * <p>The challenge responses. These are inputs corresponding to the value of <code>ChallengeName</code>, for example:</p>
     *
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>, <code>USERNAME</code>, <code>SECRET_HASH</code>
     *             (if app client is configured with client secret).</p>
     *                <note>
     *                   <p>
     *                      <code>PASSWORD_VERIFIER</code> requires <code>DEVICE_KEY</code> when signing in with a remembered device.</p>
     *                </note>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>ADMIN_NO_SRP_AUTH</code>: <code>PASSWORD</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret). </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with
     *             client secret). </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>MFA_SETUP</code> requires <code>USERNAME</code>, plus you must use the session value returned by <code>VerifySoftwareToken</code> in the <code>Session</code> parameter.</p>
     *             </li>
     *          </ul>
     *         <p>The value of the <code>USERNAME</code> attribute must be the user's actual username, not an alias (such as an email address or phone number). To make this simpler, the
     *             <code>AdminInitiateAuth</code> response includes the actual username value in the <code>USERNAMEUSER_ID_FOR_SRP</code> attribute. This happens even if you specified an
     *             alias in your call to <code>AdminInitiateAuth</code>.</p>
     */
    ChallengeResponses?: {
        [key: string]: string;
    };
    /**
     * <p>The session that should be passed both ways in challenge-response calls to the service. If an <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call determines
     *             that the caller must pass another challenge, it returns a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code>
     *             API call.</p>
     */
    Session?: string;
    /**
     * <p>The analytics metadata for collecting Amazon Pinpoint metrics for <code>AdminRespondToAuthChallenge</code> calls.</p>
     */
    AnalyticsMetadata?: AnalyticsMetadataType;
    /**
     * <p>Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.</p>
     */
    ContextData?: ContextDataType;
    /**
     * <p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers.</p>
     *         <p>You create custom workflows by assigning Lambda functions to user pool triggers.
     *             When you use the AdminRespondToAuthChallenge API action, Amazon Cognito invokes any functions
     *             that you have assigned to the  following triggers: </p>
     *         <ul>
     *             <li>
     *                 <p>pre sign-up</p>
     *             </li>
     *             <li>
     *                 <p>custom message</p>
     *             </li>
     *             <li>
     *                 <p>post authentication</p>
     *             </li>
     *             <li>
     *                 <p>user migration</p>
     *             </li>
     *             <li>
     *                 <p>pre token generation</p>
     *             </li>
     *             <li>
     *                 <p>define auth challenge</p>
     *             </li>
     *             <li>
     *                 <p>create auth challenge</p>
     *             </li>
     *             <li>
     *                 <p>verify auth challenge response</p>
     *             </li>
     *          </ul>
     *         <p>When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the
     *             function receives as input. This payload contains a <code>clientMetadata</code>
     *             attribute that provides the data that you assigned to the ClientMetadata parameter in
     *             your AdminRespondToAuthChallenge request. In your function code in Lambda, you can
     *             process the <code>clientMetadata</code> value to enhance your workflow for your specific
     *             needs.</p>
     *
     *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
     * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
     *
     *          <note>
     *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
     *             <ul>
     *                <li>
     *                   <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration
     *                 doesn't include triggers, the ClientMetadata parameter serves no purpose.</p>
     *                </li>
     *                <li>
     *                   <p>Validate the ClientMetadata value.</p>
     *                </li>
     *                <li>
     *                   <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p>
     *                </li>
     *             </ul>
     *          </note>
     */
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace AdminRespondToAuthChallengeRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminRespondToAuthChallengeRequest) => any;
}
/**
 * <p>Responds to the authentication challenge, as an administrator.</p>
 */
export interface AdminRespondToAuthChallengeResponse {
    /**
     * <p>The name of the challenge. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html">AdminInitiateAuth</a>.</p>
     */
    ChallengeName?: ChallengeNameType | string;
    /**
     * <p>The session that should be passed both ways in challenge-response calls to the service. If the caller must pass another challenge, they return a session with other challenge parameters.
     *             This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.</p>
     */
    Session?: string;
    /**
     * <p>The challenge parameters. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html">AdminInitiateAuth</a>.</p>
     */
    ChallengeParameters?: {
        [key: string]: string;
    };
    /**
     * <p>The result returned by the server in response to the authentication request.</p>
     */
    AuthenticationResult?: AuthenticationResultType;
}
export declare namespace AdminRespondToAuthChallengeResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminRespondToAuthChallengeResponse) => any;
}
/**
 * <p>This exception is thrown if the provided code doesn't match what the server was expecting.</p>
 */
export declare class CodeMismatchException extends __BaseException {
    readonly name: "CodeMismatchException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<CodeMismatchException, __BaseException>);
}
/**
 * <p>This exception is thrown if a code has expired.</p>
 */
export declare class ExpiredCodeException extends __BaseException {
    readonly name: "ExpiredCodeException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ExpiredCodeException, __BaseException>);
}
/**
 * <p>This exception is thrown when the software token time-based one-time password (TOTP) multi-factor authentication (MFA) isn't activated for the user pool.</p>
 */
export declare class SoftwareTokenMFANotFoundException extends __BaseException {
    readonly name: "SoftwareTokenMFANotFoundException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<SoftwareTokenMFANotFoundException, __BaseException>);
}
/**
 * <p>The type used for enabling SMS multi-factor authentication (MFA) at the user level. Phone numbers don't need to be verified to be used for SMS MFA. If an MFA type
 *             is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted. If you
 *             would like MFA to be applied selectively based on the assessed risk level of sign-in attempts, deactivate MFA for users and turn on Adaptive Authentication for the user pool.</p>
 */
export interface SMSMfaSettingsType {
    /**
     * <p>Specifies whether SMS text message MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is
     *             turned on and the device has been trusted.</p>
     */
    Enabled?: boolean;
    /**
     * <p>Specifies whether SMS is the preferred MFA method.</p>
     */
    PreferredMfa?: boolean;
}
export declare namespace SMSMfaSettingsType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SMSMfaSettingsType) => any;
}
/**
 * <p>The type used for enabling software token MFA at the user level. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking
 *             is turned on and the device has been trusted. If you want MFA to be applied selectively based on the assessed risk level of sign-in attempts, deactivate MFA for users and turn on Adaptive
 *             Authentication for the user pool.</p>
 */
export interface SoftwareTokenMfaSettingsType {
    /**
     * <p>Specifies whether software token MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned
     *             on and the device has been trusted.</p>
     */
    Enabled?: boolean;
    /**
     * <p>Specifies whether software token MFA is the preferred MFA method.</p>
     */
    PreferredMfa?: boolean;
}
export declare namespace SoftwareTokenMfaSettingsType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SoftwareTokenMfaSettingsType) => any;
}
export interface AdminSetUserMFAPreferenceRequest {
    /**
     * <p>The SMS text message MFA settings.</p>
     */
    SMSMfaSettings?: SMSMfaSettingsType;
    /**
     * <p>The time-based one-time password software token MFA settings.</p>
     */
    SoftwareTokenMfaSettings?: SoftwareTokenMfaSettingsType;
    /**
     * <p>The user pool username or alias.</p>
     */
    Username: string | undefined;
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
}
export declare namespace AdminSetUserMFAPreferenceRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminSetUserMFAPreferenceRequest) => any;
}
export interface AdminSetUserMFAPreferenceResponse {
}
export declare namespace AdminSetUserMFAPreferenceResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminSetUserMFAPreferenceResponse) => any;
}
export interface AdminSetUserPasswordRequest {
    /**
     * <p>The user pool ID for the user pool where you want to set the user's password.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user name of the user whose password you want to set.</p>
     */
    Username: string | undefined;
    /**
     * <p>The password for the user.</p>
     */
    Password: string | undefined;
    /**
     * <p>
     *             <code>True</code> if the password is permanent, <code>False</code> if it is temporary.</p>
     */
    Permanent?: boolean;
}
export declare namespace AdminSetUserPasswordRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminSetUserPasswordRequest) => any;
}
export interface AdminSetUserPasswordResponse {
}
export declare namespace AdminSetUserPasswordResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminSetUserPasswordResponse) => any;
}
/**
 * <p>You can use this parameter to set an MFA configuration that uses the SMS delivery medium.</p>
 */
export interface AdminSetUserSettingsRequest {
    /**
     * <p>The ID of the user pool that contains the user whose options you're setting.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user name of the user whose options you're setting.</p>
     */
    Username: string | undefined;
    /**
     * <p>You can use this parameter only to set an SMS configuration that uses SMS for delivery.</p>
     */
    MFAOptions: MFAOptionType[] | undefined;
}
export declare namespace AdminSetUserSettingsRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminSetUserSettingsRequest) => any;
}
/**
 * <p>Represents the response from the server to set user settings as an administrator.</p>
 */
export interface AdminSetUserSettingsResponse {
}
export declare namespace AdminSetUserSettingsResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminSetUserSettingsResponse) => any;
}
export interface AdminUpdateAuthEventFeedbackRequest {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user pool username.</p>
     */
    Username: string | undefined;
    /**
     * <p>The authentication event ID.</p>
     */
    EventId: string | undefined;
    /**
     * <p>The authentication event feedback value.</p>
     */
    FeedbackValue: FeedbackValueType | string | undefined;
}
export declare namespace AdminUpdateAuthEventFeedbackRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminUpdateAuthEventFeedbackRequest) => any;
}
export interface AdminUpdateAuthEventFeedbackResponse {
}
export declare namespace AdminUpdateAuthEventFeedbackResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminUpdateAuthEventFeedbackResponse) => any;
}
export declare enum DeviceRememberedStatusType {
    NOT_REMEMBERED = "not_remembered",
    REMEMBERED = "remembered"
}
/**
 * <p>The request to update the device status, as an administrator.</p>
 */
export interface AdminUpdateDeviceStatusRequest {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user name.</p>
     */
    Username: string | undefined;
    /**
     * <p>The device key.</p>
     */
    DeviceKey: string | undefined;
    /**
     * <p>The status indicating whether a device has been remembered or not.</p>
     */
    DeviceRememberedStatus?: DeviceRememberedStatusType | string;
}
export declare namespace AdminUpdateDeviceStatusRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminUpdateDeviceStatusRequest) => any;
}
/**
 * <p>The status response to the request to update the device, as an administrator.</p>
 */
export interface AdminUpdateDeviceStatusResponse {
}
export declare namespace AdminUpdateDeviceStatusResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminUpdateDeviceStatusResponse) => any;
}
/**
 * <p>Represents the request to update the user's attributes as an administrator.</p>
 */
export interface AdminUpdateUserAttributesRequest {
    /**
     * <p>The user pool ID for the user pool where you want to update user attributes.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user name of the user for whom you want to update user attributes.</p>
     */
    Username: string | undefined;
    /**
     * <p>An array of name-value pairs representing user attributes.</p>
     *         <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>
     */
    UserAttributes: AttributeType[] | undefined;
    /**
     * <p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers.</p>
     *
     *         <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminUpdateUserAttributes API action, Amazon Cognito invokes
     *             the function that is assigned to the <i>custom message</i> trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives
     *             as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your
     *             AdminUpdateUserAttributes request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for
     *             your specific needs.</p>
     *
     *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
     * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
     *
     *         <note>
     *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
     *             <ul>
     *                <li>
     *                   <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool
     *                     configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.</p>
     *                </li>
     *                <li>
     *                   <p>Validate the ClientMetadata value.</p>
     *                </li>
     *                <li>
     *                   <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p>
     *                </li>
     *             </ul>
     *         </note>
     */
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace AdminUpdateUserAttributesRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminUpdateUserAttributesRequest) => any;
}
/**
 * <p>Represents the response from the server for the request to update user attributes as an administrator.</p>
 */
export interface AdminUpdateUserAttributesResponse {
}
export declare namespace AdminUpdateUserAttributesResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminUpdateUserAttributesResponse) => any;
}
/**
 * <p>The request to sign out of all devices, as an administrator.</p>
 */
export interface AdminUserGlobalSignOutRequest {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The user name.</p>
     */
    Username: string | undefined;
}
export declare namespace AdminUserGlobalSignOutRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminUserGlobalSignOutRequest) => any;
}
/**
 * <p>The global sign-out response, as an administrator.</p>
 */
export interface AdminUserGlobalSignOutResponse {
}
export declare namespace AdminUserGlobalSignOutResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AdminUserGlobalSignOutResponse) => any;
}
export declare enum AdvancedSecurityModeType {
    AUDIT = "AUDIT",
    ENFORCED = "ENFORCED",
    OFF = "OFF"
}
export declare enum AliasAttributeType {
    EMAIL = "email",
    PHONE_NUMBER = "phone_number",
    PREFERRED_USERNAME = "preferred_username"
}
/**
 * <p>The Amazon Pinpoint analytics configuration for collecting metrics for a user pool.</p>
 *          <note>
 *             <p>In Regions where Amazon Pinpointisn't available, user pools only support sending events to Amazon Pinpoint
 *                 projects in us-east-1. In Regions where Amazon Pinpoint is available, user pools support
 *                 sending events to Amazon Pinpoint projects within that same Region.</p>
 *          </note>
 */
export interface AnalyticsConfigurationType {
    /**
     * <p>The application ID for an Amazon Pinpoint application.</p>
     */
    ApplicationId?: string;
    /**
     * <p>The Amazon Resource Name (ARN) of an Amazon Pinpoint project. You can use the Amazon Pinpoint project
     *             to integrate with the chosen user pool Client. Amazon Cognito publishes events to the
     *             Amazon Pinpointproject declared by the app ARN.</p>
     */
    ApplicationArn?: string;
    /**
     * <p>The ARN of an Identity and Access Management role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.</p>
     */
    RoleArn?: string;
    /**
     * <p>The external ID.</p>
     */
    ExternalId?: string;
    /**
     * <p>If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.</p>
     */
    UserDataShared?: boolean;
}
export declare namespace AnalyticsConfigurationType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AnalyticsConfigurationType) => any;
}
export interface AssociateSoftwareTokenRequest {
    /**
     * <p>The access token.</p>
     */
    AccessToken?: string;
    /**
     * <p>The session that should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.</p>
     */
    Session?: string;
}
export declare namespace AssociateSoftwareTokenRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AssociateSoftwareTokenRequest) => any;
}
export interface AssociateSoftwareTokenResponse {
    /**
     * <p>A unique generated shared secret code that is used in the time-based one-time password (TOTP) algorithm to generate a one-time code.</p>
     */
    SecretCode?: string;
    /**
     * <p>The session that should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.</p>
     */
    Session?: string;
}
export declare namespace AssociateSoftwareTokenResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: AssociateSoftwareTokenResponse) => any;
}
/**
 * <p>This exception is thrown if two or more modifications are happening concurrently.</p>
 */
export declare class ConcurrentModificationException extends __BaseException {
    readonly name: "ConcurrentModificationException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
}
/**
 * <p>Represents the request to change a user password.</p>
 */
export interface ChangePasswordRequest {
    /**
     * <p>The old password.</p>
     */
    PreviousPassword: string | undefined;
    /**
     * <p>The new password.</p>
     */
    ProposedPassword: string | undefined;
    /**
     * <p>The access token.</p>
     */
    AccessToken: string | undefined;
}
export declare namespace ChangePasswordRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ChangePasswordRequest) => any;
}
/**
 * <p>The response from the server to the change password request.</p>
 */
export interface ChangePasswordResponse {
}
export declare namespace ChangePasswordResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ChangePasswordResponse) => any;
}
/**
 * <p>The device verifier against which it is authenticated.</p>
 */
export interface DeviceSecretVerifierConfigType {
    /**
     * <p>The password verifier.</p>
     */
    PasswordVerifier?: string;
    /**
     * <p>The salt.</p>
     */
    Salt?: string;
}
export declare namespace DeviceSecretVerifierConfigType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DeviceSecretVerifierConfigType) => any;
}
/**
 * <p>Confirms the device request.</p>
 */
export interface ConfirmDeviceRequest {
    /**
     * <p>The access token.</p>
     */
    AccessToken: string | undefined;
    /**
     * <p>The device key.</p>
     */
    DeviceKey: string | undefined;
    /**
     * <p>The configuration of the device secret verifier.</p>
     */
    DeviceSecretVerifierConfig?: DeviceSecretVerifierConfigType;
    /**
     * <p>The device name.</p>
     */
    DeviceName?: string;
}
export declare namespace ConfirmDeviceRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ConfirmDeviceRequest) => any;
}
/**
 * <p>Confirms the device response.</p>
 */
export interface ConfirmDeviceResponse {
    /**
     * <p>Indicates whether the user confirmation must confirm the device response.</p>
     */
    UserConfirmationNecessary?: boolean;
}
export declare namespace ConfirmDeviceResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ConfirmDeviceResponse) => any;
}
/**
 * <p>Contextual data, such as the user's device fingerprint, IP address, or location, used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.</p>
 */
export interface UserContextDataType {
    /**
     * <p>Contextual data, such as the user's device fingerprint, IP address, or location, used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.</p>
     */
    EncodedData?: string;
}
export declare namespace UserContextDataType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: UserContextDataType) => any;
}
/**
 * <p>The request representing the confirmation for a password reset.</p>
 */
export interface ConfirmForgotPasswordRequest {
    /**
     * <p>The app client ID of the app associated with the user pool.</p>
     */
    ClientId: string | undefined;
    /**
     * <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.</p>
     */
    SecretHash?: string;
    /**
     * <p>The user name of the user for whom you want to enter a code to retrieve a forgotten password.</p>
     */
    Username: string | undefined;
    /**
     * <p>The confirmation code sent by a user's request to retrieve a forgotten password. For more information,
     *             see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ForgotPassword.html">ForgotPassword</a>.</p>
     */
    ConfirmationCode: string | undefined;
    /**
     * <p>The password sent by a user's request to retrieve a forgotten password.</p>
     */
    Password: string | undefined;
    /**
     * <p>The Amazon Pinpoint analytics metadata for collecting metrics for <code>ConfirmForgotPassword</code> calls.</p>
     */
    AnalyticsMetadata?: AnalyticsMetadataType;
    /**
     * <p>Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.</p>
     */
    UserContextData?: UserContextDataType;
    /**
     * <p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers.</p>
     *         <p>You create custom workflows by assigning Lambda functions to user pool triggers.
     *             When you use the ConfirmForgotPassword API action, Amazon Cognito invokes the function that is
     *             assigned to the <i>post confirmation</i> trigger. When Amazon Cognito invokes this
     *             function, it passes a JSON payload, which the function receives as input. This payload
     *             contains a <code>clientMetadata</code> attribute, which provides the data that you
     *             assigned to the ClientMetadata parameter in your ConfirmForgotPassword request. In your
     *             function code in Lambda, you can process the <code>clientMetadata</code> value to
     *             enhance your workflow for your specific needs.</p>
     *
     *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
     * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
     *
     *          <note>
     *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
     *             <ul>
     *                <li>
     *                   <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool
     *                 configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.</p>
     *                </li>
     *                <li>
     *                   <p>Validate the ClientMetadata value.</p>
     *                </li>
     *                <li>
     *                   <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p>
     *                </li>
     *             </ul>
     *          </note>
     */
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace ConfirmForgotPasswordRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ConfirmForgotPasswordRequest) => any;
}
/**
 * <p>The response from the server that results from a user's request to retrieve a forgotten password.</p>
 */
export interface ConfirmForgotPasswordResponse {
}
export declare namespace ConfirmForgotPasswordResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ConfirmForgotPasswordResponse) => any;
}
/**
 * <p>Represents the request to confirm registration of a user.</p>
 */
export interface ConfirmSignUpRequest {
    /**
     * <p>The ID of the app client associated with the user pool.</p>
     */
    ClientId: string | undefined;
    /**
     * <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.</p>
     */
    SecretHash?: string;
    /**
     * <p>The user name of the user whose registration you want to confirm.</p>
     */
    Username: string | undefined;
    /**
     * <p>The confirmation code sent by a user's request to confirm registration.</p>
     */
    ConfirmationCode: string | undefined;
    /**
     * <p>Boolean to be specified to force user confirmation irrespective of existing alias. By default set to <code>False</code>. If this parameter is set to
     *             <code>True</code> and the phone number/email used for sign up confirmation already exists as an alias with a different user, the API call will migrate
     *             the alias from the previous user to the newly created user being confirmed. If set to <code>False</code>, the API will throw an
     *             <b>AliasExistsException</b> error.</p>
     */
    ForceAliasCreation?: boolean;
    /**
     * <p>The Amazon Pinpoint analytics metadata for collecting metrics for <code>ConfirmSignUp</code> calls.</p>
     */
    AnalyticsMetadata?: AnalyticsMetadataType;
    /**
     * <p>Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.</p>
     */
    UserContextData?: UserContextDataType;
    /**
     * <p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers.</p>
     *
     *         <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ConfirmSignUp API action,
     *             Amazon Cognito invokes the function that is assigned to the <i>post confirmation</i> trigger. When Amazon Cognito invokes this
     *             function, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which
     *             provides the data that you assigned to the ClientMetadata parameter in your ConfirmSignUp request. In your function code in Lambda,
     *             you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p>
     *
     *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
     * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
     *
     *          <note>
     *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
     *             <ul>
     *                <li>
     *                   <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool
     *                 configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.</p>
     *                </li>
     *                <li>
     *                   <p>Validate the ClientMetadata value.</p>
     *                </li>
     *                <li>
     *                   <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p>
     *                </li>
     *             </ul>
     *          </note>
     */
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace ConfirmSignUpRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ConfirmSignUpRequest) => any;
}
/**
 * <p>Represents the response from the server for the registration confirmation.</p>
 */
export interface ConfirmSignUpResponse {
}
export declare namespace ConfirmSignUpResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ConfirmSignUpResponse) => any;
}
export interface CreateGroupRequest {
    /**
     * <p>The name of the group. Must be unique.</p>
     */
    GroupName: string | undefined;
    /**
     * <p>The user pool ID for the user pool.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>A string containing the description of the group.</p>
     */
    Description?: string;
    /**
     * <p>The role Amazon Resource Name (ARN) for the group.</p>
     */
    RoleArn?: string;
    /**
     * <p>A non-negative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool.
     *             Zero is the highest precedence value. Groups with lower <code>Precedence</code> values take precedence over groups with higher ornull <code>Precedence</code>
     *             values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN is given in the user's tokens for the
     *             <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims.</p>
     *         <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same
     *             <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If
     *             the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim isn't set in users' tokens.</p>
     *         <p>The default <code>Precedence</code> value is null.</p>
     */
    Precedence?: number;
}
export declare namespace CreateGroupRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CreateGroupRequest) => any;
}
export interface CreateGroupResponse {
    /**
     * <p>The group object for the group.</p>
     */
    Group?: GroupType;
}
export declare namespace CreateGroupResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CreateGroupResponse) => any;
}
/**
 * <p>This exception is thrown when Amazon Cognito encounters a group that already exists in the user pool.</p>
 */
export declare class GroupExistsException extends __BaseException {
    readonly name: "GroupExistsException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<GroupExistsException, __BaseException>);
}
export declare enum IdentityProviderTypeType {
    Facebook = "Facebook",
    Google = "Google",
    LoginWithAmazon = "LoginWithAmazon",
    OIDC = "OIDC",
    SAML = "SAML",
    SignInWithApple = "SignInWithApple"
}
export interface CreateIdentityProviderRequest {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The identity provider name.</p>
     */
    ProviderName: string | undefined;
    /**
     * <p>The identity provider type.</p>
     */
    ProviderType: IdentityProviderTypeType | string | undefined;
    /**
     * <p>The identity provider details. The following list describes the provider detail keys for each identity provider type.</p>
     *          <ul>
     *             <li>
     *                <p>For Google and Login with Amazon:</p>
     *                <ul>
     *                   <li>
     *                      <p>client_id</p>
     *                   </li>
     *                   <li>
     *                      <p>client_secret</p>
     *                   </li>
     *                   <li>
     *                      <p>authorize_scopes</p>
     *                   </li>
     *                </ul>
     *             </li>
     *             <li>
     *                <p>For Facebook:</p>
     *                <ul>
     *                   <li>
     *                      <p>client_id</p>
     *                   </li>
     *                   <li>
     *                      <p>client_secret</p>
     *                   </li>
     *                   <li>
     *                      <p>authorize_scopes</p>
     *                   </li>
     *                   <li>
     *                      <p>api_version</p>
     *                   </li>
     *                </ul>
     *             </li>
     *             <li>
     *                <p>For Sign in with Apple:</p>
     *                <ul>
     *                   <li>
     *                      <p>client_id</p>
     *                   </li>
     *                   <li>
     *                      <p>team_id</p>
     *                   </li>
     *                   <li>
     *                      <p>key_id</p>
     *                   </li>
     *                   <li>
     *                      <p>private_key</p>
     *                   </li>
     *                   <li>
     *                      <p>authorize_scopes</p>
     *                   </li>
     *                </ul>
     *             </li>
     *             <li>
     *                <p>For OpenID Connect (OIDC) providers:</p>
     *                <ul>
     *                   <li>
     *                      <p>client_id</p>
     *                   </li>
     *                   <li>
     *                      <p>client_secret</p>
     *                   </li>
     *                   <li>
     *                      <p>attributes_request_method</p>
     *                   </li>
     *                   <li>
     *                      <p>oidc_issuer</p>
     *                   </li>
     *                   <li>
     *                      <p>authorize_scopes</p>
     *                   </li>
     *                   <li>
     *                      <p>authorize_url <i>if not available from discovery URL specified by oidc_issuer key</i>
     *                      </p>
     *                   </li>
     *                   <li>
     *                      <p>token_url <i>if not available from discovery URL specified by oidc_issuer key</i>
     *                      </p>
     *                   </li>
     *                   <li>
     *                      <p>attributes_url <i>if not available from discovery URL specified by oidc_issuer key</i>
     *                      </p>
     *                   </li>
     *                   <li>
     *                      <p>jwks_uri <i>if not available from discovery URL specified by oidc_issuer key</i>
     *                      </p>
     *                   </li>
     *                   <li>
     *                      <p>attributes_url_add_attributes <i>a read-only property that is set automatically</i>
     *                      </p>
     *                   </li>
     *                </ul>
     *             </li>
     *             <li>
     *                <p>For SAML providers:</p>
     *                <ul>
     *                   <li>
     *                      <p>MetadataFile OR MetadataURL</p>
     *                   </li>
     *                   <li>
     *                      <p>IDPSignout (optional)</p>
     *                   </li>
     *                </ul>
     *             </li>
     *          </ul>
     */
    ProviderDetails: {
        [key: string]: string;
    } | undefined;
    /**
     * <p>A mapping of identity provider attributes to standard and custom user pool attributes.</p>
     */
    AttributeMapping?: {
        [key: string]: string;
    };
    /**
     * <p>A list of identity provider identifiers.</p>
     */
    IdpIdentifiers?: string[];
}
export declare namespace CreateIdentityProviderRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CreateIdentityProviderRequest) => any;
}
/**
 * <p>A container for information about an identity provider.</p>
 */
export interface IdentityProviderType {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId?: string;
    /**
     * <p>The identity provider name.</p>
     */
    ProviderName?: string;
    /**
     * <p>The identity provider type.</p>
     */
    ProviderType?: IdentityProviderTypeType | string;
    /**
     * <p>The identity provider details. The following list describes the provider detail keys for each identity provider type.</p>
     *          <ul>
     *             <li>
     *                <p>For Google and Login with Amazon:</p>
     *                <ul>
     *                   <li>
     *                      <p>client_id</p>
     *                   </li>
     *                   <li>
     *                      <p>client_secret</p>
     *                   </li>
     *                   <li>
     *                      <p>authorize_scopes</p>
     *                   </li>
     *                </ul>
     *             </li>
     *             <li>
     *                <p>For Facebook:</p>
     *                <ul>
     *                   <li>
     *                      <p>client_id</p>
     *                   </li>
     *                   <li>
     *                      <p>client_secret</p>
     *                   </li>
     *                   <li>
     *                      <p>authorize_scopes</p>
     *                   </li>
     *                   <li>
     *                      <p>api_version</p>
     *                   </li>
     *                </ul>
     *             </li>
     *             <li>
     *                <p>For Sign in with Apple:</p>
     *                <ul>
     *                   <li>
     *                      <p>client_id</p>
     *                   </li>
     *                   <li>
     *                      <p>team_id</p>
     *                   </li>
     *                   <li>
     *                      <p>key_id</p>
     *                   </li>
     *                   <li>
     *                      <p>private_key</p>
     *                   </li>
     *                   <li>
     *                      <p>authorize_scopes</p>
     *                   </li>
     *                </ul>
     *             </li>
     *             <li>
     *                <p>For OIDC providers:</p>
     *                <ul>
     *                   <li>
     *                      <p>client_id</p>
     *                   </li>
     *                   <li>
     *                      <p>client_secret</p>
     *                   </li>
     *                   <li>
     *                      <p>attributes_request_method</p>
     *                   </li>
     *                   <li>
     *                      <p>oidc_issuer</p>
     *                   </li>
     *                   <li>
     *                      <p>authorize_scopes</p>
     *                   </li>
     *                   <li>
     *                      <p>authorize_url <i>if not available from discovery URL specified by oidc_issuer key</i>
     *                      </p>
     *                   </li>
     *                   <li>
     *                      <p>token_url <i>if not available from discovery URL specified by oidc_issuer key</i>
     *                      </p>
     *                   </li>
     *                   <li>
     *                      <p>attributes_url <i>if not available from discovery URL specified by oidc_issuer key</i>
     *                      </p>
     *                   </li>
     *                   <li>
     *                      <p>jwks_uri <i>if not available from discovery URL specified by oidc_issuer key</i>
     *                      </p>
     *                   </li>
     *                   <li>
     *                      <p>attributes_url_add_attributes <i>a read-only property that is set automatically</i>
     *                      </p>
     *                   </li>
     *                </ul>
     *             </li>
     *             <li>
     *                <p>For SAML providers:</p>
     *                <ul>
     *                   <li>
     *                      <p>MetadataFile or MetadataURL</p>
     *                   </li>
     *                   <li>
     *                      <p>IDPSignOut <i>optional</i>
     *                      </p>
     *                   </li>
     *                </ul>
     *             </li>
     *          </ul>
     */
    ProviderDetails?: {
        [key: string]: string;
    };
    /**
     * <p>A mapping of identity provider attributes to standard and custom user pool attributes.</p>
     */
    AttributeMapping?: {
        [key: string]: string;
    };
    /**
     * <p>A list of identity provider identifiers.</p>
     */
    IdpIdentifiers?: string[];
    /**
     * <p>The date the identity provider was last modified.</p>
     */
    LastModifiedDate?: Date;
    /**
     * <p>The date the identity provider was created.</p>
     */
    CreationDate?: Date;
}
export declare namespace IdentityProviderType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: IdentityProviderType) => any;
}
export interface CreateIdentityProviderResponse {
    /**
     * <p>The newly created identity provider object.</p>
     */
    IdentityProvider: IdentityProviderType | undefined;
}
export declare namespace CreateIdentityProviderResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CreateIdentityProviderResponse) => any;
}
/**
 * <p>This exception is thrown when the provider is already supported by the user pool.</p>
 */
export declare class DuplicateProviderException extends __BaseException {
    readonly name: "DuplicateProviderException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<DuplicateProviderException, __BaseException>);
}
/**
 * <p>A resource server scope.</p>
 */
export interface ResourceServerScopeType {
    /**
     * <p>The name of the scope.</p>
     */
    ScopeName: string | undefined;
    /**
     * <p>A description of the scope.</p>
     */
    ScopeDescription: string | undefined;
}
export declare namespace ResourceServerScopeType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ResourceServerScopeType) => any;
}
export interface CreateResourceServerRequest {
    /**
     * <p>The user pool ID for the user pool.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>A unique resource server identifier for the resource server. This could be an HTTPS endpoint where the resource server is located, such as <code>https://my-weather-api.example.com</code>.</p>
     */
    Identifier: string | undefined;
    /**
     * <p>A friendly name for the resource server.</p>
     */
    Name: string | undefined;
    /**
     * <p>A list of scopes. Each scope is a key-value map with the keys <code>name</code> and <code>description</code>.</p>
     */
    Scopes?: ResourceServerScopeType[];
}
export declare namespace CreateResourceServerRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CreateResourceServerRequest) => any;
}
/**
 * <p>A container for information about a resource server for a user pool.</p>
 */
export interface ResourceServerType {
    /**
     * <p>The user pool ID for the user pool that hosts the resource server.</p>
     */
    UserPoolId?: string;
    /**
     * <p>The identifier for the resource server.</p>
     */
    Identifier?: string;
    /**
     * <p>The name of the resource server.</p>
     */
    Name?: string;
    /**
     * <p>A list of scopes that are defined for the resource server.</p>
     */
    Scopes?: ResourceServerScopeType[];
}
export declare namespace ResourceServerType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ResourceServerType) => any;
}
export interface CreateResourceServerResponse {
    /**
     * <p>The newly created resource server.</p>
     */
    ResourceServer: ResourceServerType | undefined;
}
export declare namespace CreateResourceServerResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CreateResourceServerResponse) => any;
}
/**
 * <p>Represents the request to create the user import job.</p>
 */
export interface CreateUserImportJobRequest {
    /**
     * <p>The job name for the user import job.</p>
     */
    JobName: string | undefined;
    /**
     * <p>The user pool ID for the user pool that the users are being imported
     *     into.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The role ARN for the Amazon CloudWatch Logs Logging role for the user import job.</p>
     */
    CloudWatchLogsRoleArn: string | undefined;
}
export declare namespace CreateUserImportJobRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CreateUserImportJobRequest) => any;
}
export declare enum UserImportJobStatusType {
    Created = "Created",
    Expired = "Expired",
    Failed = "Failed",
    InProgress = "InProgress",
    Pending = "Pending",
    Stopped = "Stopped",
    Stopping = "Stopping",
    Succeeded = "Succeeded"
}
/**
 * <p>The user import job type.</p>
 */
export interface UserImportJobType {
    /**
     * <p>The job name for the user import job.</p>
     */
    JobName?: string;
    /**
     * <p>The job ID for the user import job.</p>
     */
    JobId?: string;
    /**
     * <p>The user pool ID for the user pool that the users are being imported
     *     into.</p>
     */
    UserPoolId?: string;
    /**
     * <p>The pre-signed URL to be used to upload the <code>.csv</code> file.</p>
     */
    PreSignedUrl?: string;
    /**
     * <p>The date the user import job was created.</p>
     */
    CreationDate?: Date;
    /**
     * <p>The date when the user import job was started.</p>
     */
    StartDate?: Date;
    /**
     * <p>The date when the user import job was completed.</p>
     */
    CompletionDate?: Date;
    /**
     * <p>The status of the user import job. One of the following:</p>
     *
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>Created</code> - The job was created but not started.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>InProgress</code> - The job has started, and users are being imported.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>Succeeded</code> - The job has completed successfully.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>Failed</code> - The job has stopped due to an error.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job can't be started.</p>
     *             </li>
     *          </ul>
     */
    Status?: UserImportJobStatusType | string;
    /**
     * <p>The role Amazon Resource Name (ARN) for the Amazon CloudWatch Logging role for the user import job. For more information, see "Creating the CloudWatch Logs IAM Role" in the Amazon Cognito Developer Guide.</p>
     */
    CloudWatchLogsRoleArn?: string;
    /**
     * <p>The number of users that were successfully imported.</p>
     */
    ImportedUsers?: number;
    /**
     * <p>The number of users that were skipped.</p>
     */
    SkippedUsers?: number;
    /**
     * <p>The number of users that couldn't be imported.</p>
     */
    FailedUsers?: number;
    /**
     * <p>The message returned when the user import job is completed.</p>
     */
    CompletionMessage?: string;
}
export declare namespace UserImportJobType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: UserImportJobType) => any;
}
/**
 * <p>Represents the response from the server to the request to create the user import job.</p>
 */
export interface CreateUserImportJobResponse {
    /**
     * <p>The job object that represents the user import job.</p>
     */
    UserImportJob?: UserImportJobType;
}
export declare namespace CreateUserImportJobResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CreateUserImportJobResponse) => any;
}
export declare enum VerifiedAttributeType {
    EMAIL = "email",
    PHONE_NUMBER = "phone_number"
}
/**
 * <p>The device tracking configuration for a user pool. A user pool with device tracking deactivated returns a null value.</p>
 *          <note>
 *             <p>When you provide values for any DeviceConfiguration field, you activate device tracking.</p>
 *          </note>
 */
export interface DeviceConfigurationType {
    /**
     * <p>When true, device authentication can replace SMS and time-based one-time password (TOTP) factors for multi-factor authentication (MFA).</p>
     *          <note>
     *             <p>Users that sign in with devices that have not been confirmed or remembered will still have to provide a second factor, whether or not ChallengeRequiredOnNewDevice is true, when your user
     *         pool requires MFA.</p>
     *          </note>
     */
    ChallengeRequiredOnNewDevice?: boolean;
    /**
     * <p>When true, users can opt in to remembering their device. Your app code must use callback functions to return the user's choice.</p>
     */
    DeviceOnlyRememberedOnUserPrompt?: boolean;
}
export declare namespace DeviceConfigurationType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DeviceConfigurationType) => any;
}
export declare enum EmailSendingAccountType {
    COGNITO_DEFAULT = "COGNITO_DEFAULT",
    DEVELOPER = "DEVELOPER"
}
/**
 * <p>The email configuration of your user pool. The email configuration type sets your
 *             preferred sending method, Amazon Web Services Region, and sender for messages from your user
 *             pool.</p>
 *         <note>
 *             <p>Amazon Cognito can send email messages with Amazon Simple Email Service resources in the Amazon Web Services Region where you
 *                 created your user pool, and in alternate Regions in some cases. For more information
 *                 on the supported Regions, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-email.html">Email settings for Amazon Cognito user pools</a>.</p>
 *         </note>
 */
export interface EmailConfigurationType {
    /**
     * <p>The ARN of a verified email address in Amazon SES. Amazon Cognito uses this email address in one of the following ways, depending on the value that you specify for the <code>EmailSendingAccount</code>
     *             parameter:</p>
     *          <ul>
     *             <li>
     *                <p>If you specify <code>COGNITO_DEFAULT</code>, Amazon Cognito uses this address as the custom FROM address when it emails your users using its built-in email account.</p>
     *             </li>
     *             <li>
     *                <p>If you specify <code>DEVELOPER</code>, Amazon Cognito emails your users with this address by calling Amazon SES on your behalf.</p>
     *             </li>
     *          </ul>
     *         <p>The Region value of the <code>SourceArn</code> parameter must indicate a supported
     *             Amazon Web Services Region of your user pool. Typically, the Region in the <code>SourceArn</code> and
     *             the user pool Region are the same. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-email.html#user-pool-email-developer-region-mapping">Amazon SES email configuration regions</a> in the <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon Cognito Developer
     *                 Guide</a>.</p>
     */
    SourceArn?: string;
    /**
     * <p>The destination to which the receiver of the email should reply.</p>
     */
    ReplyToEmailAddress?: string;
    /**
     * <p>Specifies whether Amazon Cognito uses its built-in functionality to send your users email
     *             messages, or uses your Amazon Simple Email Service email configuration. Specify one of the following
     *             values:</p>
     *          <dl>
     *             <dt>COGNITO_DEFAULT</dt>
     *             <dd>
     *                     <p>When Amazon Cognito emails your users, it uses its built-in email functionality. When you use the default option, Amazon Cognito allows only a limited number of emails each day for your user pool.
     *                         For typical production environments, the default email limit is less than the required delivery volume. To achieve a higher delivery volume, specify DEVELOPER to use your Amazon SES email
     *                         configuration.</p>
     *                     <p>To look up the email delivery limit for the default option, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/limits.html">Limits in </a> in the <i>
     *                         Developer Guide</i>.</p>
     *                     <p>The default FROM address is <code>no-reply@verificationemail.com</code>. To customize the FROM address, provide the Amazon Resource Name (ARN) of an Amazon SES verified email address
     *                         for the <code>SourceArn</code> parameter.</p>
     *                     <p> If EmailSendingAccount is COGNITO_DEFAULT, you can't use the following parameters:</p>
     *                         <ul>
     *                   <li>
     *                      <p>EmailVerificationMessage</p>
     *                   </li>
     *                   <li>
     *                      <p>EmailVerificationSubject</p>
     *                   </li>
     *                   <li>
     *                      <p>InviteMessageTemplate.EmailMessage</p>
     *                   </li>
     *                   <li>
     *                      <p>InviteMessageTemplate.EmailSubject</p>
     *                   </li>
     *                   <li>
     *                      <p>VerificationMessageTemplate.EmailMessage</p>
     *                   </li>
     *                   <li>
     *                      <p>VerificationMessageTemplate.EmailMessageByLink</p>
     *                   </li>
     *                   <li>
     *                      <p>VerificationMessageTemplate.EmailSubject,</p>
     *                   </li>
     *                   <li>
     *                      <p>VerificationMessageTemplate.EmailSubjectByLink</p>
     *                   </li>
     *                </ul>
     *                     <note>
     *                         <p>DEVELOPER EmailSendingAccount is required.</p>
     *                     </note>
     *                 </dd>
     *             <dt>DEVELOPER</dt>
     *             <dd>
     *                 <p>When Amazon Cognito emails your users, it uses your Amazon SES configuration. Amazon Cognito calls Amazon SES on your behalf to send email from your verified email address. When you use this
     *                     option, the email delivery limits are the same limits that apply to your Amazon SES verified email address in your Amazon Web Services account.</p>
     *                 <p>If you use this option, you must provide the ARN of an Amazon SES verified email address for the <code>SourceArn</code> parameter.</p>
     *                 <p>Before Amazon Cognito can email your users, it requires additional permissions to call
     *                         Amazon SES on your behalf. When you update your user pool with this option, Amazon Cognito
     *                         creates a <i>service-linked role</i>, which is a type of role,
     *                         in your Amazon Web Services account. This role contains the permissions that
     *                         allow to access Amazon SES and send email messages with your address. For more
     *                         information about the service-linked role that Amazon Cognito creates, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/using-service-linked-roles.html">Using Service-Linked Roles for Amazon Cognito</a> in the
     *                             <i>Amazon Cognito Developer Guide</i>.</p>
     *             </dd>
     *          </dl>
     */
    EmailSendingAccount?: EmailSendingAccountType | string;
    /**
     * <p>Either the sender’s email address or the sender’s name with their email address. For example, <code>testuser@example.com</code> or
     *             <code>Test User <testuser@example.com></code>. This address appears before the body of the email.</p>
     */
    From?: string;
    /**
     * <p>The set of configuration rules that can be applied to emails sent using Amazon Simple Email Service. A
     *             configuration set is applied to an email by including a reference to the configuration
     *             set in the headers of the email. Once applied, all of the rules in that configuration
     *             set are applied to the email. Configuration sets can be used to apply the following
     *             types of rules to emails: </p>
     *         <dl>
     *             <dt>Event publishing</dt>
     *             <dd>
     *                     <p>Amazon Simple Email Service can track the number of send, delivery, open, click, bounce, and
     *                         complaint events for each email sent. Use event publishing to send
     *                         information about these events to other Amazon Web Services services such as and
     *                         Amazon CloudWatch</p>
     *                 </dd>
     *             <dt>IP pool management</dt>
     *             <dd>
     *                     <p>When leasing dedicated IP addresses with Amazon Simple Email Service, you can create groups
     *                         of IP addresses, called dedicated IP pools. You can then associate the
     *                         dedicated IP pools with configuration sets.</p>
     *                 </dd>
     *          </dl>
     */
    ConfigurationSet?: string;
}
export declare namespace EmailConfigurationType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: EmailConfigurationType) => any;
}
export declare enum CustomEmailSenderLambdaVersionType {
    V1_0 = "V1_0"
}
/**
 * <p>A custom email sender Lambda configuration type.</p>
 */
export interface CustomEmailLambdaVersionConfigType {
    /**
     * <p>Signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom email Lambda function. The only supported value is <code>V1_0</code>.</p>
     */
    LambdaVersion: CustomEmailSenderLambdaVersionType | string | undefined;
    /**
     * <p>The Amazon Resource Name (ARN) of the Lambda function that Amazon Cognito activates to send email notifications to users.</p>
     */
    LambdaArn: string | undefined;
}
export declare namespace CustomEmailLambdaVersionConfigType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CustomEmailLambdaVersionConfigType) => any;
}
export declare enum CustomSMSSenderLambdaVersionType {
    V1_0 = "V1_0"
}
/**
 * <p>A custom SMS sender Lambda configuration type.</p>
 */
export interface CustomSMSLambdaVersionConfigType {
    /**
     * <p>Signature of the "request" attribute in the "event" information that Amazon Cognito passes to your custom SMS Lambda function. The only supported value is <code>V1_0</code>.</p>
     */
    LambdaVersion: CustomSMSSenderLambdaVersionType | string | undefined;
    /**
     * <p>The Amazon Resource Name (ARN) of the Lambda function that Amazon Cognito activates to send SMS notifications to users.</p>
     */
    LambdaArn: string | undefined;
}
export declare namespace CustomSMSLambdaVersionConfigType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CustomSMSLambdaVersionConfigType) => any;
}
/**
 * <p>Specifies the configuration for Lambda triggers.</p>
 */
export interface LambdaConfigType {
    /**
     * <p>A pre-registration Lambda trigger.</p>
     */
    PreSignUp?: string;
    /**
     * <p>A custom Message Lambda trigger.</p>
     */
    CustomMessage?: string;
    /**
     * <p>A post-confirmation Lambda trigger.</p>
     */
    PostConfirmation?: string;
    /**
     * <p>A pre-authentication Lambda trigger.</p>
     */
    PreAuthentication?: string;
    /**
     * <p>A post-authentication Lambda trigger.</p>
     */
    PostAuthentication?: string;
    /**
     * <p>Defines the authentication challenge.</p>
     */
    DefineAuthChallenge?: string;
    /**
     * <p>Creates an authentication challenge.</p>
     */
    CreateAuthChallenge?: string;
    /**
     * <p>Verifies the authentication challenge response.</p>
     */
    VerifyAuthChallengeResponse?: string;
    /**
     * <p>A Lambda trigger that is invoked before token generation.</p>
     */
    PreTokenGeneration?: string;
    /**
     * <p>The user migration Lambda config type.</p>
     */
    UserMigration?: string;
    /**
     * <p>A custom SMS sender Lambda trigger.</p>
     */
    CustomSMSSender?: CustomSMSLambdaVersionConfigType;
    /**
     * <p>A custom email sender Lambda trigger.</p>
     */
    CustomEmailSender?: CustomEmailLambdaVersionConfigType;
    /**
     * <p>The Amazon Resource Name (ARN) of an <a href="/kms/latest/developerguide/concepts.html#master_keys">KMS key</a>. Amazon Cognito uses the key to encrypt codes and temporary passwords sent to
     *             <code>CustomEmailSender</code> and <code>CustomSMSSender</code>.</p>
     */
    KMSKeyID?: string;
}
export declare namespace LambdaConfigType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: LambdaConfigType) => any;
}
export declare enum UserPoolMfaType {
    OFF = "OFF",
    ON = "ON",
    OPTIONAL = "OPTIONAL"
}
/**
 * <p>The password policy type.</p>
 */
export interface PasswordPolicyType {
    /**
     * <p>The minimum length of the password in the policy that you have set. This value can't be less than 6.</p>
     */
    MinimumLength?: number;
    /**
     * <p>In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.</p>
     */
    RequireUppercase?: boolean;
    /**
     * <p>In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.</p>
     */
    RequireLowercase?: boolean;
    /**
     * <p>In the password policy that you have set, refers to whether you have required users to use at least one number in their password.</p>
     */
    RequireNumbers?: boolean;
    /**
     * <p>In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.</p>
     */
    RequireSymbols?: boolean;
    /**
     * <p>The number of days a temporary password is valid in the password policy. If the user doesn't sign in during this time, an administrator must reset their password.</p>
     *          <note>
     *             <p>When you set <code>TemporaryPasswordValidityDays</code> for a user pool, you can no longer set the deprecated <code>UnusedAccountValidityDays</code> value for that user pool.</p>
     *          </note>
     */
    TemporaryPasswordValidityDays?: number;
}
export declare namespace PasswordPolicyType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: PasswordPolicyType) => any;
}
/**
 * <p>The policy associated with a user pool.</p>
 */
export interface UserPoolPolicyType {
    /**
     * <p>The password policy.</p>
     */
    PasswordPolicy?: PasswordPolicyType;
}
export declare namespace UserPoolPolicyType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: UserPoolPolicyType) => any;
}
/**
 * <p>The SMS configuration type is the settings that your Amazon Cognito user pool must use to send
 *             an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS
 *             messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an
 *             Identity and Access Management (IAM) role in your Amazon Web Services account.</p>
 */
export interface SmsConfigurationType {
    /**
     * <p>The Amazon Resource Name (ARN) of the Amazon SNS caller. This is the ARN of the IAM role in your Amazon Web Services account that Amazon Cognito will use to send SMS messages. SMS messages are
     *             subject to a <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html">spending limit</a>. </p>
     */
    SnsCallerArn: string | undefined;
    /**
     * <p>The external ID provides additional security for your IAM role. You can use an
     *                 <code>ExternalId</code> with the IAM role that you use with Amazon SNS to send SMS
     *             messages for your user pool. If you provide an <code>ExternalId</code>, your Amazon Cognito user
     *             pool includes it in the request to assume your IAM role. You can configure the role
     *             trust policy to require that Amazon Cognito, and any principal, provide the
     *                 <code>ExternalID</code>. If you use the Amazon Cognito Management Console to create a role
     *             for SMS multi-factor authentication (MFA), Amazon Cognito creates a role with the required
     *             permissions and a trust policy that demonstrates use of the
     *             <code>ExternalId</code>.</p>
     *         <p>For more information about the <code>ExternalId</code> of a role,
     *             see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html">How to use an external ID when granting access to your Amazon Web Services resources to a
     *                 third party</a>
     *          </p>
     */
    ExternalId?: string;
    /**
     * <p>The Amazon Web Services Region to use with Amazon SNS integration. You can choose the same Region as your
     *             user pool, or a supported <b>Legacy Amazon SNS alternate
     *             Region</b>. </p>
     *         <p>
     *             Amazon Cognito resources in the Asia Pacific (Seoul) Amazon Web Services Region must use your Amazon SNS
     *             configuration in the Asia Pacific (Tokyo) Region. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html">SMS message settings for Amazon Cognito user pools</a>.</p>
     */
    SnsRegion?: string;
}
export declare namespace SmsConfigurationType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SmsConfigurationType) => any;
}
export declare enum UsernameAttributeType {
    EMAIL = "email",
    PHONE_NUMBER = "phone_number"
}
/**
 * <p>The username configuration type. </p>
 */
export interface UsernameConfigurationType {
    /**
     * <p>Specifies whether username case sensitivity will be applied for all users in the user
     *             pool through Amazon Cognito APIs.</p>
     *         <p>Valid values include:</p>
     *         <dl>
     *             <dt>True</dt>
     *             <dd>
     *                     <p>Enables case sensitivity for all username input. When this option is set
     *                         to <code>True</code>, users must sign in using the exact capitalization of
     *                         their given username, such as “UserName”. This is the default value.</p>
     *                 </dd>
     *             <dt>False</dt>
     *             <dd>
     *                     <p>Enables case insensitivity for all username input. For example, when this
     *                         option is set to <code>False</code>, users can sign in using either
     *                         "username" or "Username". This option also enables both
     *                             <code>preferred_username</code> and <code>email</code> alias to be case
     *                         insensitive, in addition to the <code>username</code> attribute.</p>
     *                 </dd>
     *          </dl>
     */
    CaseSensitive: boolean | undefined;
}
export declare namespace UsernameConfigurationType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: UsernameConfigurationType) => any;
}
/**
 * <p>The user pool add-ons type.</p>
 */
export interface UserPoolAddOnsType {
    /**
     * <p>The advanced security mode.</p>
     */
    AdvancedSecurityMode: AdvancedSecurityModeType | string | undefined;
}
export declare namespace UserPoolAddOnsType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: UserPoolAddOnsType) => any;
}
export declare enum DefaultEmailOptionType {
    CONFIRM_WITH_CODE = "CONFIRM_WITH_CODE",
    CONFIRM_WITH_LINK = "CONFIRM_WITH_LINK"
}
/**
 * <p>The template for verification messages.</p>
 */
export interface VerificationMessageTemplateType {
    /**
     * <p>The SMS message template.</p>
     */
    SmsMessage?: string;
    /**
     * <p>The email message template. EmailMessage is allowed only if
     *             <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount"> EmailSendingAccount</a> is DEVELOPER. </p>
     */
    EmailMessage?: string;
    /**
     * <p>The subject line for the email message template. EmailSubject is allowed only if
     *             <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. </p>
     */
    EmailSubject?: string;
    /**
     * <p>The email message template for sending a confirmation link to the user. EmailMessageByLink is allowed only if
     *             <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount"> EmailSendingAccount</a> is DEVELOPER.</p>
     */
    EmailMessageByLink?: string;
    /**
     * <p>The subject line for the email message template for sending a confirmation link to the user. EmailSubjectByLink is allowed only
     *             <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount"> EmailSendingAccount</a> is DEVELOPER.</p>
     */
    EmailSubjectByLink?: string;
    /**
     * <p>The default email option.</p>
     */
    DefaultEmailOption?: DefaultEmailOptionType | string;
}
export declare namespace VerificationMessageTemplateType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: VerificationMessageTemplateType) => any;
}
/**
 * <p>Represents the request to create a user pool.</p>
 */
export interface CreateUserPoolRequest {
    /**
     * <p>A string used to name the user pool.</p>
     */
    PoolName: string | undefined;
    /**
     * <p>The policies associated with the new user pool.</p>
     */
    Policies?: UserPoolPolicyType;
    /**
     * <p>The Lambda trigger configuration information for the new user pool.</p>
     *          <note>
     *             <p>In a push model, event sources (such as Amazon S3 and custom applications) need permission to invoke a function. So you must make an
     *         extra call to add permission for these event sources to invoke your Lambda function.</p>
     *             <p></p>
     *             <p>For more information on using the Lambda API
     *             to add permission, see<a href="https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html">  AddPermission </a>. </p>
     *             <p>For adding permission using the CLI, see<a href="https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html">  add-permission </a>.</p>
     *          </note>
     */
    LambdaConfig?: LambdaConfigType;
    /**
     * <p>The attributes to be auto-verified. Possible values: <b>email</b>, <b>phone_number</b>.</p>
     */
    AutoVerifiedAttributes?: (VerifiedAttributeType | string)[];
    /**
     * <p>Attributes supported as an alias for this user pool. Possible values: <b>phone_number</b>, <b>email</b>, or
     *             <b>preferred_username</b>.</p>
     */
    AliasAttributes?: (AliasAttributeType | string)[];
    /**
     * <p>Specifies whether a user can use an email address or phone number as a username when they sign up.</p>
     */
    UsernameAttributes?: (UsernameAttributeType | string)[];
    /**
     * <p>A string representing the SMS verification message.</p>
     */
    SmsVerificationMessage?: string;
    /**
     * <p>A string representing the email verification message. EmailVerificationMessage is allowed only if
     *             <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. </p>
     */
    EmailVerificationMessage?: string;
    /**
     * <p>A string representing the email verification subject. EmailVerificationSubject is allowed only if
     *             <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. </p>
     */
    EmailVerificationSubject?: string;
    /**
     * <p>The template for the verification message that the user sees when the app requests permission to access the user's information.</p>
     */
    VerificationMessageTemplate?: VerificationMessageTemplateType;
    /**
     * <p>A string representing the SMS authentication message.</p>
     */
    SmsAuthenticationMessage?: string;
    /**
     * <p>Specifies MFA configuration details.</p>
     */
    MfaConfiguration?: UserPoolMfaType | string;
    /**
     * <p>The device configuration.</p>
     */
    DeviceConfiguration?: DeviceConfigurationType;
    /**
     * <p>The email configuration of your user pool. The email configuration type sets your
     *             preferred sending method, Amazon Web Services Region, and sender for messages from your user
     *             pool.</p>
     */
    EmailConfiguration?: EmailConfigurationType;
    /**
     * <p>The SMS configuration with the settings that your Amazon Cognito user pool must use to send an
     *             SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages
     *             with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management
     *             (IAM) role in your Amazon Web Services account.</p>
     */
    SmsConfiguration?: SmsConfigurationType;
    /**
     * <p>The tag keys and values to assign to the user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment,
     *             or other criteria.</p>
     */
    UserPoolTags?: {
        [key: string]: string;
    };
    /**
     * <p>The configuration for <code>AdminCreateUser</code> requests.</p>
     */
    AdminCreateUserConfig?: AdminCreateUserConfigType;
    /**
     * <p>An array of schema attributes for the new user pool. These attributes can be standard or custom attributes.</p>
     */
    Schema?: SchemaAttributeType[];
    /**
     * <p>Enables advanced security risk detection. Set the key <code>AdvancedSecurityMode</code> to the value "AUDIT".</p>
     */
    UserPoolAddOns?: UserPoolAddOnsType;
    /**
     * <p>Case sensitivity on the username input for the selected sign-in option. For example, when case sensitivity is set to <code>False</code>, users can sign in using either "username"
     *             or "Username". This configuration is immutable once it has been set. For more information,
     *             see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html">UsernameConfigurationType</a>.</p>
     */
    UsernameConfiguration?: UsernameConfigurationType;
    /**
     * <p>The available verified method a user can use to recover their password when they call <code>ForgotPassword</code>. You can use this setting to define a
     *             preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the
     *             user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method
     *             where SMS is preferred through email.</p>
     */
    AccountRecoverySetting?: AccountRecoverySettingType;
}
export declare namespace CreateUserPoolRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CreateUserPoolRequest) => any;
}
export declare enum StatusType {
    Disabled = "Disabled",
    Enabled = "Enabled"
}
/**
 * <p>A container for information about the user pool.</p>
 */
export interface UserPoolType {
    /**
     * <p>The ID of the user pool.</p>
     */
    Id?: string;
    /**
     * <p>The name of the user pool.</p>
     */
    Name?: string;
    /**
     * <p>The policies associated with the user pool.</p>
     */
    Policies?: UserPoolPolicyType;
    /**
     * <p>The Lambda triggers associated with the user pool.</p>
     */
    LambdaConfig?: LambdaConfigType;
    /**
     * <p>The status of a user pool.</p>
     */
    Status?: StatusType | string;
    /**
     * <p>The date the user pool was last modified.</p>
     */
    LastModifiedDate?: Date;
    /**
     * <p>The date the user pool was created.</p>
     */
    CreationDate?: Date;
    /**
     * <p>A container with the schema attributes of a user pool.</p>
     */
    SchemaAttributes?: SchemaAttributeType[];
    /**
     * <p>The attributes that are auto-verified in a user pool.</p>
     */
    AutoVerifiedAttributes?: (VerifiedAttributeType | string)[];
    /**
     * <p>The attributes that are aliased in a user pool.</p>
     */
    AliasAttributes?: (AliasAttributeType | string)[];
    /**
     * <p>Specifies whether a user can use an email address or phone number as a username when they sign up.</p>
     */
    UsernameAttributes?: (UsernameAttributeType | string)[];
    /**
     * <p>The contents of the SMS verification message.</p>
     */
    SmsVerificationMessage?: string;
    /**
     * <p>The contents of the email verification message.</p>
     */
    EmailVerificationMessage?: string;
    /**
     * <p>The subject of the email verification message.</p>
     */
    EmailVerificationSubject?: string;
    /**
     * <p>The template for verification messages.</p>
     */
    VerificationMessageTemplate?: VerificationMessageTemplateType;
    /**
     * <p>The contents of the SMS authentication message.</p>
     */
    SmsAuthenticationMessage?: string;
    /**
     * <p>Can be one of the following values:</p>
     *
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>OFF</code> - MFA tokens aren't required and can't be specified during user registration.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you're initially creating a user pool.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p>
     *             </li>
     *          </ul>
     */
    MfaConfiguration?: UserPoolMfaType | string;
    /**
     * <p>The device configuration.</p>
     */
    DeviceConfiguration?: DeviceConfigurationType;
    /**
     * <p>A number estimating the size of the user pool.</p>
     */
    EstimatedNumberOfUsers?: number;
    /**
     * <p>The email configuration of your user pool. The email configuration type sets your
     *             preferred sending method, Amazon Web Services Region, and sender for messages tfrom your user
     *             pool.</p>
     */
    EmailConfiguration?: EmailConfigurationType;
    /**
     * <p>The SMS configuration with the settings that your Amazon Cognito user pool must use to send an
     *             SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages
     *             with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management
     *             (IAM) role in your Amazon Web Services account.</p>
     */
    SmsConfiguration?: SmsConfigurationType;
    /**
     * <p>The tags that are assigned to the user pool. A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment,
     *             or other criteria.</p>
     */
    UserPoolTags?: {
        [key: string]: string;
    };
    /**
     * <p>The reason why the SMS configuration can't send the messages to your users.</p>
     *         <p>This message might include comma-separated values to describe why your SMS
     *             configuration can't send messages to user pool end users.</p>
     *         <dl>
     *             <dt>InvalidSmsRoleAccessPolicyException</dt>
     *             <dd>
     *                     <p>The Identity and Access Management role that Amazon Cognito uses to send SMS messages isn't properly
     *                         configured. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SmsConfigurationType.html">SmsConfigurationType</a>.</p>
     *                 </dd>
     *             <dt>SNSSandbox</dt>
     *             <dd>
     *                     <p>The Amazon Web Services account is in the SNS SMS Sandbox and messages will
     *                         only reach verified end users. This parameter won’t get populated with
     *                         SNSSandbox if the IAM user creating the user pool doesn’t have SNS
     *                         permissions. To learn how to move your Amazon Web Services account out of the
     *                         sandbox, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox-moving-to-production.html">Moving out
     *                             of the SMS sandbox</a>.</p>
     *                 </dd>
     *          </dl>
     */
    SmsConfigurationFailure?: string;
    /**
     * <p>Deprecated. Review error codes from API requests with
     *             <code>EventSource:cognito-idp.amazonaws.com</code> in CloudTrail for
     *             information about problems with user pool email configuration.</p>
     */
    EmailConfigurationFailure?: string;
    /**
     * <p>The domain prefix, if the user pool has a domain associated with it.</p>
     */
    Domain?: string;
    /**
     * <p>A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. An
     *             example of a custom domain name might be <code>auth.example.com</code>.</p>
     *         <p>For more information about adding a custom domain to your user pool,
     *             see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html">Using Your Own Domain for the Hosted UI</a>.</p>
     */
    CustomDomain?: string;
    /**
     * <p>The configuration for <code>AdminCreateUser</code> requests.</p>
     */
    AdminCreateUserConfig?: AdminCreateUserConfigType;
    /**
     * <p>The user pool add-ons.</p>
     */
    UserPoolAddOns?: UserPoolAddOnsType;
    /**
     * <p>Case sensitivity of the username input for the selected sign-in option. For example, when case sensitivity is set to <code>False</code>, users can sign in using either "username"
     *             or "Username". This configuration is immutable once it has been set. For more information,
     *             see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html">UsernameConfigurationType</a>.</p>
     */
    UsernameConfiguration?: UsernameConfigurationType;
    /**
     * <p>The Amazon Resource Name (ARN) for the user pool.</p>
     */
    Arn?: string;
    /**
     * <p>The available verified method a user can use to recover their password when they call <code>ForgotPassword</code>. You can use this setting to define a
     *             preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user
     *             also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method
     *             where SMS is preferred through email.</p>
     */
    AccountRecoverySetting?: AccountRecoverySettingType;
}
export declare namespace UserPoolType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: UserPoolType) => any;
}
/**
 * <p>Represents the response from the server for the request to create a user pool.</p>
 */
export interface CreateUserPoolResponse {
    /**
     * <p>A container for the user pool details.</p>
     */
    UserPool?: UserPoolType;
}
export declare namespace CreateUserPoolResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CreateUserPoolResponse) => any;
}
/**
 * <p>This exception is thrown when a user pool tag can't be set or updated.</p>
 */
export declare class UserPoolTaggingException extends __BaseException {
    readonly name: "UserPoolTaggingException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<UserPoolTaggingException, __BaseException>);
}
export declare enum OAuthFlowType {
    client_credentials = "client_credentials",
    code = "code",
    implicit = "implicit"
}
export declare enum ExplicitAuthFlowsType {
    ADMIN_NO_SRP_AUTH = "ADMIN_NO_SRP_AUTH",
    ALLOW_ADMIN_USER_PASSWORD_AUTH = "ALLOW_ADMIN_USER_PASSWORD_AUTH",
    ALLOW_CUSTOM_AUTH = "ALLOW_CUSTOM_AUTH",
    ALLOW_REFRESH_TOKEN_AUTH = "ALLOW_REFRESH_TOKEN_AUTH",
    ALLOW_USER_PASSWORD_AUTH = "ALLOW_USER_PASSWORD_AUTH",
    ALLOW_USER_SRP_AUTH = "ALLOW_USER_SRP_AUTH",
    CUSTOM_AUTH_FLOW_ONLY = "CUSTOM_AUTH_FLOW_ONLY",
    USER_PASSWORD_AUTH = "USER_PASSWORD_AUTH"
}
export declare enum PreventUserExistenceErrorTypes {
    ENABLED = "ENABLED",
    LEGACY = "LEGACY"
}
export declare enum TimeUnitsType {
    DAYS = "days",
    HOURS = "hours",
    MINUTES = "minutes",
    SECONDS = "seconds"
}
/**
 * <p>The data type for TokenValidityUnits that specifics the time measurements for token validity.</p>
 */
export interface TokenValidityUnitsType {
    /**
     * <p> A time unit in “seconds”, “minutes”, “hours”, or “days” for the value in AccessTokenValidity, defaulting to hours.</p>
     */
    AccessToken?: TimeUnitsType | string;
    /**
     * <p>A time unit in “seconds”, “minutes”, “hours”, or “days” for the value in IdTokenValidity, defaulting to hours.</p>
     */
    IdToken?: TimeUnitsType | string;
    /**
     * <p>A time unit in “seconds”, “minutes”, “hours”, or “days” for the value in RefreshTokenValidity, defaulting to days.</p>
     */
    RefreshToken?: TimeUnitsType | string;
}
export declare namespace TokenValidityUnitsType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: TokenValidityUnitsType) => any;
}
/**
 * <p>Represents the request to create a user pool client.</p>
 */
export interface CreateUserPoolClientRequest {
    /**
     * <p>The user pool ID for the user pool where you want to create a user pool client.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The client name for the user pool client you would like to create.</p>
     */
    ClientName: string | undefined;
    /**
     * <p>Boolean to specify whether you want to generate a secret for the user pool client being created.</p>
     */
    GenerateSecret?: boolean;
    /**
     * <p>The time limit, in days, after which the refresh token is no longer valid and can't be used.</p>
     */
    RefreshTokenValidity?: number;
    /**
     * <p>The time limit, between 5 minutes and 1 day, after which the access token is no longer valid and can't be used. If you supply a TokenValidityUnits value, you will override
     *             the default time unit.</p>
     */
    AccessTokenValidity?: number;
    /**
     * <p>The time limit, between 5 minutes and 1 day, after which the access token is no longer valid and can't be used. If you supply a TokenValidityUnits value, you will override
     *             the default time unit.</p>
     */
    IdTokenValidity?: number;
    /**
     * <p>The units in which the validity times are represented. Default for RefreshToken is days, and default for ID and access tokens are hours.</p>
     */
    TokenValidityUnits?: TokenValidityUnitsType;
    /**
     * <p>The read attributes.</p>
     */
    ReadAttributes?: string[];
    /**
     * <p>The user pool attributes that the app client can write to.</p>
     *         <p>If your app client allows users to sign in through an identity provider, this array
     *             must include all attributes that you have mapped to identity provider attributes. Amazon Cognito
     *             updates mapped attributes when users sign in to your application through an identity
     *             provider. If your app client does not have write access to a mapped attribute, Amazon Cognito
     *             throws an error when it tries to update the attribute. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html">Specifying Identity Provider Attribute Mappings for Your user
     *                 pool</a>.</p>
     */
    WriteAttributes?: string[];
    /**
     * <p>The authentication flows that are supported by the user pool clients. Flow names
     *             without the <code>ALLOW_</code> prefix are no longer supported, in favor of new names
     *             with the <code>ALLOW_</code> prefix.</p>
     *         <note>
     *             <p>Values with <code>ALLOW_</code> prefix must be used only along with the
     *                     <code>ALLOW_</code> prefix.</p>
     *         </note>
     *         <p>Valid values include:</p>
     *
     *         <ul>
     *             <li>
     *                 <p>
     *                   <code>ALLOW_ADMIN_USER_PASSWORD_AUTH</code>: Enable admin based user password
     *                     authentication flow <code>ADMIN_USER_PASSWORD_AUTH</code>. This setting replaces
     *                     the <code>ADMIN_NO_SRP_AUTH</code> setting. With this authentication flow, Amazon Cognito
     *                     receives the password in the request instead of using the Secure Remote Password
     *                     (SRP) protocol to verify passwords.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>ALLOW_CUSTOM_AUTH</code>: Enable Lambda trigger based
     *                     authentication.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>ALLOW_USER_PASSWORD_AUTH</code>: Enable user password-based
     *                     authentication. In this flow, Amazon Cognito receives the password in the request instead
     *                     of using the SRP protocol to verify passwords.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>ALLOW_USER_SRP_AUTH</code>: Enable SRP-based authentication.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>ALLOW_REFRESH_TOKEN_AUTH</code>: Enable authflow to refresh
     *                     tokens.</p>
     *             </li>
     *          </ul>
     */
    ExplicitAuthFlows?: (ExplicitAuthFlowsType | string)[];
    /**
     * <p>A list of provider names for the identity providers that are supported on this client. The following are supported: <code>COGNITO</code>, <code>Facebook</code>, <code>Google</code>
     *             and <code>LoginWithAmazon</code>.</p>
     */
    SupportedIdentityProviders?: string[];
    /**
     * <p>A list of allowed redirect (callback) URLs for the identity providers.</p>
     *         <p>A redirect URI must:</p>
     *          <ul>
     *             <li>
     *                <p>Be an absolute URI.</p>
     *             </li>
     *             <li>
     *                <p>Be registered with the authorization server.</p>
     *             </li>
     *             <li>
     *                <p>Not include a
     *         fragment component.</p>
     *             </li>
     *          </ul>
     *         <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 - Redirection Endpoint</a>.</p>
     *         <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p>
     *         <p>App callback URLs such as myapp://example are also supported.</p>
     */
    CallbackURLs?: string[];
    /**
     * <p>A list of allowed logout URLs for the identity providers.</p>
     */
    LogoutURLs?: string[];
    /**
     * <p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p>
     *         <p>A redirect URI must:</p>
     *          <ul>
     *             <li>
     *                <p>Be an absolute URI.</p>
     *             </li>
     *             <li>
     *                <p>Be registered with the authorization server.</p>
     *             </li>
     *             <li>
     *                <p>Not include a
     *         fragment component.</p>
     *             </li>
     *          </ul>
     *         <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 - Redirection Endpoint</a>.</p>
     *         <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p>
     *         <p>App callback URLs such as myapp://example are also supported.</p>
     */
    DefaultRedirectURI?: string;
    /**
     * <p>The allowed OAuth flows.</p>
     *         <p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p>
     *         <p>Set to <code>implicit</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>
     *         <p>Set to <code>client_credentials</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) from the token endpoint using a
     *             combination of client and client_secret.</p>
     */
    AllowedOAuthFlows?: (OAuthFlowType | string)[];
    /**
     * <p>The allowed OAuth scopes. Possible values provided by OAuth are: <code>phone</code>, <code>email</code>, <code>openid</code>, and <code>profile</code>. Possible values
     *             provided by Amazon Web Services are: <code>aws.cognito.signin.user.admin</code>. Custom scopes created in Resource Servers are also supported.</p>
     */
    AllowedOAuthScopes?: string[];
    /**
     * <p>Set to true if the client is allowed to follow the OAuth protocol when interacting with Amazon Cognito user pools.</p>
     */
    AllowedOAuthFlowsUserPoolClient?: boolean;
    /**
     * <p>The user pool analytics configuration for collecting metrics and sending them to your
     *             Amazon Pinpoint campaign.</p>
     *         <note>
     *             <p>In Amazon Web Services Regions where Amazon Pinpoint isn't available, user pools only support sending
     *                 events to Amazon Pinpoint projects in Amazon Web Services Region us-east-1. In Regions where Amazon Pinpoint is
     *                 available, user pools support sending events to Amazon Pinpoint projects within that same
     *                 Region.</p>
     *         </note>
     */
    AnalyticsConfiguration?: AnalyticsConfigurationType;
    /**
     * <p>Errors and responses that you want Amazon Cognito APIs to return during authentication, account confirmation, and password recovery when the user doesn't exist in the user
     *             pool. When set to <code>ENABLED</code> and the user doesn't exist, authentication returns an error indicating either the username or password was incorrect.
     *             Account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to <code>LEGACY</code>, those
     *             APIs return a <code>UserNotFoundException</code> exception if the user doesn't exist in the user pool.</p>
     *         <p>Valid values include:</p>
     *
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>ENABLED</code> - This prevents user existence-related errors.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>LEGACY</code> - This represents the early behavior of Amazon Cognito where user existence related errors aren't prevented.</p>
     *             </li>
     *          </ul>
     */
    PreventUserExistenceErrors?: PreventUserExistenceErrorTypes | string;
    /**
     * <p>Activates or deactivates token revocation. For more information about revoking tokens,
     *             see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken</a>.</p>
     *         <p>If you don't include this parameter, token revocation is automatically activated for the new user pool client.</p>
     */
    EnableTokenRevocation?: boolean;
}
export declare namespace CreateUserPoolClientRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CreateUserPoolClientRequest) => any;
}
/**
 * <p>Contains information about a user pool client.</p>
 */
export interface UserPoolClientType {
    /**
     * <p>The user pool ID for the user pool client.</p>
     */
    UserPoolId?: string;
    /**
     * <p>The client name from the user pool request of the client type.</p>
     */
    ClientName?: string;
    /**
     * <p>The ID of the client associated with the user pool.</p>
     */
    ClientId?: string;
    /**
     * <p>The client secret from the user pool request of the client type.</p>
     */
    ClientSecret?: string;
    /**
     * <p>The date the user pool client was last modified.</p>
     */
    LastModifiedDate?: Date;
    /**
     * <p>The date the user pool client was created.</p>
     */
    CreationDate?: Date;
    /**
     * <p>The time limit, in days, after which the refresh token is no longer valid and can't be used.</p>
     */
    RefreshTokenValidity?: number;
    /**
     * <p>The time limit, specified by tokenValidityUnits, defaulting to hours, after which the access token is no longer valid and can't be used.</p>
     */
    AccessTokenValidity?: number;
    /**
     * <p>The time limit specified by tokenValidityUnits, defaulting to hours, after which the refresh token is no longer valid and can't be used.</p>
     */
    IdTokenValidity?: number;
    /**
     * <p>The time units used to specify the token validity times of their respective token.</p>
     */
    TokenValidityUnits?: TokenValidityUnitsType;
    /**
     * <p>The Read-only attributes.</p>
     */
    ReadAttributes?: string[];
    /**
     * <p>The writeable attributes.</p>
     */
    WriteAttributes?: string[];
    /**
     * <p>The authentication flows that are supported by the user pool clients. Flow names without the <code>ALLOW_</code> prefix are no longer supported in favor of new names with the
     *             <code>ALLOW_</code> prefix. Note that values with <code>ALLOW_</code> prefix must be used only along with values including the <code>ALLOW_</code> prefix.</p>
     *         <p>Valid values include:</p>
     *
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>ALLOW_ADMIN_USER_PASSWORD_AUTH</code>: Enable admin based user password authentication flow <code>ADMIN_USER_PASSWORD_AUTH</code>. This setting replaces the
     *             <code>ADMIN_NO_SRP_AUTH</code> setting. With this authentication flow, Amazon Cognito receives the password in the request instead of using the Secure Remote Password (SRP) protocol to
     *             verify passwords.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>ALLOW_CUSTOM_AUTH</code>: Enable Lambda trigger based authentication.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>ALLOW_USER_PASSWORD_AUTH</code>: Enable user password-based authentication. In this flow, Amazon Cognito receives the password in the request instead of using the SRP
     *             protocol to verify passwords.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>ALLOW_USER_SRP_AUTH</code>: Enable SRP-based authentication.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>ALLOW_REFRESH_TOKEN_AUTH</code>: Enable authflow to refresh tokens.</p>
     *             </li>
     *          </ul>
     */
    ExplicitAuthFlows?: (ExplicitAuthFlowsType | string)[];
    /**
     * <p>A list of provider names for the identity providers that are supported on this client.</p>
     */
    SupportedIdentityProviders?: string[];
    /**
     * <p>A list of allowed redirect (callback) URLs for the identity providers.</p>
     *         <p>A redirect URI must:</p>
     *          <ul>
     *             <li>
     *                <p>Be an absolute URI.</p>
     *             </li>
     *             <li>
     *                <p>Be registered with the authorization server.</p>
     *             </li>
     *             <li>
     *                <p>Not include a
     *         fragment component.</p>
     *             </li>
     *          </ul>
     *         <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 - Redirection Endpoint</a>.</p>
     *         <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p>
     *         <p>App callback URLs such as myapp://example are also supported.</p>
     */
    CallbackURLs?: string[];
    /**
     * <p>A list of allowed logout URLs for the identity providers.</p>
     */
    LogoutURLs?: string[];
    /**
     * <p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p>
     *         <p>A redirect URI must:</p>
     *          <ul>
     *             <li>
     *                <p>Be an absolute URI.</p>
     *             </li>
     *             <li>
     *                <p>Be registered with the authorization server.</p>
     *             </li>
     *             <li>
     *                <p>Not include a
     *         fragment component.</p>
     *             </li>
     *          </ul>
     *         <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 - Redirection Endpoint</a>.</p>
     *         <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p>
     *         <p>App callback URLs such as myapp://example are also supported.</p>
     */
    DefaultRedirectURI?: string;
    /**
     * <p>The allowed OAuth flows.</p>
     *         <p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p>
     *         <p>Set to <code>implicit</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>
     *         <p>Set to <code>client_credentials</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) from the token endpoint using a combination
     *             of client and client_secret.</p>
     */
    AllowedOAuthFlows?: (OAuthFlowType | string)[];
    /**
     * <p>The allowed OAuth scopes. Possible values provided by OAuth are:
     *             <code>phone</code>, <code>email</code>, <code>openid</code>, and <code>profile</code>. Possible values provided by Amazon Web Services are: <code>aws.cognito.signin.user.admin</code>.
     *             Custom scopes created in Resource Servers are also supported.</p>
     */
    AllowedOAuthScopes?: string[];
    /**
     * <p>Set to true if the client is allowed to follow the OAuth protocol when interacting with Amazon Cognito user pools.</p>
     */
    AllowedOAuthFlowsUserPoolClient?: boolean;
    /**
     * <p>The Amazon Pinpoint analytics configuration for the user pool client.</p>
     *          <note>
     *             <p>Amazon Cognito user pools only support sending events to Amazon Pinpoint projects in the US East (N.
     *                 Virginia) us-east-1 Region, regardless of the Region where the user pool
     *                 resides.</p>
     *          </note>
     */
    AnalyticsConfiguration?: AnalyticsConfigurationType;
    /**
     * <p>Errors and responses that you want Amazon Cognito APIs to return during authentication, account confirmation, and password recovery when the user doesn't exist
     *             in the user pool. When set to <code>ENABLED</code> and the user doesn't exist, authentication returns an error indicating either the username or password
     *             was incorrect. Account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to
     *             <code>LEGACY</code>, those APIs return a <code>UserNotFoundException</code> exception if the user doesn't exist in the user pool.</p>
     *         <p>Valid values include:</p>
     *
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>ENABLED</code> - This prevents user existence-related errors.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>LEGACY</code> - This
     *         represents the old behavior of Cognito where user existence related errors aren't prevented.</p>
     *             </li>
     *          </ul>
     */
    PreventUserExistenceErrors?: PreventUserExistenceErrorTypes | string;
    /**
     * <p>Indicates whether token revocation is activated for the user pool client. When you create a new user pool client, token revocation is activated by default. For more information about
     *             revoking tokens, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken</a>.</p>
     */
    EnableTokenRevocation?: boolean;
}
export declare namespace UserPoolClientType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: UserPoolClientType) => any;
}
/**
 * <p>Represents the response from the server to create a user pool client.</p>
 */
export interface CreateUserPoolClientResponse {
    /**
     * <p>The user pool client that was just created.</p>
     */
    UserPoolClient?: UserPoolClientType;
}
export declare namespace CreateUserPoolClientResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CreateUserPoolClientResponse) => any;
}
/**
 * <p>This exception is thrown when the specified OAuth flow is not valid.</p>
 */
export declare class InvalidOAuthFlowException extends __BaseException {
    readonly name: "InvalidOAuthFlowException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InvalidOAuthFlowException, __BaseException>);
}
/**
 * <p>This exception is thrown when the specified scope doesn't exist.</p>
 */
export declare class ScopeDoesNotExistException extends __BaseException {
    readonly name: "ScopeDoesNotExistException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ScopeDoesNotExistException, __BaseException>);
}
/**
 * <p>The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.</p>
 */
export interface CustomDomainConfigType {
    /**
     * <p>The Amazon Resource Name (ARN) of an Certificate Manager SSL certificate. You use
     *             this certificate for the subdomain of your custom domain.</p>
     */
    CertificateArn: string | undefined;
}
export declare namespace CustomDomainConfigType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CustomDomainConfigType) => any;
}
export interface CreateUserPoolDomainRequest {
    /**
     * <p>The domain string. For custom domains, this is the fully-qualified domain name, such as <code>auth.example.com</code>. For Amazon Cognito prefix domains, this is the prefix alone,
     *             such as <code>auth</code>.</p>
     */
    Domain: string | undefined;
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.</p>
     *         <p>Provide this parameter only if you want to use a custom domain for your user pool. Otherwise, you can exclude this parameter and use the Amazon Cognito hosted domain instead.</p>
     *         <p>For more information about the hosted domain and custom domains,
     *             see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-assign-domain.html">Configuring a User Pool Domain</a>.</p>
     */
    CustomDomainConfig?: CustomDomainConfigType;
}
export declare namespace CreateUserPoolDomainRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CreateUserPoolDomainRequest) => any;
}
export interface CreateUserPoolDomainResponse {
    /**
     * <p>The Amazon CloudFront endpoint that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.</p>
     */
    CloudFrontDomain?: string;
}
export declare namespace CreateUserPoolDomainResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CreateUserPoolDomainResponse) => any;
}
export interface DeleteGroupRequest {
    /**
     * <p>The name of the group.</p>
     */
    GroupName: string | undefined;
    /**
     * <p>The user pool ID for the user pool.</p>
     */
    UserPoolId: string | undefined;
}
export declare namespace DeleteGroupRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DeleteGroupRequest) => any;
}
export interface DeleteIdentityProviderRequest {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The identity provider name.</p>
     */
    ProviderName: string | undefined;
}
export declare namespace DeleteIdentityProviderRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DeleteIdentityProviderRequest) => any;
}
/**
 * <p>This exception is thrown when the specified identifier isn't supported.</p>
 */
export declare class UnsupportedIdentityProviderException extends __BaseException {
    readonly name: "UnsupportedIdentityProviderException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<UnsupportedIdentityProviderException, __BaseException>);
}
export interface DeleteResourceServerRequest {
    /**
     * <p>The user pool ID for the user pool that hosts the resource server.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The identifier for the resource server.</p>
     */
    Identifier: string | undefined;
}
export declare namespace DeleteResourceServerRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DeleteResourceServerRequest) => any;
}
/**
 * <p>Represents the request to delete a user.</p>
 */
export interface DeleteUserRequest {
    /**
     * <p>The access token from a request to delete a user.</p>
     */
    AccessToken: string | undefined;
}
export declare namespace DeleteUserRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DeleteUserRequest) => any;
}
/**
 * <p>Represents the request to delete user attributes.</p>
 */
export interface DeleteUserAttributesRequest {
    /**
     * <p>An array of strings representing the user attribute names you want to delete.</p>
     *         <p>For custom attributes, you must prependattach the <code>custom:</code> prefix to the front of the attribute name.</p>
     */
    UserAttributeNames: string[] | undefined;
    /**
     * <p>The access token used in the request to delete user attributes.</p>
     */
    AccessToken: string | undefined;
}
export declare namespace DeleteUserAttributesRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DeleteUserAttributesRequest) => any;
}
/**
 * <p>Represents the response from the server to delete user attributes.</p>
 */
export interface DeleteUserAttributesResponse {
}
export declare namespace DeleteUserAttributesResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DeleteUserAttributesResponse) => any;
}
/**
 * <p>Represents the request to delete a user pool.</p>
 */
export interface DeleteUserPoolRequest {
    /**
     * <p>The user pool ID for the user pool you want to delete.</p>
     */
    UserPoolId: string | undefined;
}
export declare namespace DeleteUserPoolRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DeleteUserPoolRequest) => any;
}
/**
 * <p>Represents the request to delete a user pool client.</p>
 */
export interface DeleteUserPoolClientRequest {
    /**
     * <p>The user pool ID for the user pool where you want to delete the client.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The app client ID of the app associated with the user pool.</p>
     */
    ClientId: string | undefined;
}
export declare namespace DeleteUserPoolClientRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DeleteUserPoolClientRequest) => any;
}
export interface DeleteUserPoolDomainRequest {
    /**
     * <p>The domain string. For custom domains, this is the fully-qualified domain name, such as <code>auth.example.com</code>. For Amazon Cognito prefix domains, this is the prefix alone,
     *             such as <code>auth</code>.</p>
     */
    Domain: string | undefined;
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
}
export declare namespace DeleteUserPoolDomainRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DeleteUserPoolDomainRequest) => any;
}
export interface DeleteUserPoolDomainResponse {
}
export declare namespace DeleteUserPoolDomainResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DeleteUserPoolDomainResponse) => any;
}
export interface DescribeIdentityProviderRequest {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The identity provider name.</p>
     */
    ProviderName: string | undefined;
}
export declare namespace DescribeIdentityProviderRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DescribeIdentityProviderRequest) => any;
}
export interface DescribeIdentityProviderResponse {
    /**
     * <p>The identity provider that was deleted.</p>
     */
    IdentityProvider: IdentityProviderType | undefined;
}
export declare namespace DescribeIdentityProviderResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DescribeIdentityProviderResponse) => any;
}
export interface DescribeResourceServerRequest {
    /**
     * <p>The user pool ID for the user pool that hosts the resource server.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The identifier for the resource server</p>
     */
    Identifier: string | undefined;
}
export declare namespace DescribeResourceServerRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DescribeResourceServerRequest) => any;
}
export interface DescribeResourceServerResponse {
    /**
     * <p>The resource server.</p>
     */
    ResourceServer: ResourceServerType | undefined;
}
export declare namespace DescribeResourceServerResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DescribeResourceServerResponse) => any;
}
export interface DescribeRiskConfigurationRequest {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The app client ID.</p>
     */
    ClientId?: string;
}
export declare namespace DescribeRiskConfigurationRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DescribeRiskConfigurationRequest) => any;
}
export declare enum CompromisedCredentialsEventActionType {
    BLOCK = "BLOCK",
    NO_ACTION = "NO_ACTION"
}
/**
 * <p>The compromised credentials actions type.</p>
 */
export interface CompromisedCredentialsActionsType {
    /**
     * <p>The event action.</p>
     */
    EventAction: CompromisedCredentialsEventActionType | string | undefined;
}
export declare namespace CompromisedCredentialsActionsType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CompromisedCredentialsActionsType) => any;
}
export declare enum EventFilterType {
    PASSWORD_CHANGE = "PASSWORD_CHANGE",
    SIGN_IN = "SIGN_IN",
    SIGN_UP = "SIGN_UP"
}
/**
 * <p>The compromised credentials risk configuration type.</p>
 */
export interface CompromisedCredentialsRiskConfigurationType {
    /**
     * <p>Perform the action for these events. The default is to perform all events if no event filter is specified.</p>
     */
    EventFilter?: (EventFilterType | string)[];
    /**
     * <p>The compromised credentials risk configuration actions.</p>
     */
    Actions: CompromisedCredentialsActionsType | undefined;
}
export declare namespace CompromisedCredentialsRiskConfigurationType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CompromisedCredentialsRiskConfigurationType) => any;
}
/**
 * <p>The type of the configuration to override the risk decision.</p>
 */
export interface RiskExceptionConfigurationType {
    /**
     * <p>Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation, a compact representation of an IP address and its routing prefix.</p>
     */
    BlockedIPRangeList?: string[];
    /**
     * <p>Risk detection isn't performed on the IP addresses in this range list. The IP range is in CIDR notation.</p>
     */
    SkippedIPRangeList?: string[];
}
export declare namespace RiskExceptionConfigurationType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: RiskExceptionConfigurationType) => any;
}
/**
 * <p>The risk configuration type.</p>
 */
export interface RiskConfigurationType {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId?: string;
    /**
     * <p>The app client ID.</p>
     */
    ClientId?: string;
    /**
     * <p>The compromised credentials risk configuration object, including the <code>EventFilter</code> and the <code>EventAction</code>.</p>
     */
    CompromisedCredentialsRiskConfiguration?: CompromisedCredentialsRiskConfigurationType;
    /**
     * <p>The account takeover risk configuration object, including the <code>NotifyConfiguration</code> object and <code>Actions</code> to take if there is an account takeover.</p>
     */
    AccountTakeoverRiskConfiguration?: AccountTakeoverRiskConfigurationType;
    /**
     * <p>The configuration to override the risk decision.</p>
     */
    RiskExceptionConfiguration?: RiskExceptionConfigurationType;
    /**
     * <p>The last modified date.</p>
     */
    LastModifiedDate?: Date;
}
export declare namespace RiskConfigurationType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: RiskConfigurationType) => any;
}
export interface DescribeRiskConfigurationResponse {
    /**
     * <p>The risk configuration.</p>
     */
    RiskConfiguration: RiskConfigurationType | undefined;
}
export declare namespace DescribeRiskConfigurationResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DescribeRiskConfigurationResponse) => any;
}
/**
 * <p>Represents the request to describe the user import job.</p>
 */
export interface DescribeUserImportJobRequest {
    /**
     * <p>The user pool ID for the user pool that the users are being imported into.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The job ID for the user import job.</p>
     */
    JobId: string | undefined;
}
export declare namespace DescribeUserImportJobRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DescribeUserImportJobRequest) => any;
}
/**
 * <p>Represents the response from the server to the request to describe the user import job.</p>
 */
export interface DescribeUserImportJobResponse {
    /**
     * <p>The job object that represents the user import job.</p>
     */
    UserImportJob?: UserImportJobType;
}
export declare namespace DescribeUserImportJobResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DescribeUserImportJobResponse) => any;
}
/**
 * <p>Represents the request to describe the user pool.</p>
 */
export interface DescribeUserPoolRequest {
    /**
     * <p>The user pool ID for the user pool you want to describe.</p>
     */
    UserPoolId: string | undefined;
}
export declare namespace DescribeUserPoolRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DescribeUserPoolRequest) => any;
}
/**
 * <p>Represents the response to describe the user pool.</p>
 */
export interface DescribeUserPoolResponse {
    /**
     * <p>The container of metadata returned by the server to describe the pool.</p>
     */
    UserPool?: UserPoolType;
}
export declare namespace DescribeUserPoolResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DescribeUserPoolResponse) => any;
}
/**
 * <p>Represents the request to describe a user pool client.</p>
 */
export interface DescribeUserPoolClientRequest {
    /**
     * <p>The user pool ID for the user pool you want to describe.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The app client ID of the app associated with the user pool.</p>
     */
    ClientId: string | undefined;
}
export declare namespace DescribeUserPoolClientRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DescribeUserPoolClientRequest) => any;
}
/**
 * <p>Represents the response from the server from a request to describe the user pool client.</p>
 */
export interface DescribeUserPoolClientResponse {
    /**
     * <p>The user pool client from a server response to describe the user pool client.</p>
     */
    UserPoolClient?: UserPoolClientType;
}
export declare namespace DescribeUserPoolClientResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DescribeUserPoolClientResponse) => any;
}
export interface DescribeUserPoolDomainRequest {
    /**
     * <p>The domain string. For custom domains, this is the fully-qualified domain name, such as <code>auth.example.com</code>. For Amazon Cognito prefix domains, this is the prefix alone,
     *             such as <code>auth</code>.</p>
     */
    Domain: string | undefined;
}
export declare namespace DescribeUserPoolDomainRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DescribeUserPoolDomainRequest) => any;
}
export declare enum DomainStatusType {
    ACTIVE = "ACTIVE",
    CREATING = "CREATING",
    DELETING = "DELETING",
    FAILED = "FAILED",
    UPDATING = "UPDATING"
}
/**
 * <p>A container for information about a domain.</p>
 */
export interface DomainDescriptionType {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId?: string;
    /**
     * <p>The Amazon Web Services ID for the user pool owner.</p>
     */
    AWSAccountId?: string;
    /**
     * <p>The domain string. For custom domains, this is the fully-qualified domain name, such as <code>auth.example.com</code>. For Amazon Cognito prefix domains, this is the prefix alone, such as <code>auth</code>.</p>
     */
    Domain?: string;
    /**
     * <p>The Amazon S3 bucket where the static files for this domain are stored.</p>
     */
    S3Bucket?: string;
    /**
     * <p>The Amazon Resource Name (ARN) of the Amazon CloudFront distribution.</p>
     */
    CloudFrontDistribution?: string;
    /**
     * <p>The app version.</p>
     */
    Version?: string;
    /**
     * <p>The domain status.</p>
     */
    Status?: DomainStatusType | string;
    /**
     * <p>The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.</p>
     */
    CustomDomainConfig?: CustomDomainConfigType;
}
export declare namespace DomainDescriptionType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DomainDescriptionType) => any;
}
export interface DescribeUserPoolDomainResponse {
    /**
     * <p>A domain description object containing information about the domain.</p>
     */
    DomainDescription?: DomainDescriptionType;
}
export declare namespace DescribeUserPoolDomainResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: DescribeUserPoolDomainResponse) => any;
}
/**
 * <p>Represents the request to forget the device.</p>
 */
export interface ForgetDeviceRequest {
    /**
     * <p>The access token for the forgotten device request.</p>
     */
    AccessToken?: string;
    /**
     * <p>The device key.</p>
     */
    DeviceKey: string | undefined;
}
export declare namespace ForgetDeviceRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ForgetDeviceRequest) => any;
}
/**
 * <p>Represents the request to reset a user's password.</p>
 */
export interface ForgotPasswordRequest {
    /**
     * <p>The ID of the client associated with the user pool.</p>
     */
    ClientId: string | undefined;
    /**
     * <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.</p>
     */
    SecretHash?: string;
    /**
     * <p>Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.</p>
     */
    UserContextData?: UserContextDataType;
    /**
     * <p>The user name of the user for whom you want to enter a code to reset a forgotten password.</p>
     */
    Username: string | undefined;
    /**
     * <p>The Amazon Pinpoint analytics metadata for collecting metrics for <code>ForgotPassword</code>
     *             calls.</p>
     */
    AnalyticsMetadata?: AnalyticsMetadataType;
    /**
     * <p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers.</p>
     *         <p>You create custom workflows by assigning Lambda functions to user pool
     *             triggers. When you use the ForgotPassword API action, Amazon Cognito invokes any
     *             functions that are assigned to the following triggers: <i>pre sign-up</i>,
     *                 <i>custom message</i>, and <i>user migration</i>. When
     *             Amazon Cognito invokes any of these functions, it passes a JSON payload, which the
     *             function receives as input. This payload contains a <code>clientMetadata</code>
     *             attribute, which provides the data that you assigned to the ClientMetadata parameter in
     *             your ForgotPassword request. In your function code in Lambda, you can
     *             process the <code>clientMetadata</code> value to enhance your workflow for your specific
     *             needs.</p>
     *
     *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
     * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
     *
     *          <note>
     *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
     *             <ul>
     *                <li>
     *                   <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool
     *                 configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.</p>
     *                </li>
     *                <li>
     *                   <p>Validate the ClientMetadata value.</p>
     *                </li>
     *                <li>
     *                   <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p>
     *                </li>
     *             </ul>
     *          </note>
     */
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace ForgotPasswordRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ForgotPasswordRequest) => any;
}
/**
 * <p>The code delivery details being returned from the server.</p>
 */
export interface CodeDeliveryDetailsType {
    /**
     * <p>The destination for the code delivery details.</p>
     */
    Destination?: string;
    /**
     * <p>The delivery medium (email message or phone number).</p>
     */
    DeliveryMedium?: DeliveryMediumType | string;
    /**
     * <p>The attribute name.</p>
     */
    AttributeName?: string;
}
export declare namespace CodeDeliveryDetailsType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: CodeDeliveryDetailsType) => any;
}
/**
 * <p>Respresents the response from the server regarding the request to reset a password.</p>
 */
export interface ForgotPasswordResponse {
    /**
     * <p>The code delivery details returned by the server in response to the request to reset a password.</p>
     */
    CodeDeliveryDetails?: CodeDeliveryDetailsType;
}
export declare namespace ForgotPasswordResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ForgotPasswordResponse) => any;
}
/**
 * <p>Represents the request to get the header information of the CSV file for the user import job.</p>
 */
export interface GetCSVHeaderRequest {
    /**
     * <p>The user pool ID for the user pool that the users are to be imported into.</p>
     */
    UserPoolId: string | undefined;
}
export declare namespace GetCSVHeaderRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetCSVHeaderRequest) => any;
}
/**
 * <p>Represents the response from the server to the request to get the header information of the CSV file for the user import job.</p>
 */
export interface GetCSVHeaderResponse {
    /**
     * <p>The user pool ID for the user pool that the users are to be imported
     *     into.</p>
     */
    UserPoolId?: string;
    /**
     * <p>The header information of the CSV file for the user import job.</p>
     */
    CSVHeader?: string[];
}
export declare namespace GetCSVHeaderResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetCSVHeaderResponse) => any;
}
/**
 * <p>Represents the request to get the device.</p>
 */
export interface GetDeviceRequest {
    /**
     * <p>The device key.</p>
     */
    DeviceKey: string | undefined;
    /**
     * <p>The access token.</p>
     */
    AccessToken?: string;
}
export declare namespace GetDeviceRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetDeviceRequest) => any;
}
/**
 * <p>Gets the device response.</p>
 */
export interface GetDeviceResponse {
    /**
     * <p>The device.</p>
     */
    Device: DeviceType | undefined;
}
export declare namespace GetDeviceResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetDeviceResponse) => any;
}
export interface GetGroupRequest {
    /**
     * <p>The name of the group.</p>
     */
    GroupName: string | undefined;
    /**
     * <p>The user pool ID for the user pool.</p>
     */
    UserPoolId: string | undefined;
}
export declare namespace GetGroupRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetGroupRequest) => any;
}
export interface GetGroupResponse {
    /**
     * <p>The group object for the group.</p>
     */
    Group?: GroupType;
}
export declare namespace GetGroupResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetGroupResponse) => any;
}
export interface GetIdentityProviderByIdentifierRequest {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The identity provider ID.</p>
     */
    IdpIdentifier: string | undefined;
}
export declare namespace GetIdentityProviderByIdentifierRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetIdentityProviderByIdentifierRequest) => any;
}
export interface GetIdentityProviderByIdentifierResponse {
    /**
     * <p>The identity provider object.</p>
     */
    IdentityProvider: IdentityProviderType | undefined;
}
export declare namespace GetIdentityProviderByIdentifierResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetIdentityProviderByIdentifierResponse) => any;
}
/**
 * <p>Request to get a signing certificate from Amazon Cognito.</p>
 */
export interface GetSigningCertificateRequest {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
}
export declare namespace GetSigningCertificateRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetSigningCertificateRequest) => any;
}
/**
 * <p>Response from Amazon Cognito for a signing certificate request.</p>
 */
export interface GetSigningCertificateResponse {
    /**
     * <p>The signing certificate.</p>
     */
    Certificate?: string;
}
export declare namespace GetSigningCertificateResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetSigningCertificateResponse) => any;
}
export interface GetUICustomizationRequest {
    /**
     * <p>The user pool ID for the user pool.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The client ID for the client app.</p>
     */
    ClientId?: string;
}
export declare namespace GetUICustomizationRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetUICustomizationRequest) => any;
}
/**
 * <p>A container for the UI customization information for a user pool's built-in app UI.</p>
 */
export interface UICustomizationType {
    /**
     * <p>The user pool ID for the user pool.</p>
     */
    UserPoolId?: string;
    /**
     * <p>The client ID for the client app.</p>
     */
    ClientId?: string;
    /**
     * <p>The logo image for the UI customization.</p>
     */
    ImageUrl?: string;
    /**
     * <p>The CSS values in the UI customization.</p>
     */
    CSS?: string;
    /**
     * <p>The CSS version number.</p>
     */
    CSSVersion?: string;
    /**
     * <p>The last-modified date for the UI customization.</p>
     */
    LastModifiedDate?: Date;
    /**
     * <p>The creation date for the UI customization.</p>
     */
    CreationDate?: Date;
}
export declare namespace UICustomizationType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: UICustomizationType) => any;
}
export interface GetUICustomizationResponse {
    /**
     * <p>The UI customization information.</p>
     */
    UICustomization: UICustomizationType | undefined;
}
export declare namespace GetUICustomizationResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetUICustomizationResponse) => any;
}
/**
 * <p>Represents the request to get information about the user.</p>
 */
export interface GetUserRequest {
    /**
     * <p>The access token returned by the server response to get information about the user.</p>
     */
    AccessToken: string | undefined;
}
export declare namespace GetUserRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetUserRequest) => any;
}
/**
 * <p>Represents the response from the server from the request to get information about the user.</p>
 */
export interface GetUserResponse {
    /**
     * <p>The user name of the user you want to retrieve from the get user request.</p>
     */
    Username: string | undefined;
    /**
     * <p>An array of name-value pairs representing user attributes.</p>
     *         <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>
     */
    UserAttributes: AttributeType[] | undefined;
    /**
     * <p>
     *             <i>This response parameter is no longer supported.</i> It provides information only about SMS MFA configurations. It doesn't provide information about time-based one-time
     *             password (TOTP) software token MFA configurations. To look up information about either type of MFA configuration, use UserMFASettingList instead.</p>
     */
    MFAOptions?: MFAOptionType[];
    /**
     * <p>The user's preferred MFA setting.</p>
     */
    PreferredMfaSetting?: string;
    /**
     * <p>The MFA options that are activated for the user. The possible values in this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.</p>
     */
    UserMFASettingList?: string[];
}
export declare namespace GetUserResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetUserResponse) => any;
}
/**
 * <p>Represents the request to get user attribute verification.</p>
 */
export interface GetUserAttributeVerificationCodeRequest {
    /**
     * <p>The access token returned by the server response to get the user attribute verification code.</p>
     */
    AccessToken: string | undefined;
    /**
     * <p>The attribute name returned by the server response to get the user attribute verification code.</p>
     */
    AttributeName: string | undefined;
    /**
     * <p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers.</p>
     *
     *         <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the GetUserAttributeVerificationCode
     *             API action, Amazon Cognito invokes the function that is assigned to the <i>custom message</i> trigger. When Amazon Cognito invokes this function, it
     *             passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data
     *             that you assigned to the ClientMetadata parameter in your GetUserAttributeVerificationCode request. In your function code in Lambda,
     *             you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p>
     *
     *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
     * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
     *
     *          <note>
     *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
     *             <ul>
     *                <li>
     *                   <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool
     *                 configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.</p>
     *                </li>
     *                <li>
     *                   <p>Validate the ClientMetadata value.</p>
     *                </li>
     *                <li>
     *                   <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p>
     *                </li>
     *             </ul>
     *          </note>
     */
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace GetUserAttributeVerificationCodeRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetUserAttributeVerificationCodeRequest) => any;
}
/**
 * <p>The verification code response returned by the server response to get the user attribute verification code.</p>
 */
export interface GetUserAttributeVerificationCodeResponse {
    /**
     * <p>The code delivery details returned by the server in response to the request to get the user attribute verification code.</p>
     */
    CodeDeliveryDetails?: CodeDeliveryDetailsType;
}
export declare namespace GetUserAttributeVerificationCodeResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetUserAttributeVerificationCodeResponse) => any;
}
export interface GetUserPoolMfaConfigRequest {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
}
export declare namespace GetUserPoolMfaConfigRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetUserPoolMfaConfigRequest) => any;
}
/**
 * <p>The SMS text message multi-factor authentication (MFA) configuration type.</p>
 */
export interface SmsMfaConfigType {
    /**
     * <p>The SMS authentication message that will be sent to users with the code they must sign in. The message must contain the ‘{####}’ placeholder, which is replaced with the code.
     *             If the message isn't included, and default message will be used.</p>
     */
    SmsAuthenticationMessage?: string;
    /**
     * <p>The SMS configuration with the settings that your Amazon Cognito user pool must use to send an
     *             SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To request Amazon SNS in
     *             the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role that
     *             you provide for your Amazon Web Services account.</p>
     */
    SmsConfiguration?: SmsConfigurationType;
}
export declare namespace SmsMfaConfigType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SmsMfaConfigType) => any;
}
/**
 * <p>The type used for enabling software token MFA at the user pool level.</p>
 */
export interface SoftwareTokenMfaConfigType {
    /**
     * <p>Specifies whether software token MFA is activated.</p>
     */
    Enabled?: boolean;
}
export declare namespace SoftwareTokenMfaConfigType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SoftwareTokenMfaConfigType) => any;
}
export interface GetUserPoolMfaConfigResponse {
    /**
     * <p>The SMS text message multi-factor (MFA) configuration.</p>
     */
    SmsMfaConfiguration?: SmsMfaConfigType;
    /**
     * <p>The software token multi-factor (MFA) configuration.</p>
     */
    SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType;
    /**
     * <p>The multi-factor (MFA) configuration. Valid values include:</p>
     *
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>OFF</code> MFA won't be used for any users.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>ON</code> MFA is required for all users to sign in.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>OPTIONAL</code> MFA will be required only for individual users who have an MFA factor activated.</p>
     *             </li>
     *          </ul>
     */
    MfaConfiguration?: UserPoolMfaType | string;
}
export declare namespace GetUserPoolMfaConfigResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GetUserPoolMfaConfigResponse) => any;
}
/**
 * <p>Represents the request to sign out all devices.</p>
 */
export interface GlobalSignOutRequest {
    /**
     * <p>The access token.</p>
     */
    AccessToken: string | undefined;
}
export declare namespace GlobalSignOutRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GlobalSignOutRequest) => any;
}
/**
 * <p>The response to the request to sign out all devices.</p>
 */
export interface GlobalSignOutResponse {
}
export declare namespace GlobalSignOutResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: GlobalSignOutResponse) => any;
}
/**
 * <p>Initiates the authentication request.</p>
 */
export interface InitiateAuthRequest {
    /**
     * <p>The authentication flow for this call to run. The API action will depend on this value. For example:</p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>REFRESH_TOKEN_AUTH</code> takes in a valid refresh token and returns new tokens.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>USER_SRP_AUTH</code> takes in <code>USERNAME</code> and <code>SRP_A</code> and returns the SRP variables to be used for next challenge execution.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>USER_PASSWORD_AUTH</code> takes in <code>USERNAME</code> and <code>PASSWORD</code> and returns the next challenge or tokens.</p>
     *             </li>
     *          </ul>
     *         <p>Valid values include:</p>
     *
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote Password (SRP) protocol.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>CUSTOM_AUTH</code>: Custom authentication flow.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>USER_PASSWORD_AUTH</code>: Non-SRP authentication flow; USERNAME and PASSWORD are passed directly. If a user migration Lambda trigger is set, this flow will invoke the user migration
     *             Lambda if it doesn't find the USERNAME in the user pool. </p>
     *             </li>
     *          </ul>
     *         <p>
     *             <code>ADMIN_NO_SRP_AUTH</code> isn't a valid value.</p>
     */
    AuthFlow: AuthFlowType | string | undefined;
    /**
     * <p>The authentication parameters. These are inputs corresponding to the <code>AuthFlow</code> that you're invoking. The required values depend on the value of <code>AuthFlow</code>:</p>
     *
     *          <ul>
     *             <li>
     *                <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret),
     *             <code>DEVICE_KEY</code>.</p>
     *             </li>
     *             <li>
     *                <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>: <code>REFRESH_TOKEN</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret),
     *             <code>DEVICE_KEY</code>.</p>
     *             </li>
     *             <li>
     *                <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>DEVICE_KEY</code>. To start the
     *             authentication flow with password verification, include <code>ChallengeName: SRP_A</code> and <code>SRP_A: (The SRP_A Value)</code>.</p>
     *             </li>
     *          </ul>
     */
    AuthParameters?: {
        [key: string]: string;
    };
    /**
     * <p>A map of custom key-value pairs that you can provide as input for certain custom workflows that this action triggers.</p>
     *         <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the InitiateAuth API action, Amazon Cognito invokes the Lambda functions that are specified for various
     *             triggers. The ClientMetadata value is passed as input to the functions for only the following triggers:</p>
     *          <ul>
     *             <li>
     *                <p>Pre signup</p>
     *             </li>
     *             <li>
     *                <p>Pre authentication</p>
     *             </li>
     *             <li>
     *                <p>User migration</p>
     *             </li>
     *          </ul>
     *         <p>When Amazon Cognito invokes the functions for these triggers, it passes a JSON payload, which
     *             the function receives as input. This payload contains a <code>validationData</code>
     *             attribute, which provides the data that you assigned to the ClientMetadata parameter in
     *             your InitiateAuth request. In your function code in Lambda, you can process the
     *                 <code>validationData</code> value to enhance your workflow for your specific
     *             needs.</p>
     *         <p>When you use the InitiateAuth API action, Amazon Cognito also invokes the functions for the following triggers, but it doesn't provide the ClientMetadata value as input:</p>
     *          <ul>
     *             <li>
     *                <p>Post authentication</p>
     *             </li>
     *             <li>
     *                <p>Custom message</p>
     *             </li>
     *             <li>
     *                <p>Pre token generation</p>
     *             </li>
     *             <li>
     *                <p>Create auth challenge</p>
     *             </li>
     *             <li>
     *                <p>Define auth challenge</p>
     *             </li>
     *             <li>
     *                <p>Verify auth challenge</p>
     *             </li>
     *          </ul>
     *
     *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
     * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
     *
     *
     *         <note>
     *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
     *             <ul>
     *                <li>
     *                   <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration
     *                     doesn't include triggers, the ClientMetadata parameter serves no purpose.</p>
     *                </li>
     *                <li>
     *                   <p>Validate the ClientMetadata value.</p>
     *                </li>
     *                <li>
     *                   <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p>
     *                </li>
     *             </ul>
     *         </note>
     */
    ClientMetadata?: {
        [key: string]: string;
    };
    /**
     * <p>The app client ID.</p>
     */
    ClientId: string | undefined;
    /**
     * <p>The Amazon Pinpoint analytics metadata for collecting metrics for <code>InitiateAuth</code> calls.</p>
     */
    AnalyticsMetadata?: AnalyticsMetadataType;
    /**
     * <p>Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.</p>
     */
    UserContextData?: UserContextDataType;
}
export declare namespace InitiateAuthRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: InitiateAuthRequest) => any;
}
/**
 * <p>Initiates the authentication response.</p>
 */
export interface InitiateAuthResponse {
    /**
     * <p>The name of the challenge that you're responding to with this call. This name is
     *             returned in the <code>AdminInitiateAuth</code> response if you must pass another
     *             challenge.</p>
     *         <p>Valid values include the following:</p>
     *         <note>
     *             <p>All of the following challenges require <code>USERNAME</code> and
     *                     <code>SECRET_HASH</code> (if applicable) in the parameters.</p>
     *         </note>
     *
     *         <ul>
     *             <li>
     *                 <p>
     *                   <code>SMS_MFA</code>: Next challenge is to supply an
     *                     <code>SMS_MFA_CODE</code>, delivered via SMS.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>PASSWORD_VERIFIER</code>: Next challenge is to supply
     *                         <code>PASSWORD_CLAIM_SIGNATURE</code>,
     *                         <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after
     *                     the client-side SRP calculations.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>CUSTOM_CHALLENGE</code>: This is returned if your custom authentication
     *                     flow determines that the user should pass another challenge before tokens are
     *                     issued.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>DEVICE_SRP_AUTH</code>: If device tracking was activated on your user
     *                     pool and the previous challenges were passed, this challenge is returned so that
     *                     Amazon Cognito can start tracking this device.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to
     *                         <code>PASSWORD_VERIFIER</code>, but for devices only.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>NEW_PASSWORD_REQUIRED</code>: For users who are required to change their
     *                     passwords after successful first login. This challenge should be passed with
     *                         <code>NEW_PASSWORD</code> and any other required attributes.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>MFA_SETUP</code>: For users who are required to setup an MFA factor
     *                     before they can sign in. The MFA types activated for the user pool will be
     *                     listed in the challenge parameters <code>MFA_CAN_SETUP</code> value. </p>
     *                 <p> To set up software token MFA, use the session returned here from
     *                         <code>InitiateAuth</code> as an input to
     *                     <code>AssociateSoftwareToken</code>. Use the session returned by
     *                         <code>VerifySoftwareToken</code> as an input to
     *                         <code>RespondToAuthChallenge</code> with challenge name
     *                         <code>MFA_SETUP</code> to complete sign-in. To set up SMS MFA, an
     *                     administrator should help the user to add a phone number to their account, and
     *                     then the user should call <code>InitiateAuth</code> again to restart
     *                     sign-in.</p>
     *             </li>
     *          </ul>
     */
    ChallengeName?: ChallengeNameType | string;
    /**
     * <p>The session that should pass both ways in challenge-response calls to the service. If the caller must pass another challenge, they return a session with other challenge parameters. This session
     *             should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.</p>
     */
    Session?: string;
    /**
     * <p>The challenge parameters. These are returned in the <code>InitiateAuth</code> response if you must pass another challenge. The responses in this parameter should be used to compute inputs to
     *             the next call (<code>RespondToAuthChallenge</code>). </p>
     *         <p>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable).</p>
     */
    ChallengeParameters?: {
        [key: string]: string;
    };
    /**
     * <p>The result of the authentication response. This result is only returned if the caller doesn't need to pass another challenge. If the caller does need to pass another challenge before it gets
     *             tokens, <code>ChallengeName</code>, <code>ChallengeParameters</code>, and <code>Session</code> are returned.</p>
     */
    AuthenticationResult?: AuthenticationResultType;
}
export declare namespace InitiateAuthResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: InitiateAuthResponse) => any;
}
/**
 * <p>Represents the request to list the devices.</p>
 */
export interface ListDevicesRequest {
    /**
     * <p>The access tokens for the request to list devices.</p>
     */
    AccessToken: string | undefined;
    /**
     * <p>The limit of the device request.</p>
     */
    Limit?: number;
    /**
     * <p>The pagination token for the list request.</p>
     */
    PaginationToken?: string;
}
export declare namespace ListDevicesRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListDevicesRequest) => any;
}
/**
 * <p>Represents the response to list devices.</p>
 */
export interface ListDevicesResponse {
    /**
     * <p>The devices returned in the list devices response.</p>
     */
    Devices?: DeviceType[];
    /**
     * <p>The pagination token for the list device response.</p>
     */
    PaginationToken?: string;
}
export declare namespace ListDevicesResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListDevicesResponse) => any;
}
export interface ListGroupsRequest {
    /**
     * <p>The user pool ID for the user pool.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The limit of the request to list groups.</p>
     */
    Limit?: number;
    /**
     * <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
     */
    NextToken?: string;
}
export declare namespace ListGroupsRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListGroupsRequest) => any;
}
export interface ListGroupsResponse {
    /**
     * <p>The group objects for the groups.</p>
     */
    Groups?: GroupType[];
    /**
     * <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
     */
    NextToken?: string;
}
export declare namespace ListGroupsResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListGroupsResponse) => any;
}
export interface ListIdentityProvidersRequest {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The maximum number of identity providers to return.</p>
     */
    MaxResults?: number;
    /**
     * <p>A pagination token.</p>
     */
    NextToken?: string;
}
export declare namespace ListIdentityProvidersRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListIdentityProvidersRequest) => any;
}
/**
 * <p>A container for identity provider details.</p>
 */
export interface ProviderDescription {
    /**
     * <p>The identity provider name.</p>
     */
    ProviderName?: string;
    /**
     * <p>The identity provider type.</p>
     */
    ProviderType?: IdentityProviderTypeType | string;
    /**
     * <p>The date the provider was last modified.</p>
     */
    LastModifiedDate?: Date;
    /**
     * <p>The date the provider was added to the user pool.</p>
     */
    CreationDate?: Date;
}
export declare namespace ProviderDescription {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ProviderDescription) => any;
}
export interface ListIdentityProvidersResponse {
    /**
     * <p>A list of identity provider objects.</p>
     */
    Providers: ProviderDescription[] | undefined;
    /**
     * <p>A pagination token.</p>
     */
    NextToken?: string;
}
export declare namespace ListIdentityProvidersResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListIdentityProvidersResponse) => any;
}
export interface ListResourceServersRequest {
    /**
     * <p>The user pool ID for the user pool.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The maximum number of resource servers to return.</p>
     */
    MaxResults?: number;
    /**
     * <p>A pagination token.</p>
     */
    NextToken?: string;
}
export declare namespace ListResourceServersRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListResourceServersRequest) => any;
}
export interface ListResourceServersResponse {
    /**
     * <p>The resource servers.</p>
     */
    ResourceServers: ResourceServerType[] | undefined;
    /**
     * <p>A pagination token.</p>
     */
    NextToken?: string;
}
export declare namespace ListResourceServersResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListResourceServersResponse) => any;
}
export interface ListTagsForResourceRequest {
    /**
     * <p>The Amazon Resource Name (ARN) of the user pool that the tags are assigned to.</p>
     */
    ResourceArn: string | undefined;
}
export declare namespace ListTagsForResourceRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
}
export interface ListTagsForResourceResponse {
    /**
     * <p>The tags that are assigned to the user pool.</p>
     */
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace ListTagsForResourceResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
}
/**
 * <p>Represents the request to list the user import jobs.</p>
 */
export interface ListUserImportJobsRequest {
    /**
     * <p>The user pool ID for the user pool that the users are being imported into.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The maximum number of import jobs you want the request to return.</p>
     */
    MaxResults: number | undefined;
    /**
     * <p>An identifier that was returned from the previous call to <code>ListUserImportJobs</code>, which can be used to return the next set of import jobs in the list.</p>
     */
    PaginationToken?: string;
}
export declare namespace ListUserImportJobsRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListUserImportJobsRequest) => any;
}
/**
 * <p>Represents the response from the server to the request to list the user import jobs.</p>
 */
export interface ListUserImportJobsResponse {
    /**
     * <p>The user import jobs.</p>
     */
    UserImportJobs?: UserImportJobType[];
    /**
     * <p>An identifier that can be used to return the next set of user import jobs in the list.</p>
     */
    PaginationToken?: string;
}
export declare namespace ListUserImportJobsResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListUserImportJobsResponse) => any;
}
/**
 * <p>Represents the request to list the user pool clients.</p>
 */
export interface ListUserPoolClientsRequest {
    /**
     * <p>The user pool ID for the user pool where you want to list user pool clients.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The maximum number of results you want the request to return when listing the user pool clients.</p>
     */
    MaxResults?: number;
    /**
     * <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
     */
    NextToken?: string;
}
export declare namespace ListUserPoolClientsRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListUserPoolClientsRequest) => any;
}
/**
 * <p>The description of the user pool client.</p>
 */
export interface UserPoolClientDescription {
    /**
     * <p>The ID of the client associated with the user pool.</p>
     */
    ClientId?: string;
    /**
     * <p>The user pool ID for the user pool where you want to describe the user pool client.</p>
     */
    UserPoolId?: string;
    /**
     * <p>The client name from the user pool client description.</p>
     */
    ClientName?: string;
}
export declare namespace UserPoolClientDescription {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: UserPoolClientDescription) => any;
}
/**
 * <p>Represents the response from the server that lists user pool clients.</p>
 */
export interface ListUserPoolClientsResponse {
    /**
     * <p>The user pool clients in the response that lists user pool clients.</p>
     */
    UserPoolClients?: UserPoolClientDescription[];
    /**
     * <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
     */
    NextToken?: string;
}
export declare namespace ListUserPoolClientsResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListUserPoolClientsResponse) => any;
}
/**
 * <p>Represents the request to list user pools.</p>
 */
export interface ListUserPoolsRequest {
    /**
     * <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
     */
    NextToken?: string;
    /**
     * <p>The maximum number of results you want the request to return when listing the user pools.</p>
     */
    MaxResults: number | undefined;
}
export declare namespace ListUserPoolsRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListUserPoolsRequest) => any;
}
/**
 * <p>A user pool description.</p>
 */
export interface UserPoolDescriptionType {
    /**
     * <p>The ID in a user pool description.</p>
     */
    Id?: string;
    /**
     * <p>The name in a user pool description.</p>
     */
    Name?: string;
    /**
     * <p>The Lambda configuration information in a user pool description.</p>
     */
    LambdaConfig?: LambdaConfigType;
    /**
     * <p>The user pool status in a user pool description.</p>
     */
    Status?: StatusType | string;
    /**
     * <p>The date the user pool description was last modified.</p>
     */
    LastModifiedDate?: Date;
    /**
     * <p>The date the user pool description was created.</p>
     */
    CreationDate?: Date;
}
export declare namespace UserPoolDescriptionType {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: UserPoolDescriptionType) => any;
}
/**
 * <p>Represents the response to list user pools.</p>
 */
export interface ListUserPoolsResponse {
    /**
     * <p>The user pools from the response to list users.</p>
     */
    UserPools?: UserPoolDescriptionType[];
    /**
     * <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
     */
    NextToken?: string;
}
export declare namespace ListUserPoolsResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListUserPoolsResponse) => any;
}
/**
 * <p>Represents the request to list users.</p>
 */
export interface ListUsersRequest {
    /**
     * <p>The user pool ID for the user pool on which the search should be performed.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>An array of strings, where each string is the name of a user attribute to be returned for each user in the search results. If the array is null, all attributes are returned.</p>
     */
    AttributesToGet?: string[];
    /**
     * <p>Maximum number of users to be returned.</p>
     */
    Limit?: number;
    /**
     * <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
     */
    PaginationToken?: string;
    /**
     * <p>A filter string of the form "<i>AttributeName</i>
     *             <i>Filter-Type</i> "<i>AttributeValue</i>"". Quotation
     *             marks within the filter string must be escaped using the backslash (\) character. For example, "<code>family_name</code> = \"Reddy\"".</p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <i>AttributeName</i>: The name of the attribute to search for. You can only search for one attribute at a time.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <i>Filter-Type</i>: For an exact match, use =, for example, "<code>given_name</code> = \"Jon\"". For a prefix ("starts with") match, use ^=, for example,
     *             "<code>given_name</code> ^= \"Jon\"". </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <i>AttributeValue</i>: The attribute value that must be matched for each user.</p>
     *             </li>
     *          </ul>
     *         <p>If the filter string is empty, <code>ListUsers</code> returns all users in the user pool.</p>
     *         <p>You can only search for the following standard attributes:</p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>username</code> (case-sensitive)</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>email</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>phone_number</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>name</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>given_name</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>family_name</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>preferred_username</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>cognito:user_status</code> (called <b>Status</b> in the Console) (case-insensitive)</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>status (called <b>Enabled</b> in the Console) (case-sensitive)</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>sub</code>
     *                </p>
     *             </li>
     *          </ul>
     *         <p>Custom attributes aren't searchable.</p>
     *          <note>
     *             <p>You can also list users with a client-side filter. The server-side filter matches no more than 1 attribute. For an advanced search,
     *             use a client-side filter with the <code>--query</code> parameter of the <code>list-users</code> action in the CLI. When you use a
     *             client-side filter, ListUsers returns a paginated list of zero or more users. You can receive multiple pages in a row with zero
     *             results. Repeat the query with each pagination token that is returned until you receive a null pagination token value, and then
     *             review the combined result.
     *         </p>
     *             <p>For more information about server-side and client-side filtering,
     *             see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">FilteringCLI output</a>
     *             in the <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">Command Line Interface User Guide</a>.
     *         </p>
     *          </note>
     *         <p>For more information,
     *             see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api">Searching for Users
     *             Using the ListUsers API</a>
     *             and <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples">Examples of Using
     *             the ListUsers API</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
     */
    Filter?: string;
}
export declare namespace ListUsersRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListUsersRequest) => any;
}
/**
 * <p>The response from the request to list users.</p>
 */
export interface ListUsersResponse {
    /**
     * <p>The users returned in the request to list users.</p>
     */
    Users?: UserType[];
    /**
     * <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
     */
    PaginationToken?: string;
}
export declare namespace ListUsersResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListUsersResponse) => any;
}
export interface ListUsersInGroupRequest {
    /**
     * <p>The user pool ID for the user pool.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The name of the group.</p>
     */
    GroupName: string | undefined;
    /**
     * <p>The limit of the request to list users.</p>
     */
    Limit?: number;
    /**
     * <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
     */
    NextToken?: string;
}
export declare namespace ListUsersInGroupRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListUsersInGroupRequest) => any;
}
export interface ListUsersInGroupResponse {
    /**
     * <p>The users returned in the request to list users.</p>
     */
    Users?: UserType[];
    /**
     * <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
     */
    NextToken?: string;
}
export declare namespace ListUsersInGroupResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ListUsersInGroupResponse) => any;
}
/**
 * <p>Represents the request to resend the confirmation code.</p>
 */
export interface ResendConfirmationCodeRequest {
    /**
     * <p>The ID of the client associated with the user pool.</p>
     */
    ClientId: string | undefined;
    /**
     * <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.</p>
     */
    SecretHash?: string;
    /**
     * <p>Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.</p>
     */
    UserContextData?: UserContextDataType;
    /**
     * <p>The <code>username</code> attribute of the user to whom you want to resend a confirmation code.</p>
     */
    Username: string | undefined;
    /**
     * <p>The Amazon Pinpoint analytics metadata for collecting metrics for <code>ResendConfirmationCode</code> calls.</p>
     */
    AnalyticsMetadata?: AnalyticsMetadataType;
    /**
     * <p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers.</p>
     *         <p>You create custom workflows by assigning Lambda functions to user pool triggers.
     *             When you use the ResendConfirmationCode API action, Amazon Cognito invokes the function that is
     *             assigned to the <i>custom message</i> trigger. When Amazon Cognito invokes this
     *             function, it passes a JSON payload, which the function receives as input. This payload
     *             contains a <code>clientMetadata</code> attribute, which provides the data that you
     *             assigned to the ClientMetadata parameter in your ResendConfirmationCode request. In your
     *             function code in Lambda, you can process the <code>clientMetadata</code> value to enhance
     *             your workflow for your specific needs.</p>
     *
     *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
     * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
     *
     *          <note>
     *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
     *             <ul>
     *                <li>
     *                   <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool
     *                 configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.</p>
     *                </li>
     *                <li>
     *                   <p>Validate the ClientMetadata value.</p>
     *                </li>
     *                <li>
     *                   <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p>
     *                </li>
     *             </ul>
     *          </note>
     */
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace ResendConfirmationCodeRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ResendConfirmationCodeRequest) => any;
}
/**
 * <p>The response from the server when Amazon Cognito makes the request to resend a confirmation code.</p>
 */
export interface ResendConfirmationCodeResponse {
    /**
     * <p>The code delivery details returned by the server in response to the request to resend the confirmation code.</p>
     */
    CodeDeliveryDetails?: CodeDeliveryDetailsType;
}
export declare namespace ResendConfirmationCodeResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: ResendConfirmationCodeResponse) => any;
}
/**
 * <p>The request to respond to an authentication challenge.</p>
 */
export interface RespondToAuthChallengeRequest {
    /**
     * <p>The app client ID.</p>
     */
    ClientId: string | undefined;
    /**
     * <p>The challenge name. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html">InitiateAuth</a>.</p>
     *         <p>
     *             <code>ADMIN_NO_SRP_AUTH</code> isn't a valid value.</p>
     */
    ChallengeName: ChallengeNameType | string | undefined;
    /**
     * <p>The session that should be passed both ways in challenge-response calls to the service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call determines
     *             that the caller must pass another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code>
     *             API call.</p>
     */
    Session?: string;
    /**
     * <p>The challenge responses. These are inputs corresponding to the value of <code>ChallengeName</code>, for example:</p>
     *          <note>
     *             <p>
     *                <code>SECRET_HASH</code> (if app client is configured with client secret) applies to all of the inputs that follow (including <code>SOFTWARE_TOKEN_MFA</code>).</p>
     *          </note>
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>, <code>USERNAME</code>.</p>
     *                <note>
     *                   <p>
     *                      <code>PASSWORD_VERIFIER</code> requires <code>DEVICE_KEY</code> when signing in with a remembered device.</p>
     *                </note>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other required attributes, <code>USERNAME</code>. </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>SOFTWARE_TOKEN_MFA</code>: <code>USERNAME</code> and <code>SOFTWARE_TOKEN_MFA_CODE</code> are required attributes.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>DEVICE_SRP_AUTH</code> requires <code>USERNAME</code>, <code>DEVICE_KEY</code>, <code>SRP_A</code> (and <code>SECRET_HASH</code>).</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>DEVICE_PASSWORD_VERIFIER</code> requires everything that <code>PASSWORD_VERIFIER</code> requires, plus <code>DEVICE_KEY</code>.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>MFA_SETUP</code> requires <code>USERNAME</code>, plus you must use the session value returned by <code>VerifySoftwareToken</code> in the <code>Session</code> parameter.</p>
     *             </li>
     *          </ul>
     */
    ChallengeResponses?: {
        [key: string]: string;
    };
    /**
     * <p>The Amazon Pinpoint analytics metadata for collecting metrics for <code>RespondToAuthChallenge</code> calls.</p>
     */
    AnalyticsMetadata?: AnalyticsMetadataType;
    /**
     * <p>Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.</p>
     */
    UserContextData?: UserContextDataType;
    /**
     * <p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers.</p>
     *         <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the RespondToAuthChallenge API action, Amazon Cognito
     *             invokes any functions that are assigned to the following triggers: <i>post authentication</i>, <i>pre token generation</i>,
     *             <i>define auth challenge</i>, <i>create auth challenge</i>, and <i>verify auth challenge</i>. When Amazon Cognito
     *             invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code>
     *             attribute, which provides the data that you assigned to the ClientMetadata parameter in your RespondToAuthChallenge request. In your function code in
     *             Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p>
     *
     *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
     * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
     *
     *          <note>
     *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
     *             <ul>
     *                <li>
     *                   <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration
     *                 doesn't include triggers, the ClientMetadata parameter serves no purpose.</p>
     *                </li>
     *                <li>
     *                   <p>Validate the ClientMetadata value.</p>
     *                </li>
     *                <li>
     *                   <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p>
     *                </li>
     *             </ul>
     *          </note>
     */
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace RespondToAuthChallengeRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: RespondToAuthChallengeRequest) => any;
}
/**
 * <p>The response to respond to the authentication challenge.</p>
 */
export interface RespondToAuthChallengeResponse {
    /**
     * <p>The challenge name. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html">InitiateAuth</a>.</p>
     */
    ChallengeName?: ChallengeNameType | string;
    /**
     * <p>The session that should be passed both ways in challenge-response calls to the service. If the caller must pass another challenge, they return a session with other challenge parameters.
     *             This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.</p>
     */
    Session?: string;
    /**
     * <p>The challenge parameters. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html">InitiateAuth</a>.</p>
     */
    ChallengeParameters?: {
        [key: string]: string;
    };
    /**
     * <p>The result returned by the server in response to the request to respond to the authentication challenge.</p>
     */
    AuthenticationResult?: AuthenticationResultType;
}
export declare namespace RespondToAuthChallengeResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: RespondToAuthChallengeResponse) => any;
}
export interface RevokeTokenRequest {
    /**
     * <p>The refresh token that you want to revoke.</p>
     */
    Token: string | undefined;
    /**
     * <p>The client ID for the token that you want to revoke.</p>
     */
    ClientId: string | undefined;
    /**
     * <p>The secret for the client ID. This is required only if the client ID has a secret.</p>
     */
    ClientSecret?: string;
}
export declare namespace RevokeTokenRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: RevokeTokenRequest) => any;
}
export interface RevokeTokenResponse {
}
export declare namespace RevokeTokenResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: RevokeTokenResponse) => any;
}
/**
 * <p>Exception that is thrown when the request isn't authorized. This can happen due to an invalid access token in the request.</p>
 */
export declare class UnauthorizedException extends __BaseException {
    readonly name: "UnauthorizedException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<UnauthorizedException, __BaseException>);
}
/**
 * <p>Exception that is thrown when you attempt to perform an operation that isn't enabled for the user pool client.</p>
 */
export declare class UnsupportedOperationException extends __BaseException {
    readonly name: "UnsupportedOperationException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<UnsupportedOperationException, __BaseException>);
}
/**
 * <p>Exception that is thrown when an unsupported token is passed to an operation.</p>
 */
export declare class UnsupportedTokenTypeException extends __BaseException {
    readonly name: "UnsupportedTokenTypeException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<UnsupportedTokenTypeException, __BaseException>);
}
export interface SetRiskConfigurationRequest {
    /**
     * <p>The user pool ID. </p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The app client ID. If <code>ClientId</code> is null, then the risk configuration is mapped to <code>userPoolId</code>. When the client ID is null, the same risk configuration is applied
     *             to all the clients in the userPool.</p>
     *         <p>Otherwise, <code>ClientId</code> is mapped to the client. When the client ID isn't null, the user pool configuration is overridden and the risk configuration for the client is used instead.</p>
     */
    ClientId?: string;
    /**
     * <p>The compromised credentials risk configuration.</p>
     */
    CompromisedCredentialsRiskConfiguration?: CompromisedCredentialsRiskConfigurationType;
    /**
     * <p>The account takeover risk configuration.</p>
     */
    AccountTakeoverRiskConfiguration?: AccountTakeoverRiskConfigurationType;
    /**
     * <p>The configuration to override the risk decision.</p>
     */
    RiskExceptionConfiguration?: RiskExceptionConfigurationType;
}
export declare namespace SetRiskConfigurationRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SetRiskConfigurationRequest) => any;
}
export interface SetRiskConfigurationResponse {
    /**
     * <p>The risk configuration.</p>
     */
    RiskConfiguration: RiskConfigurationType | undefined;
}
export declare namespace SetRiskConfigurationResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SetRiskConfigurationResponse) => any;
}
export interface SetUICustomizationRequest {
    /**
     * <p>The user pool ID for the user pool.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The client ID for the client app.</p>
     */
    ClientId?: string;
    /**
     * <p>The CSS values in the UI customization.</p>
     */
    CSS?: string;
    /**
     * <p>The uploaded logo image for the UI customization.</p>
     */
    ImageFile?: Uint8Array;
}
export declare namespace SetUICustomizationRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SetUICustomizationRequest) => any;
}
export interface SetUICustomizationResponse {
    /**
     * <p>The UI customization information.</p>
     */
    UICustomization: UICustomizationType | undefined;
}
export declare namespace SetUICustomizationResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SetUICustomizationResponse) => any;
}
export interface SetUserMFAPreferenceRequest {
    /**
     * <p>The SMS text message multi-factor authentication (MFA) settings.</p>
     */
    SMSMfaSettings?: SMSMfaSettingsType;
    /**
     * <p>The time-based one-time password software token MFA settings.</p>
     */
    SoftwareTokenMfaSettings?: SoftwareTokenMfaSettingsType;
    /**
     * <p>The access token for the user.</p>
     */
    AccessToken: string | undefined;
}
export declare namespace SetUserMFAPreferenceRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SetUserMFAPreferenceRequest) => any;
}
export interface SetUserMFAPreferenceResponse {
}
export declare namespace SetUserMFAPreferenceResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SetUserMFAPreferenceResponse) => any;
}
export interface SetUserPoolMfaConfigRequest {
    /**
     * <p>The user pool ID.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The SMS text message MFA configuration.</p>
     */
    SmsMfaConfiguration?: SmsMfaConfigType;
    /**
     * <p>The software token MFA configuration.</p>
     */
    SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType;
    /**
     * <p>The MFA configuration. If you set the MfaConfiguration value to ‘ON’, only users who
     *             have set up an MFA factor can sign in. To learn more, see <a href="cognito/latest/developerguide/user-pool-settings-mfa.html">Adding Multi-Factor
     *                 Authentication (MFA) to a user pool</a>. Valid values include:</p>
     *
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>OFF</code> MFA won't be used for any users.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>ON</code> MFA is required for all users to sign in.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>OPTIONAL</code> MFA will be required only for individual users who have an MFA factor activated.</p>
     *             </li>
     *          </ul>
     */
    MfaConfiguration?: UserPoolMfaType | string;
}
export declare namespace SetUserPoolMfaConfigRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SetUserPoolMfaConfigRequest) => any;
}
export interface SetUserPoolMfaConfigResponse {
    /**
     * <p>The SMS text message MFA configuration.</p>
     */
    SmsMfaConfiguration?: SmsMfaConfigType;
    /**
     * <p>The software token MFA configuration.</p>
     */
    SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType;
    /**
     * <p>The MFA configuration. Valid values include:</p>
     *
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>OFF</code> MFA won't be used for any users.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>ON</code> MFA is required for all users to sign in.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>OPTIONAL</code> MFA will be required only for individual users who have an MFA factor enabled.</p>
     *             </li>
     *          </ul>
     */
    MfaConfiguration?: UserPoolMfaType | string;
}
export declare namespace SetUserPoolMfaConfigResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SetUserPoolMfaConfigResponse) => any;
}
/**
 * <p>Represents the request to set user settings.</p>
 */
export interface SetUserSettingsRequest {
    /**
     * <p>The access token for the set user settings request.</p>
     */
    AccessToken: string | undefined;
    /**
     * <p>You can use this parameter only to set an SMS configuration that uses SMS for delivery.</p>
     */
    MFAOptions: MFAOptionType[] | undefined;
}
export declare namespace SetUserSettingsRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SetUserSettingsRequest) => any;
}
/**
 * <p>The response from the server for a set user settings request.</p>
 */
export interface SetUserSettingsResponse {
}
export declare namespace SetUserSettingsResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SetUserSettingsResponse) => any;
}
/**
 * <p>Represents the request to register a user.</p>
 */
export interface SignUpRequest {
    /**
     * <p>The ID of the client associated with the user pool.</p>
     */
    ClientId: string | undefined;
    /**
     * <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.</p>
     */
    SecretHash?: string;
    /**
     * <p>The user name of the user you want to register.</p>
     */
    Username: string | undefined;
    /**
     * <p>The password of the user you want to register.</p>
     */
    Password: string | undefined;
    /**
     * <p>An array of name-value pairs representing user attributes.</p>
     *         <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>
     */
    UserAttributes?: AttributeType[];
    /**
     * <p>The validation data in the request to register a user.</p>
     */
    ValidationData?: AttributeType[];
    /**
     * <p>The Amazon Pinpoint analytics metadata for collecting metrics for <code>SignUp</code> calls.</p>
     */
    AnalyticsMetadata?: AnalyticsMetadataType;
    /**
     * <p>Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.</p>
     */
    UserContextData?: UserContextDataType;
    /**
     * <p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers.</p>
     *         <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the SignUp API action, Amazon Cognito
     *             invokes any functions that are assigned to the following triggers: <i>pre sign-up</i>, <i>custom message</i>,
     *             and <i>post confirmation</i>. When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function
     *             receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the
     *             ClientMetadata parameter in your SignUp request. In your function code in Lambda, you can process the <code>clientMetadata</code>
     *             value to enhance your workflow for your specific needs.</p>
     *
     *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
     * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
     *
     *         <note>
     *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
     *             <ul>
     *                <li>
     *                   <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool
     *                     configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.</p>
     *                </li>
     *                <li>
     *                   <p>Validate the ClientMetadata value.</p>
     *                </li>
     *                <li>
     *                   <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p>
     *                </li>
     *             </ul>
     *         </note>
     */
    ClientMetadata?: {
        [key: string]: string;
    };
}
export declare namespace SignUpRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SignUpRequest) => any;
}
/**
 * <p>The response from the server for a registration request.</p>
 */
export interface SignUpResponse {
    /**
     * <p>A response from the server indicating that a user registration has been confirmed.</p>
     */
    UserConfirmed: boolean | undefined;
    /**
     * <p>The code delivery details returned by the server response to the user registration request.</p>
     */
    CodeDeliveryDetails?: CodeDeliveryDetailsType;
    /**
     * <p>The UUID of the authenticated user. This isn't the same as <code>username</code>.</p>
     */
    UserSub: string | undefined;
}
export declare namespace SignUpResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SignUpResponse) => any;
}
/**
 * <p>Represents the request to start the user import job.</p>
 */
export interface StartUserImportJobRequest {
    /**
     * <p>The user pool ID for the user pool that the users are being imported into.</p>
     */
    UserPoolId: string | undefined;
    /**
     * <p>The job ID for the user import job.</p>
     */
    JobId: string | undefined;
}
export declare namespace StartUserImportJobRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: StartUserImportJobRequest) => any;
}
